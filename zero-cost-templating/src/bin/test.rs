#![feature(prelude_import)]
#![feature(async_closure, async_iterator, coroutines, gen_blocks, noop_waker)]
#[prelude_import]
use std::prelude::rust_2024::*;
#[macro_use]
extern crate std;

extern crate alloc;

use std::borrow::Cow;

use zero_cost_templating::{template_stream, yields};

// https://github.com/dtolnay/cargo-expand

// export RUSTFLAGS="-Z proc-macro-backtrace"
// cargo build
// cargo expand --package zero-cost-templating --bin simple
// cargo expand --package zero-cost-templating --bin simple > zero-cost-templating/src/bin/test.rs
// cargo run --release --bin simple

// RUSTFLAGS="-Zprint-type-sizes" cargo run --release --bin simple > type-sizes.txt
// search for
// `{static coroutine@

#[must_use]
pub struct Template<Type, Partial, After> {
    r#type: Type,
    partial: Partial,
    after: After,
}
#[must_use]
pub struct AEmptyTemplate0;
#[must_use]
pub struct AEmptyTemplate1;
#[must_use]
pub struct AEmptyTemplate2;
#[must_use]
pub struct AEmptyTemplate3;
#[must_use]
pub struct AEmptyTemplate4;
#[must_use]
pub struct AEmptyTemplate5;
#[must_use]
pub struct AEmptyTemplate6;
#[must_use]
pub struct AEmptyTemplate7;
#[must_use]
pub struct AEmptyTemplate8;
#[must_use]
pub struct AEmptyTemplate9;
#[must_use]
pub struct AEmptyTemplate10;
#[must_use]
pub struct AEmptyTemplate11;
#[must_use]
pub struct AEmptyTemplate12;
#[must_use]
pub struct AEmptyTemplate13;
#[must_use]
pub struct AEmptyTemplate14;
#[must_use]
pub struct AEmptyTemplate15;
#[must_use]
pub struct AEmptyTemplate16;
#[must_use]
pub struct AEmptyTemplate17;
#[must_use]
pub struct AEmptyTemplate18;
#[must_use]
pub struct AEmptyTemplate19;
#[must_use]
pub struct AEmptyTemplate20;
#[must_use]
pub struct AEmptyTemplate21;
#[must_use]
pub struct AEmptyTemplate22;
#[must_use]
pub struct AEmptyTemplate23;
#[must_use]
pub struct AEmptyTemplate24;
#[must_use]
pub struct AEmptyTemplate25;
#[must_use]
pub struct AEmptyTemplate26;
#[must_use]
pub struct AEmptyTemplate27;
#[must_use]
pub struct AEmptyTemplate28;
#[must_use]
pub struct AEmptyTemplate29;
#[must_use]
pub struct AEmptyTemplate30;
#[must_use]
pub struct AEmptyTemplate31;
#[must_use]
pub struct AEmptyTemplate32;
#[must_use]
pub struct AEmptyTemplate33;
#[must_use]
pub struct AEmptyTemplate34;
#[must_use]
pub struct AEmptyTemplate35;
#[must_use]
pub struct AEmptyTemplate36;
#[must_use]
pub struct AEmptyTemplate37;
#[must_use]
pub struct AEmptyTemplate38;
#[must_use]
pub struct AEmptyTemplate39;
#[must_use]
pub struct AEmptyTemplate40;
#[must_use]
pub struct AEmptyTemplate41;
#[must_use]
pub struct AEmptyTemplate42;
#[must_use]
pub struct AEmptyTemplate43;
#[must_use]
pub struct AEmptyTemplate44;
#[must_use]
pub struct AEmptyTemplate45;
#[must_use]
pub struct AEmptyTemplate46;
#[must_use]
pub struct AEmptyTemplate47;
#[must_use]
pub struct AEmptyTemplate48;
#[must_use]
pub struct AEmptyTemplate49;
#[must_use]
pub struct AEmptyTemplate50;
#[must_use]
pub struct AEmptyTemplate51;
#[must_use]
pub struct AEmptyTemplate52;
#[must_use]
pub struct AEmptyTemplate53;
#[must_use]
pub struct AEmptyTemplate54;
#[must_use]
pub struct AEmptyTemplate55;
#[must_use]
pub struct AEmptyTemplate56;
#[must_use]
pub struct AEmptyTemplate57;
#[must_use]
pub struct AEmptyTemplate58;
#[must_use]
pub struct AEmptyTemplate59;
#[must_use]
pub struct AEmptyTemplate60;
#[must_use]
pub struct AEmptyTemplate61;
#[must_use]
pub struct AEmptyTemplate62;
#[must_use]
pub struct AEmptyTemplate63;
#[must_use]
pub struct AEmptyTemplate64;
#[must_use]
pub struct AEmptyTemplate65;
#[must_use]
pub struct AEmptyTemplate66;
#[must_use]
pub struct AEmptyTemplate67;
#[must_use]
pub struct AEmptyTemplate68;
#[must_use]
pub struct AEmptyTemplate69;
#[must_use]
pub struct AEmptyTemplate70;
#[must_use]
pub struct AEmptyTemplate71;
#[must_use]
pub struct AEmptyTemplate72;
#[must_use]
pub struct AEmptyTemplate73;
#[must_use]
pub struct AEmptyTemplate74;
#[must_use]
pub struct AEmptyTemplate75;
#[must_use]
pub struct AEmptyTemplate76;
#[must_use]
pub struct AEmptyTemplate77;
#[must_use]
pub struct AEmptyTemplate78;
#[must_use]
pub struct AEmptyTemplate79;
#[must_use]
pub struct AEmptyTemplate80;
#[must_use]
pub struct AEmptyTemplate81;
#[must_use]
pub struct AEmptyTemplate82;
#[must_use]
pub struct AEmptyTemplate83;
#[must_use]
pub struct AEmptyTemplate84;
#[must_use]
pub struct AEmptyTemplate85;
#[must_use]
pub struct AEmptyTemplate86;
#[must_use]
pub struct AEmptyTemplate87;
#[must_use]
pub struct AEmptyTemplate88;
#[must_use]
pub struct AEmptyTemplate89;
#[must_use]
pub struct AEmptyTemplate90;
#[must_use]
pub struct AEmptyTemplate91;
impl<Partial, After> Template<AEmptyTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<AEmptyTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<AEmptyTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<AEmptyTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn a_empty()
    ->
        ((),
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    ((), async gen {})
}
const _a_empty_FORCE_RECOMPILE: &'static str = "";
#[must_use]
pub struct BTextTemplate0;
#[must_use]
pub struct BTextTemplate1;
#[must_use]
pub struct BTextTemplate2;
#[must_use]
pub struct BTextTemplate3;
#[must_use]
pub struct BTextTemplate4;
#[must_use]
pub struct BTextTemplate5;
#[must_use]
pub struct BTextTemplate6;
#[must_use]
pub struct BTextTemplate7;
#[must_use]
pub struct BTextTemplate8;
#[must_use]
pub struct BTextTemplate9;
#[must_use]
pub struct BTextTemplate10;
#[must_use]
pub struct BTextTemplate11;
#[must_use]
pub struct BTextTemplate12;
#[must_use]
pub struct BTextTemplate13;
#[must_use]
pub struct BTextTemplate14;
#[must_use]
pub struct BTextTemplate15;
#[must_use]
pub struct BTextTemplate16;
#[must_use]
pub struct BTextTemplate17;
#[must_use]
pub struct BTextTemplate18;
#[must_use]
pub struct BTextTemplate19;
#[must_use]
pub struct BTextTemplate20;
#[must_use]
pub struct BTextTemplate21;
#[must_use]
pub struct BTextTemplate22;
#[must_use]
pub struct BTextTemplate23;
#[must_use]
pub struct BTextTemplate24;
#[must_use]
pub struct BTextTemplate25;
#[must_use]
pub struct BTextTemplate26;
#[must_use]
pub struct BTextTemplate27;
#[must_use]
pub struct BTextTemplate28;
#[must_use]
pub struct BTextTemplate29;
#[must_use]
pub struct BTextTemplate30;
#[must_use]
pub struct BTextTemplate31;
#[must_use]
pub struct BTextTemplate32;
#[must_use]
pub struct BTextTemplate33;
#[must_use]
pub struct BTextTemplate34;
#[must_use]
pub struct BTextTemplate35;
#[must_use]
pub struct BTextTemplate36;
#[must_use]
pub struct BTextTemplate37;
#[must_use]
pub struct BTextTemplate38;
#[must_use]
pub struct BTextTemplate39;
#[must_use]
pub struct BTextTemplate40;
#[must_use]
pub struct BTextTemplate41;
#[must_use]
pub struct BTextTemplate42;
#[must_use]
pub struct BTextTemplate43;
#[must_use]
pub struct BTextTemplate44;
#[must_use]
pub struct BTextTemplate45;
#[must_use]
pub struct BTextTemplate46;
#[must_use]
pub struct BTextTemplate47;
#[must_use]
pub struct BTextTemplate48;
#[must_use]
pub struct BTextTemplate49;
#[must_use]
pub struct BTextTemplate50;
#[must_use]
pub struct BTextTemplate51;
#[must_use]
pub struct BTextTemplate52;
#[must_use]
pub struct BTextTemplate53;
#[must_use]
pub struct BTextTemplate54;
#[must_use]
pub struct BTextTemplate55;
#[must_use]
pub struct BTextTemplate56;
#[must_use]
pub struct BTextTemplate57;
#[must_use]
pub struct BTextTemplate58;
#[must_use]
pub struct BTextTemplate59;
#[must_use]
pub struct BTextTemplate60;
#[must_use]
pub struct BTextTemplate61;
#[must_use]
pub struct BTextTemplate62;
#[must_use]
pub struct BTextTemplate63;
#[must_use]
pub struct BTextTemplate64;
#[must_use]
pub struct BTextTemplate65;
#[must_use]
pub struct BTextTemplate66;
#[must_use]
pub struct BTextTemplate67;
#[must_use]
pub struct BTextTemplate68;
#[must_use]
pub struct BTextTemplate69;
#[must_use]
pub struct BTextTemplate70;
#[must_use]
pub struct BTextTemplate71;
#[must_use]
pub struct BTextTemplate72;
#[must_use]
pub struct BTextTemplate73;
#[must_use]
pub struct BTextTemplate74;
#[must_use]
pub struct BTextTemplate75;
#[must_use]
pub struct BTextTemplate76;
#[must_use]
pub struct BTextTemplate77;
#[must_use]
pub struct BTextTemplate78;
#[must_use]
pub struct BTextTemplate79;
#[must_use]
pub struct BTextTemplate80;
#[must_use]
pub struct BTextTemplate81;
#[must_use]
pub struct BTextTemplate82;
#[must_use]
pub struct BTextTemplate83;
#[must_use]
pub struct BTextTemplate84;
#[must_use]
pub struct BTextTemplate85;
#[must_use]
pub struct BTextTemplate86;
#[must_use]
pub struct BTextTemplate87;
#[must_use]
pub struct BTextTemplate88;
#[must_use]
pub struct BTextTemplate89;
#[must_use]
pub struct BTextTemplate90;
#[must_use]
pub struct BTextTemplate91;
impl<Partial, After> Template<BTextTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<BTextTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<BTextTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<BTextTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<BTextTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<BTextTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<BTextTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<BTextTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<BTextTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<BTextTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<BTextTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<BTextTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<BTextTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<BTextTemplate19, Template<Partial, PartialPartial, PartialAfter>,
    After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<BTextTemplate56, Template<Partial, PartialPartial, PartialAfter>,
    After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<BTextTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<BTextTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<BTextTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<BTextTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<BTextTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<BTextTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<BTextTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<BTextTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<BTextTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<BTextTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<BTextTemplate28, Template<Partial, PartialPartial, PartialAfter>,
    After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn b_text()
    ->
        (Template<BTextTemplate1, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<BTextTemplate1, (),
            ()> { r#type: BTextTemplate1, partial: (), after: () },
        async gen {})
}
const _b_text_FORCE_RECOMPILE: &'static str = "hello";
#[must_use]
pub struct CElementWithAttributeTemplate0;
#[must_use]
pub struct CElementWithAttributeTemplate1;
#[must_use]
pub struct CElementWithAttributeTemplate2;
#[must_use]
pub struct CElementWithAttributeTemplate3;
#[must_use]
pub struct CElementWithAttributeTemplate4;
#[must_use]
pub struct CElementWithAttributeTemplate5;
#[must_use]
pub struct CElementWithAttributeTemplate6;
#[must_use]
pub struct CElementWithAttributeTemplate7;
#[must_use]
pub struct CElementWithAttributeTemplate8;
#[must_use]
pub struct CElementWithAttributeTemplate9;
#[must_use]
pub struct CElementWithAttributeTemplate10;
#[must_use]
pub struct CElementWithAttributeTemplate11;
#[must_use]
pub struct CElementWithAttributeTemplate12;
#[must_use]
pub struct CElementWithAttributeTemplate13;
#[must_use]
pub struct CElementWithAttributeTemplate14;
#[must_use]
pub struct CElementWithAttributeTemplate15;
#[must_use]
pub struct CElementWithAttributeTemplate16;
#[must_use]
pub struct CElementWithAttributeTemplate17;
#[must_use]
pub struct CElementWithAttributeTemplate18;
#[must_use]
pub struct CElementWithAttributeTemplate19;
#[must_use]
pub struct CElementWithAttributeTemplate20;
#[must_use]
pub struct CElementWithAttributeTemplate21;
#[must_use]
pub struct CElementWithAttributeTemplate22;
#[must_use]
pub struct CElementWithAttributeTemplate23;
#[must_use]
pub struct CElementWithAttributeTemplate24;
#[must_use]
pub struct CElementWithAttributeTemplate25;
#[must_use]
pub struct CElementWithAttributeTemplate26;
#[must_use]
pub struct CElementWithAttributeTemplate27;
#[must_use]
pub struct CElementWithAttributeTemplate28;
#[must_use]
pub struct CElementWithAttributeTemplate29;
#[must_use]
pub struct CElementWithAttributeTemplate30;
#[must_use]
pub struct CElementWithAttributeTemplate31;
#[must_use]
pub struct CElementWithAttributeTemplate32;
#[must_use]
pub struct CElementWithAttributeTemplate33;
#[must_use]
pub struct CElementWithAttributeTemplate34;
#[must_use]
pub struct CElementWithAttributeTemplate35;
#[must_use]
pub struct CElementWithAttributeTemplate36;
#[must_use]
pub struct CElementWithAttributeTemplate37;
#[must_use]
pub struct CElementWithAttributeTemplate38;
#[must_use]
pub struct CElementWithAttributeTemplate39;
#[must_use]
pub struct CElementWithAttributeTemplate40;
#[must_use]
pub struct CElementWithAttributeTemplate41;
#[must_use]
pub struct CElementWithAttributeTemplate42;
#[must_use]
pub struct CElementWithAttributeTemplate43;
#[must_use]
pub struct CElementWithAttributeTemplate44;
#[must_use]
pub struct CElementWithAttributeTemplate45;
#[must_use]
pub struct CElementWithAttributeTemplate46;
#[must_use]
pub struct CElementWithAttributeTemplate47;
#[must_use]
pub struct CElementWithAttributeTemplate48;
#[must_use]
pub struct CElementWithAttributeTemplate49;
#[must_use]
pub struct CElementWithAttributeTemplate50;
#[must_use]
pub struct CElementWithAttributeTemplate51;
#[must_use]
pub struct CElementWithAttributeTemplate52;
#[must_use]
pub struct CElementWithAttributeTemplate53;
#[must_use]
pub struct CElementWithAttributeTemplate54;
#[must_use]
pub struct CElementWithAttributeTemplate55;
#[must_use]
pub struct CElementWithAttributeTemplate56;
#[must_use]
pub struct CElementWithAttributeTemplate57;
#[must_use]
pub struct CElementWithAttributeTemplate58;
#[must_use]
pub struct CElementWithAttributeTemplate59;
#[must_use]
pub struct CElementWithAttributeTemplate60;
#[must_use]
pub struct CElementWithAttributeTemplate61;
#[must_use]
pub struct CElementWithAttributeTemplate62;
#[must_use]
pub struct CElementWithAttributeTemplate63;
#[must_use]
pub struct CElementWithAttributeTemplate64;
#[must_use]
pub struct CElementWithAttributeTemplate65;
#[must_use]
pub struct CElementWithAttributeTemplate66;
#[must_use]
pub struct CElementWithAttributeTemplate67;
#[must_use]
pub struct CElementWithAttributeTemplate68;
#[must_use]
pub struct CElementWithAttributeTemplate69;
#[must_use]
pub struct CElementWithAttributeTemplate70;
#[must_use]
pub struct CElementWithAttributeTemplate71;
#[must_use]
pub struct CElementWithAttributeTemplate72;
#[must_use]
pub struct CElementWithAttributeTemplate73;
#[must_use]
pub struct CElementWithAttributeTemplate74;
#[must_use]
pub struct CElementWithAttributeTemplate75;
#[must_use]
pub struct CElementWithAttributeTemplate76;
#[must_use]
pub struct CElementWithAttributeTemplate77;
#[must_use]
pub struct CElementWithAttributeTemplate78;
#[must_use]
pub struct CElementWithAttributeTemplate79;
#[must_use]
pub struct CElementWithAttributeTemplate80;
#[must_use]
pub struct CElementWithAttributeTemplate81;
#[must_use]
pub struct CElementWithAttributeTemplate82;
#[must_use]
pub struct CElementWithAttributeTemplate83;
#[must_use]
pub struct CElementWithAttributeTemplate84;
#[must_use]
pub struct CElementWithAttributeTemplate85;
#[must_use]
pub struct CElementWithAttributeTemplate86;
#[must_use]
pub struct CElementWithAttributeTemplate87;
#[must_use]
pub struct CElementWithAttributeTemplate88;
#[must_use]
pub struct CElementWithAttributeTemplate89;
#[must_use]
pub struct CElementWithAttributeTemplate90;
#[must_use]
pub struct CElementWithAttributeTemplate91;
impl<Partial, After> Template<CElementWithAttributeTemplate1, Partial, After>
    {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate2, Partial, After>
    {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate3, Partial, After>
    {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate4, Partial, After>
    {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate5, Partial, After>
    {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate6, Partial, After>
    {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate7, Partial, After>
    {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate35, Partial, After>
    {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate8, Partial, After>
    {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate9, Partial, After>
    {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate9, Partial, After>
    {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate12, Partial, After>
    {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate15, Partial, After>
    {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate16, Partial, After>
    {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate48, Partial, After>
    {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate17, Partial, After>
    {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate50, Partial, After>
    {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate18, Partial, After>
    {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CElementWithAttributeTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CElementWithAttributeTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate57, Partial, After>
    {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate20, Partial, After>
    {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate60, Partial, After>
    {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate59, Partial, After>
    {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate21, Partial, After>
    {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate63, Partial, After>
    {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate22, Partial, After>
    {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate68, Partial, After>
    {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate67, Partial, After>
    {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate71, Partial, After>
    {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate23, Partial, After>
    {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate74, Partial, After>
    {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate24, Partial, After>
    {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate77, Partial, After>
    {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate76, Partial, After>
    {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate80, Partial, After>
    {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate79, Partial, After>
    {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate25, Partial, After>
    {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate84, Partial, After>
    {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate83, Partial, After>
    {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate26, Partial, After>
    {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate89, Partial, After>
    {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CElementWithAttributeTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn c_element_with_attribute()
    ->
        (Template<CElementWithAttributeTemplate2, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<CElementWithAttributeTemplate2, (),
            ()> {
            r#type: CElementWithAttributeTemplate2,
            partial: (),
            after: (),
        }, async gen {})
}
const _c_element_with_attribute_FORCE_RECOMPILE: &'static str =
    "<a class=\"test\"></a>";
#[must_use]
pub struct CElementWithContentTemplate0;
#[must_use]
pub struct CElementWithContentTemplate1;
#[must_use]
pub struct CElementWithContentTemplate2;
#[must_use]
pub struct CElementWithContentTemplate3;
#[must_use]
pub struct CElementWithContentTemplate4;
#[must_use]
pub struct CElementWithContentTemplate5;
#[must_use]
pub struct CElementWithContentTemplate6;
#[must_use]
pub struct CElementWithContentTemplate7;
#[must_use]
pub struct CElementWithContentTemplate8;
#[must_use]
pub struct CElementWithContentTemplate9;
#[must_use]
pub struct CElementWithContentTemplate10;
#[must_use]
pub struct CElementWithContentTemplate11;
#[must_use]
pub struct CElementWithContentTemplate12;
#[must_use]
pub struct CElementWithContentTemplate13;
#[must_use]
pub struct CElementWithContentTemplate14;
#[must_use]
pub struct CElementWithContentTemplate15;
#[must_use]
pub struct CElementWithContentTemplate16;
#[must_use]
pub struct CElementWithContentTemplate17;
#[must_use]
pub struct CElementWithContentTemplate18;
#[must_use]
pub struct CElementWithContentTemplate19;
#[must_use]
pub struct CElementWithContentTemplate20;
#[must_use]
pub struct CElementWithContentTemplate21;
#[must_use]
pub struct CElementWithContentTemplate22;
#[must_use]
pub struct CElementWithContentTemplate23;
#[must_use]
pub struct CElementWithContentTemplate24;
#[must_use]
pub struct CElementWithContentTemplate25;
#[must_use]
pub struct CElementWithContentTemplate26;
#[must_use]
pub struct CElementWithContentTemplate27;
#[must_use]
pub struct CElementWithContentTemplate28;
#[must_use]
pub struct CElementWithContentTemplate29;
#[must_use]
pub struct CElementWithContentTemplate30;
#[must_use]
pub struct CElementWithContentTemplate31;
#[must_use]
pub struct CElementWithContentTemplate32;
#[must_use]
pub struct CElementWithContentTemplate33;
#[must_use]
pub struct CElementWithContentTemplate34;
#[must_use]
pub struct CElementWithContentTemplate35;
#[must_use]
pub struct CElementWithContentTemplate36;
#[must_use]
pub struct CElementWithContentTemplate37;
#[must_use]
pub struct CElementWithContentTemplate38;
#[must_use]
pub struct CElementWithContentTemplate39;
#[must_use]
pub struct CElementWithContentTemplate40;
#[must_use]
pub struct CElementWithContentTemplate41;
#[must_use]
pub struct CElementWithContentTemplate42;
#[must_use]
pub struct CElementWithContentTemplate43;
#[must_use]
pub struct CElementWithContentTemplate44;
#[must_use]
pub struct CElementWithContentTemplate45;
#[must_use]
pub struct CElementWithContentTemplate46;
#[must_use]
pub struct CElementWithContentTemplate47;
#[must_use]
pub struct CElementWithContentTemplate48;
#[must_use]
pub struct CElementWithContentTemplate49;
#[must_use]
pub struct CElementWithContentTemplate50;
#[must_use]
pub struct CElementWithContentTemplate51;
#[must_use]
pub struct CElementWithContentTemplate52;
#[must_use]
pub struct CElementWithContentTemplate53;
#[must_use]
pub struct CElementWithContentTemplate54;
#[must_use]
pub struct CElementWithContentTemplate55;
#[must_use]
pub struct CElementWithContentTemplate56;
#[must_use]
pub struct CElementWithContentTemplate57;
#[must_use]
pub struct CElementWithContentTemplate58;
#[must_use]
pub struct CElementWithContentTemplate59;
#[must_use]
pub struct CElementWithContentTemplate60;
#[must_use]
pub struct CElementWithContentTemplate61;
#[must_use]
pub struct CElementWithContentTemplate62;
#[must_use]
pub struct CElementWithContentTemplate63;
#[must_use]
pub struct CElementWithContentTemplate64;
#[must_use]
pub struct CElementWithContentTemplate65;
#[must_use]
pub struct CElementWithContentTemplate66;
#[must_use]
pub struct CElementWithContentTemplate67;
#[must_use]
pub struct CElementWithContentTemplate68;
#[must_use]
pub struct CElementWithContentTemplate69;
#[must_use]
pub struct CElementWithContentTemplate70;
#[must_use]
pub struct CElementWithContentTemplate71;
#[must_use]
pub struct CElementWithContentTemplate72;
#[must_use]
pub struct CElementWithContentTemplate73;
#[must_use]
pub struct CElementWithContentTemplate74;
#[must_use]
pub struct CElementWithContentTemplate75;
#[must_use]
pub struct CElementWithContentTemplate76;
#[must_use]
pub struct CElementWithContentTemplate77;
#[must_use]
pub struct CElementWithContentTemplate78;
#[must_use]
pub struct CElementWithContentTemplate79;
#[must_use]
pub struct CElementWithContentTemplate80;
#[must_use]
pub struct CElementWithContentTemplate81;
#[must_use]
pub struct CElementWithContentTemplate82;
#[must_use]
pub struct CElementWithContentTemplate83;
#[must_use]
pub struct CElementWithContentTemplate84;
#[must_use]
pub struct CElementWithContentTemplate85;
#[must_use]
pub struct CElementWithContentTemplate86;
#[must_use]
pub struct CElementWithContentTemplate87;
#[must_use]
pub struct CElementWithContentTemplate88;
#[must_use]
pub struct CElementWithContentTemplate89;
#[must_use]
pub struct CElementWithContentTemplate90;
#[must_use]
pub struct CElementWithContentTemplate91;
impl<Partial, After> Template<CElementWithContentTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CElementWithContentTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CElementWithContentTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CElementWithContentTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn c_element_with_content()
    ->
        (Template<CElementWithContentTemplate3, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<CElementWithContentTemplate3, (),
            ()> {
            r#type: CElementWithContentTemplate3,
            partial: (),
            after: (),
        }, async gen {})
}
const _c_element_with_content_FORCE_RECOMPILE: &'static str = "<h1>hi</h1>";
#[must_use]
pub struct CEmptyElementTemplate0;
#[must_use]
pub struct CEmptyElementTemplate1;
#[must_use]
pub struct CEmptyElementTemplate2;
#[must_use]
pub struct CEmptyElementTemplate3;
#[must_use]
pub struct CEmptyElementTemplate4;
#[must_use]
pub struct CEmptyElementTemplate5;
#[must_use]
pub struct CEmptyElementTemplate6;
#[must_use]
pub struct CEmptyElementTemplate7;
#[must_use]
pub struct CEmptyElementTemplate8;
#[must_use]
pub struct CEmptyElementTemplate9;
#[must_use]
pub struct CEmptyElementTemplate10;
#[must_use]
pub struct CEmptyElementTemplate11;
#[must_use]
pub struct CEmptyElementTemplate12;
#[must_use]
pub struct CEmptyElementTemplate13;
#[must_use]
pub struct CEmptyElementTemplate14;
#[must_use]
pub struct CEmptyElementTemplate15;
#[must_use]
pub struct CEmptyElementTemplate16;
#[must_use]
pub struct CEmptyElementTemplate17;
#[must_use]
pub struct CEmptyElementTemplate18;
#[must_use]
pub struct CEmptyElementTemplate19;
#[must_use]
pub struct CEmptyElementTemplate20;
#[must_use]
pub struct CEmptyElementTemplate21;
#[must_use]
pub struct CEmptyElementTemplate22;
#[must_use]
pub struct CEmptyElementTemplate23;
#[must_use]
pub struct CEmptyElementTemplate24;
#[must_use]
pub struct CEmptyElementTemplate25;
#[must_use]
pub struct CEmptyElementTemplate26;
#[must_use]
pub struct CEmptyElementTemplate27;
#[must_use]
pub struct CEmptyElementTemplate28;
#[must_use]
pub struct CEmptyElementTemplate29;
#[must_use]
pub struct CEmptyElementTemplate30;
#[must_use]
pub struct CEmptyElementTemplate31;
#[must_use]
pub struct CEmptyElementTemplate32;
#[must_use]
pub struct CEmptyElementTemplate33;
#[must_use]
pub struct CEmptyElementTemplate34;
#[must_use]
pub struct CEmptyElementTemplate35;
#[must_use]
pub struct CEmptyElementTemplate36;
#[must_use]
pub struct CEmptyElementTemplate37;
#[must_use]
pub struct CEmptyElementTemplate38;
#[must_use]
pub struct CEmptyElementTemplate39;
#[must_use]
pub struct CEmptyElementTemplate40;
#[must_use]
pub struct CEmptyElementTemplate41;
#[must_use]
pub struct CEmptyElementTemplate42;
#[must_use]
pub struct CEmptyElementTemplate43;
#[must_use]
pub struct CEmptyElementTemplate44;
#[must_use]
pub struct CEmptyElementTemplate45;
#[must_use]
pub struct CEmptyElementTemplate46;
#[must_use]
pub struct CEmptyElementTemplate47;
#[must_use]
pub struct CEmptyElementTemplate48;
#[must_use]
pub struct CEmptyElementTemplate49;
#[must_use]
pub struct CEmptyElementTemplate50;
#[must_use]
pub struct CEmptyElementTemplate51;
#[must_use]
pub struct CEmptyElementTemplate52;
#[must_use]
pub struct CEmptyElementTemplate53;
#[must_use]
pub struct CEmptyElementTemplate54;
#[must_use]
pub struct CEmptyElementTemplate55;
#[must_use]
pub struct CEmptyElementTemplate56;
#[must_use]
pub struct CEmptyElementTemplate57;
#[must_use]
pub struct CEmptyElementTemplate58;
#[must_use]
pub struct CEmptyElementTemplate59;
#[must_use]
pub struct CEmptyElementTemplate60;
#[must_use]
pub struct CEmptyElementTemplate61;
#[must_use]
pub struct CEmptyElementTemplate62;
#[must_use]
pub struct CEmptyElementTemplate63;
#[must_use]
pub struct CEmptyElementTemplate64;
#[must_use]
pub struct CEmptyElementTemplate65;
#[must_use]
pub struct CEmptyElementTemplate66;
#[must_use]
pub struct CEmptyElementTemplate67;
#[must_use]
pub struct CEmptyElementTemplate68;
#[must_use]
pub struct CEmptyElementTemplate69;
#[must_use]
pub struct CEmptyElementTemplate70;
#[must_use]
pub struct CEmptyElementTemplate71;
#[must_use]
pub struct CEmptyElementTemplate72;
#[must_use]
pub struct CEmptyElementTemplate73;
#[must_use]
pub struct CEmptyElementTemplate74;
#[must_use]
pub struct CEmptyElementTemplate75;
#[must_use]
pub struct CEmptyElementTemplate76;
#[must_use]
pub struct CEmptyElementTemplate77;
#[must_use]
pub struct CEmptyElementTemplate78;
#[must_use]
pub struct CEmptyElementTemplate79;
#[must_use]
pub struct CEmptyElementTemplate80;
#[must_use]
pub struct CEmptyElementTemplate81;
#[must_use]
pub struct CEmptyElementTemplate82;
#[must_use]
pub struct CEmptyElementTemplate83;
#[must_use]
pub struct CEmptyElementTemplate84;
#[must_use]
pub struct CEmptyElementTemplate85;
#[must_use]
pub struct CEmptyElementTemplate86;
#[must_use]
pub struct CEmptyElementTemplate87;
#[must_use]
pub struct CEmptyElementTemplate88;
#[must_use]
pub struct CEmptyElementTemplate89;
#[must_use]
pub struct CEmptyElementTemplate90;
#[must_use]
pub struct CEmptyElementTemplate91;
impl<Partial, After> Template<CEmptyElementTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CEmptyElementTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CEmptyElementTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CEmptyElementTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn c_empty_element()
    ->
        (Template<CEmptyElementTemplate4, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<CEmptyElementTemplate4, (),
            ()> { r#type: CEmptyElementTemplate4, partial: (), after: () },
        async gen {})
}
const _c_empty_element_FORCE_RECOMPILE: &'static str = "<h1></h1>";
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate0;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate1;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate2;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate3;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate4;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate5;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate6;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate7;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate8;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate9;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate10;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate11;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate12;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate13;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate14;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate15;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate16;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate17;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate18;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate19;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate20;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate21;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate22;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate23;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate24;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate25;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate26;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate27;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate28;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate29;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate30;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate31;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate32;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate33;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate34;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate35;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate36;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate37;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate38;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate39;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate40;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate41;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate42;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate43;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate44;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate45;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate46;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate47;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate48;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate49;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate50;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate51;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate52;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate53;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate54;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate55;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate56;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate57;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate58;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate59;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate60;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate61;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate62;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate63;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate64;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate65;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate66;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate67;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate68;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate69;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate70;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate71;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate72;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate73;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate74;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate75;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate76;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate77;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate78;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate79;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate80;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate81;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate82;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate83;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate84;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate85;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate86;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate87;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate88;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate89;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate90;
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate91;
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CSelfClosingBooleanAttrTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CSelfClosingBooleanAttrTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CSelfClosingBooleanAttrTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn c_self_closing_boolean_attr()
    ->
        (Template<CSelfClosingBooleanAttrTemplate5, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<CSelfClosingBooleanAttrTemplate5, (),
            ()> {
            r#type: CSelfClosingBooleanAttrTemplate5,
            partial: (),
            after: (),
        }, async gen {})
}
const _c_self_closing_boolean_attr_FORCE_RECOMPILE: &'static str =
    "<!DOCTYPE html>";
#[must_use]
pub struct CSelfClosingTemplate0;
#[must_use]
pub struct CSelfClosingTemplate1;
#[must_use]
pub struct CSelfClosingTemplate2;
#[must_use]
pub struct CSelfClosingTemplate3;
#[must_use]
pub struct CSelfClosingTemplate4;
#[must_use]
pub struct CSelfClosingTemplate5;
#[must_use]
pub struct CSelfClosingTemplate6;
#[must_use]
pub struct CSelfClosingTemplate7;
#[must_use]
pub struct CSelfClosingTemplate8;
#[must_use]
pub struct CSelfClosingTemplate9;
#[must_use]
pub struct CSelfClosingTemplate10;
#[must_use]
pub struct CSelfClosingTemplate11;
#[must_use]
pub struct CSelfClosingTemplate12;
#[must_use]
pub struct CSelfClosingTemplate13;
#[must_use]
pub struct CSelfClosingTemplate14;
#[must_use]
pub struct CSelfClosingTemplate15;
#[must_use]
pub struct CSelfClosingTemplate16;
#[must_use]
pub struct CSelfClosingTemplate17;
#[must_use]
pub struct CSelfClosingTemplate18;
#[must_use]
pub struct CSelfClosingTemplate19;
#[must_use]
pub struct CSelfClosingTemplate20;
#[must_use]
pub struct CSelfClosingTemplate21;
#[must_use]
pub struct CSelfClosingTemplate22;
#[must_use]
pub struct CSelfClosingTemplate23;
#[must_use]
pub struct CSelfClosingTemplate24;
#[must_use]
pub struct CSelfClosingTemplate25;
#[must_use]
pub struct CSelfClosingTemplate26;
#[must_use]
pub struct CSelfClosingTemplate27;
#[must_use]
pub struct CSelfClosingTemplate28;
#[must_use]
pub struct CSelfClosingTemplate29;
#[must_use]
pub struct CSelfClosingTemplate30;
#[must_use]
pub struct CSelfClosingTemplate31;
#[must_use]
pub struct CSelfClosingTemplate32;
#[must_use]
pub struct CSelfClosingTemplate33;
#[must_use]
pub struct CSelfClosingTemplate34;
#[must_use]
pub struct CSelfClosingTemplate35;
#[must_use]
pub struct CSelfClosingTemplate36;
#[must_use]
pub struct CSelfClosingTemplate37;
#[must_use]
pub struct CSelfClosingTemplate38;
#[must_use]
pub struct CSelfClosingTemplate39;
#[must_use]
pub struct CSelfClosingTemplate40;
#[must_use]
pub struct CSelfClosingTemplate41;
#[must_use]
pub struct CSelfClosingTemplate42;
#[must_use]
pub struct CSelfClosingTemplate43;
#[must_use]
pub struct CSelfClosingTemplate44;
#[must_use]
pub struct CSelfClosingTemplate45;
#[must_use]
pub struct CSelfClosingTemplate46;
#[must_use]
pub struct CSelfClosingTemplate47;
#[must_use]
pub struct CSelfClosingTemplate48;
#[must_use]
pub struct CSelfClosingTemplate49;
#[must_use]
pub struct CSelfClosingTemplate50;
#[must_use]
pub struct CSelfClosingTemplate51;
#[must_use]
pub struct CSelfClosingTemplate52;
#[must_use]
pub struct CSelfClosingTemplate53;
#[must_use]
pub struct CSelfClosingTemplate54;
#[must_use]
pub struct CSelfClosingTemplate55;
#[must_use]
pub struct CSelfClosingTemplate56;
#[must_use]
pub struct CSelfClosingTemplate57;
#[must_use]
pub struct CSelfClosingTemplate58;
#[must_use]
pub struct CSelfClosingTemplate59;
#[must_use]
pub struct CSelfClosingTemplate60;
#[must_use]
pub struct CSelfClosingTemplate61;
#[must_use]
pub struct CSelfClosingTemplate62;
#[must_use]
pub struct CSelfClosingTemplate63;
#[must_use]
pub struct CSelfClosingTemplate64;
#[must_use]
pub struct CSelfClosingTemplate65;
#[must_use]
pub struct CSelfClosingTemplate66;
#[must_use]
pub struct CSelfClosingTemplate67;
#[must_use]
pub struct CSelfClosingTemplate68;
#[must_use]
pub struct CSelfClosingTemplate69;
#[must_use]
pub struct CSelfClosingTemplate70;
#[must_use]
pub struct CSelfClosingTemplate71;
#[must_use]
pub struct CSelfClosingTemplate72;
#[must_use]
pub struct CSelfClosingTemplate73;
#[must_use]
pub struct CSelfClosingTemplate74;
#[must_use]
pub struct CSelfClosingTemplate75;
#[must_use]
pub struct CSelfClosingTemplate76;
#[must_use]
pub struct CSelfClosingTemplate77;
#[must_use]
pub struct CSelfClosingTemplate78;
#[must_use]
pub struct CSelfClosingTemplate79;
#[must_use]
pub struct CSelfClosingTemplate80;
#[must_use]
pub struct CSelfClosingTemplate81;
#[must_use]
pub struct CSelfClosingTemplate82;
#[must_use]
pub struct CSelfClosingTemplate83;
#[must_use]
pub struct CSelfClosingTemplate84;
#[must_use]
pub struct CSelfClosingTemplate85;
#[must_use]
pub struct CSelfClosingTemplate86;
#[must_use]
pub struct CSelfClosingTemplate87;
#[must_use]
pub struct CSelfClosingTemplate88;
#[must_use]
pub struct CSelfClosingTemplate89;
#[must_use]
pub struct CSelfClosingTemplate90;
#[must_use]
pub struct CSelfClosingTemplate91;
impl<Partial, After> Template<CSelfClosingTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CSelfClosingTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CSelfClosingTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<CSelfClosingTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn c_self_closing()
    ->
        (Template<CSelfClosingTemplate6, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<CSelfClosingTemplate6, (),
            ()> { r#type: CSelfClosingTemplate6, partial: (), after: () },
        async gen {})
}
const _c_self_closing_FORCE_RECOMPILE: &'static str = "<!DOCTYPE>";
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate0;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate1;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate2;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate3;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate4;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate5;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate6;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate7;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate8;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate9;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate10;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate11;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate12;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate13;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate14;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate15;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate16;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate17;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate18;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate19;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate20;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate21;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate22;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate23;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate24;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate25;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate26;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate27;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate28;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate29;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate30;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate31;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate32;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate33;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate34;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate35;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate36;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate37;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate38;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate39;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate40;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate41;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate42;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate43;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate44;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate45;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate46;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate47;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate48;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate49;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate50;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate51;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate52;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate53;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate54;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate55;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate56;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate57;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate58;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate59;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate60;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate61;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate62;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate63;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate64;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate65;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate66;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate67;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate68;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate69;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate70;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate71;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate72;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate73;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate74;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate75;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate76;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate77;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate78;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate79;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate80;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate81;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate82;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate83;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate84;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate85;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate86;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate87;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate88;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate89;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate90;
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate91;
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<DElementWithAttributeAndVariablesTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<DElementWithAttributeAndVariablesTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<DElementWithAttributeAndVariablesTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn d_element_with_attribute_and_variables()
    ->
        (Template<DElementWithAttributeAndVariablesTemplate7, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<DElementWithAttributeAndVariablesTemplate7, (),
            ()> {
            r#type: DElementWithAttributeAndVariablesTemplate7,
            partial: (),
            after: (),
        }, async gen {})
}
const _d_element_with_attribute_and_variables_FORCE_RECOMPILE: &'static str =
    "<a class=\"{{test}}\">{{var}}</a>";
#[must_use]
pub struct DVariableTemplate0;
#[must_use]
pub struct DVariableTemplate1;
#[must_use]
pub struct DVariableTemplate2;
#[must_use]
pub struct DVariableTemplate3;
#[must_use]
pub struct DVariableTemplate4;
#[must_use]
pub struct DVariableTemplate5;
#[must_use]
pub struct DVariableTemplate6;
#[must_use]
pub struct DVariableTemplate7;
#[must_use]
pub struct DVariableTemplate8;
#[must_use]
pub struct DVariableTemplate9;
#[must_use]
pub struct DVariableTemplate10;
#[must_use]
pub struct DVariableTemplate11;
#[must_use]
pub struct DVariableTemplate12;
#[must_use]
pub struct DVariableTemplate13;
#[must_use]
pub struct DVariableTemplate14;
#[must_use]
pub struct DVariableTemplate15;
#[must_use]
pub struct DVariableTemplate16;
#[must_use]
pub struct DVariableTemplate17;
#[must_use]
pub struct DVariableTemplate18;
#[must_use]
pub struct DVariableTemplate19;
#[must_use]
pub struct DVariableTemplate20;
#[must_use]
pub struct DVariableTemplate21;
#[must_use]
pub struct DVariableTemplate22;
#[must_use]
pub struct DVariableTemplate23;
#[must_use]
pub struct DVariableTemplate24;
#[must_use]
pub struct DVariableTemplate25;
#[must_use]
pub struct DVariableTemplate26;
#[must_use]
pub struct DVariableTemplate27;
#[must_use]
pub struct DVariableTemplate28;
#[must_use]
pub struct DVariableTemplate29;
#[must_use]
pub struct DVariableTemplate30;
#[must_use]
pub struct DVariableTemplate31;
#[must_use]
pub struct DVariableTemplate32;
#[must_use]
pub struct DVariableTemplate33;
#[must_use]
pub struct DVariableTemplate34;
#[must_use]
pub struct DVariableTemplate35;
#[must_use]
pub struct DVariableTemplate36;
#[must_use]
pub struct DVariableTemplate37;
#[must_use]
pub struct DVariableTemplate38;
#[must_use]
pub struct DVariableTemplate39;
#[must_use]
pub struct DVariableTemplate40;
#[must_use]
pub struct DVariableTemplate41;
#[must_use]
pub struct DVariableTemplate42;
#[must_use]
pub struct DVariableTemplate43;
#[must_use]
pub struct DVariableTemplate44;
#[must_use]
pub struct DVariableTemplate45;
#[must_use]
pub struct DVariableTemplate46;
#[must_use]
pub struct DVariableTemplate47;
#[must_use]
pub struct DVariableTemplate48;
#[must_use]
pub struct DVariableTemplate49;
#[must_use]
pub struct DVariableTemplate50;
#[must_use]
pub struct DVariableTemplate51;
#[must_use]
pub struct DVariableTemplate52;
#[must_use]
pub struct DVariableTemplate53;
#[must_use]
pub struct DVariableTemplate54;
#[must_use]
pub struct DVariableTemplate55;
#[must_use]
pub struct DVariableTemplate56;
#[must_use]
pub struct DVariableTemplate57;
#[must_use]
pub struct DVariableTemplate58;
#[must_use]
pub struct DVariableTemplate59;
#[must_use]
pub struct DVariableTemplate60;
#[must_use]
pub struct DVariableTemplate61;
#[must_use]
pub struct DVariableTemplate62;
#[must_use]
pub struct DVariableTemplate63;
#[must_use]
pub struct DVariableTemplate64;
#[must_use]
pub struct DVariableTemplate65;
#[must_use]
pub struct DVariableTemplate66;
#[must_use]
pub struct DVariableTemplate67;
#[must_use]
pub struct DVariableTemplate68;
#[must_use]
pub struct DVariableTemplate69;
#[must_use]
pub struct DVariableTemplate70;
#[must_use]
pub struct DVariableTemplate71;
#[must_use]
pub struct DVariableTemplate72;
#[must_use]
pub struct DVariableTemplate73;
#[must_use]
pub struct DVariableTemplate74;
#[must_use]
pub struct DVariableTemplate75;
#[must_use]
pub struct DVariableTemplate76;
#[must_use]
pub struct DVariableTemplate77;
#[must_use]
pub struct DVariableTemplate78;
#[must_use]
pub struct DVariableTemplate79;
#[must_use]
pub struct DVariableTemplate80;
#[must_use]
pub struct DVariableTemplate81;
#[must_use]
pub struct DVariableTemplate82;
#[must_use]
pub struct DVariableTemplate83;
#[must_use]
pub struct DVariableTemplate84;
#[must_use]
pub struct DVariableTemplate85;
#[must_use]
pub struct DVariableTemplate86;
#[must_use]
pub struct DVariableTemplate87;
#[must_use]
pub struct DVariableTemplate88;
#[must_use]
pub struct DVariableTemplate89;
#[must_use]
pub struct DVariableTemplate90;
#[must_use]
pub struct DVariableTemplate91;
impl<Partial, After> Template<DVariableTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<DVariableTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<DVariableTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<DVariableTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<DVariableTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<DVariableTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<DVariableTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<DVariableTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<DVariableTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<DVariableTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<DVariableTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<DVariableTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<DVariableTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn d_variable()
    ->
        (Template<DVariableTemplate8, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<DVariableTemplate8, (),
            ()> { r#type: DVariableTemplate8, partial: (), after: () },
        async gen {})
}
const _d_variable_FORCE_RECOMPILE: &'static str = "<p>{{test}}</p>";
#[must_use]
pub struct EIfElseEmptyFalseTemplate0;
#[must_use]
pub struct EIfElseEmptyFalseTemplate1;
#[must_use]
pub struct EIfElseEmptyFalseTemplate2;
#[must_use]
pub struct EIfElseEmptyFalseTemplate3;
#[must_use]
pub struct EIfElseEmptyFalseTemplate4;
#[must_use]
pub struct EIfElseEmptyFalseTemplate5;
#[must_use]
pub struct EIfElseEmptyFalseTemplate6;
#[must_use]
pub struct EIfElseEmptyFalseTemplate7;
#[must_use]
pub struct EIfElseEmptyFalseTemplate8;
#[must_use]
pub struct EIfElseEmptyFalseTemplate9;
#[must_use]
pub struct EIfElseEmptyFalseTemplate10;
#[must_use]
pub struct EIfElseEmptyFalseTemplate11;
#[must_use]
pub struct EIfElseEmptyFalseTemplate12;
#[must_use]
pub struct EIfElseEmptyFalseTemplate13;
#[must_use]
pub struct EIfElseEmptyFalseTemplate14;
#[must_use]
pub struct EIfElseEmptyFalseTemplate15;
#[must_use]
pub struct EIfElseEmptyFalseTemplate16;
#[must_use]
pub struct EIfElseEmptyFalseTemplate17;
#[must_use]
pub struct EIfElseEmptyFalseTemplate18;
#[must_use]
pub struct EIfElseEmptyFalseTemplate19;
#[must_use]
pub struct EIfElseEmptyFalseTemplate20;
#[must_use]
pub struct EIfElseEmptyFalseTemplate21;
#[must_use]
pub struct EIfElseEmptyFalseTemplate22;
#[must_use]
pub struct EIfElseEmptyFalseTemplate23;
#[must_use]
pub struct EIfElseEmptyFalseTemplate24;
#[must_use]
pub struct EIfElseEmptyFalseTemplate25;
#[must_use]
pub struct EIfElseEmptyFalseTemplate26;
#[must_use]
pub struct EIfElseEmptyFalseTemplate27;
#[must_use]
pub struct EIfElseEmptyFalseTemplate28;
#[must_use]
pub struct EIfElseEmptyFalseTemplate29;
#[must_use]
pub struct EIfElseEmptyFalseTemplate30;
#[must_use]
pub struct EIfElseEmptyFalseTemplate31;
#[must_use]
pub struct EIfElseEmptyFalseTemplate32;
#[must_use]
pub struct EIfElseEmptyFalseTemplate33;
#[must_use]
pub struct EIfElseEmptyFalseTemplate34;
#[must_use]
pub struct EIfElseEmptyFalseTemplate35;
#[must_use]
pub struct EIfElseEmptyFalseTemplate36;
#[must_use]
pub struct EIfElseEmptyFalseTemplate37;
#[must_use]
pub struct EIfElseEmptyFalseTemplate38;
#[must_use]
pub struct EIfElseEmptyFalseTemplate39;
#[must_use]
pub struct EIfElseEmptyFalseTemplate40;
#[must_use]
pub struct EIfElseEmptyFalseTemplate41;
#[must_use]
pub struct EIfElseEmptyFalseTemplate42;
#[must_use]
pub struct EIfElseEmptyFalseTemplate43;
#[must_use]
pub struct EIfElseEmptyFalseTemplate44;
#[must_use]
pub struct EIfElseEmptyFalseTemplate45;
#[must_use]
pub struct EIfElseEmptyFalseTemplate46;
#[must_use]
pub struct EIfElseEmptyFalseTemplate47;
#[must_use]
pub struct EIfElseEmptyFalseTemplate48;
#[must_use]
pub struct EIfElseEmptyFalseTemplate49;
#[must_use]
pub struct EIfElseEmptyFalseTemplate50;
#[must_use]
pub struct EIfElseEmptyFalseTemplate51;
#[must_use]
pub struct EIfElseEmptyFalseTemplate52;
#[must_use]
pub struct EIfElseEmptyFalseTemplate53;
#[must_use]
pub struct EIfElseEmptyFalseTemplate54;
#[must_use]
pub struct EIfElseEmptyFalseTemplate55;
#[must_use]
pub struct EIfElseEmptyFalseTemplate56;
#[must_use]
pub struct EIfElseEmptyFalseTemplate57;
#[must_use]
pub struct EIfElseEmptyFalseTemplate58;
#[must_use]
pub struct EIfElseEmptyFalseTemplate59;
#[must_use]
pub struct EIfElseEmptyFalseTemplate60;
#[must_use]
pub struct EIfElseEmptyFalseTemplate61;
#[must_use]
pub struct EIfElseEmptyFalseTemplate62;
#[must_use]
pub struct EIfElseEmptyFalseTemplate63;
#[must_use]
pub struct EIfElseEmptyFalseTemplate64;
#[must_use]
pub struct EIfElseEmptyFalseTemplate65;
#[must_use]
pub struct EIfElseEmptyFalseTemplate66;
#[must_use]
pub struct EIfElseEmptyFalseTemplate67;
#[must_use]
pub struct EIfElseEmptyFalseTemplate68;
#[must_use]
pub struct EIfElseEmptyFalseTemplate69;
#[must_use]
pub struct EIfElseEmptyFalseTemplate70;
#[must_use]
pub struct EIfElseEmptyFalseTemplate71;
#[must_use]
pub struct EIfElseEmptyFalseTemplate72;
#[must_use]
pub struct EIfElseEmptyFalseTemplate73;
#[must_use]
pub struct EIfElseEmptyFalseTemplate74;
#[must_use]
pub struct EIfElseEmptyFalseTemplate75;
#[must_use]
pub struct EIfElseEmptyFalseTemplate76;
#[must_use]
pub struct EIfElseEmptyFalseTemplate77;
#[must_use]
pub struct EIfElseEmptyFalseTemplate78;
#[must_use]
pub struct EIfElseEmptyFalseTemplate79;
#[must_use]
pub struct EIfElseEmptyFalseTemplate80;
#[must_use]
pub struct EIfElseEmptyFalseTemplate81;
#[must_use]
pub struct EIfElseEmptyFalseTemplate82;
#[must_use]
pub struct EIfElseEmptyFalseTemplate83;
#[must_use]
pub struct EIfElseEmptyFalseTemplate84;
#[must_use]
pub struct EIfElseEmptyFalseTemplate85;
#[must_use]
pub struct EIfElseEmptyFalseTemplate86;
#[must_use]
pub struct EIfElseEmptyFalseTemplate87;
#[must_use]
pub struct EIfElseEmptyFalseTemplate88;
#[must_use]
pub struct EIfElseEmptyFalseTemplate89;
#[must_use]
pub struct EIfElseEmptyFalseTemplate90;
#[must_use]
pub struct EIfElseEmptyFalseTemplate91;
impl<Partial, After> Template<EIfElseEmptyFalseTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyFalseTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyFalseTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyFalseTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn e_if_else_empty_false()
    ->
        (Template<EIfElseEmptyFalseTemplate9, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<EIfElseEmptyFalseTemplate9, (),
            ()> {
            r#type: EIfElseEmptyFalseTemplate9,
            partial: (),
            after: (),
        }, async gen {})
}
const _e_if_else_empty_false_FORCE_RECOMPILE: &'static str =
    "{{#if author}}true{{else}}{{/if}}";
#[must_use]
pub struct EIfElseEmptyTrueTemplate0;
#[must_use]
pub struct EIfElseEmptyTrueTemplate1;
#[must_use]
pub struct EIfElseEmptyTrueTemplate2;
#[must_use]
pub struct EIfElseEmptyTrueTemplate3;
#[must_use]
pub struct EIfElseEmptyTrueTemplate4;
#[must_use]
pub struct EIfElseEmptyTrueTemplate5;
#[must_use]
pub struct EIfElseEmptyTrueTemplate6;
#[must_use]
pub struct EIfElseEmptyTrueTemplate7;
#[must_use]
pub struct EIfElseEmptyTrueTemplate8;
#[must_use]
pub struct EIfElseEmptyTrueTemplate9;
#[must_use]
pub struct EIfElseEmptyTrueTemplate10;
#[must_use]
pub struct EIfElseEmptyTrueTemplate11;
#[must_use]
pub struct EIfElseEmptyTrueTemplate12;
#[must_use]
pub struct EIfElseEmptyTrueTemplate13;
#[must_use]
pub struct EIfElseEmptyTrueTemplate14;
#[must_use]
pub struct EIfElseEmptyTrueTemplate15;
#[must_use]
pub struct EIfElseEmptyTrueTemplate16;
#[must_use]
pub struct EIfElseEmptyTrueTemplate17;
#[must_use]
pub struct EIfElseEmptyTrueTemplate18;
#[must_use]
pub struct EIfElseEmptyTrueTemplate19;
#[must_use]
pub struct EIfElseEmptyTrueTemplate20;
#[must_use]
pub struct EIfElseEmptyTrueTemplate21;
#[must_use]
pub struct EIfElseEmptyTrueTemplate22;
#[must_use]
pub struct EIfElseEmptyTrueTemplate23;
#[must_use]
pub struct EIfElseEmptyTrueTemplate24;
#[must_use]
pub struct EIfElseEmptyTrueTemplate25;
#[must_use]
pub struct EIfElseEmptyTrueTemplate26;
#[must_use]
pub struct EIfElseEmptyTrueTemplate27;
#[must_use]
pub struct EIfElseEmptyTrueTemplate28;
#[must_use]
pub struct EIfElseEmptyTrueTemplate29;
#[must_use]
pub struct EIfElseEmptyTrueTemplate30;
#[must_use]
pub struct EIfElseEmptyTrueTemplate31;
#[must_use]
pub struct EIfElseEmptyTrueTemplate32;
#[must_use]
pub struct EIfElseEmptyTrueTemplate33;
#[must_use]
pub struct EIfElseEmptyTrueTemplate34;
#[must_use]
pub struct EIfElseEmptyTrueTemplate35;
#[must_use]
pub struct EIfElseEmptyTrueTemplate36;
#[must_use]
pub struct EIfElseEmptyTrueTemplate37;
#[must_use]
pub struct EIfElseEmptyTrueTemplate38;
#[must_use]
pub struct EIfElseEmptyTrueTemplate39;
#[must_use]
pub struct EIfElseEmptyTrueTemplate40;
#[must_use]
pub struct EIfElseEmptyTrueTemplate41;
#[must_use]
pub struct EIfElseEmptyTrueTemplate42;
#[must_use]
pub struct EIfElseEmptyTrueTemplate43;
#[must_use]
pub struct EIfElseEmptyTrueTemplate44;
#[must_use]
pub struct EIfElseEmptyTrueTemplate45;
#[must_use]
pub struct EIfElseEmptyTrueTemplate46;
#[must_use]
pub struct EIfElseEmptyTrueTemplate47;
#[must_use]
pub struct EIfElseEmptyTrueTemplate48;
#[must_use]
pub struct EIfElseEmptyTrueTemplate49;
#[must_use]
pub struct EIfElseEmptyTrueTemplate50;
#[must_use]
pub struct EIfElseEmptyTrueTemplate51;
#[must_use]
pub struct EIfElseEmptyTrueTemplate52;
#[must_use]
pub struct EIfElseEmptyTrueTemplate53;
#[must_use]
pub struct EIfElseEmptyTrueTemplate54;
#[must_use]
pub struct EIfElseEmptyTrueTemplate55;
#[must_use]
pub struct EIfElseEmptyTrueTemplate56;
#[must_use]
pub struct EIfElseEmptyTrueTemplate57;
#[must_use]
pub struct EIfElseEmptyTrueTemplate58;
#[must_use]
pub struct EIfElseEmptyTrueTemplate59;
#[must_use]
pub struct EIfElseEmptyTrueTemplate60;
#[must_use]
pub struct EIfElseEmptyTrueTemplate61;
#[must_use]
pub struct EIfElseEmptyTrueTemplate62;
#[must_use]
pub struct EIfElseEmptyTrueTemplate63;
#[must_use]
pub struct EIfElseEmptyTrueTemplate64;
#[must_use]
pub struct EIfElseEmptyTrueTemplate65;
#[must_use]
pub struct EIfElseEmptyTrueTemplate66;
#[must_use]
pub struct EIfElseEmptyTrueTemplate67;
#[must_use]
pub struct EIfElseEmptyTrueTemplate68;
#[must_use]
pub struct EIfElseEmptyTrueTemplate69;
#[must_use]
pub struct EIfElseEmptyTrueTemplate70;
#[must_use]
pub struct EIfElseEmptyTrueTemplate71;
#[must_use]
pub struct EIfElseEmptyTrueTemplate72;
#[must_use]
pub struct EIfElseEmptyTrueTemplate73;
#[must_use]
pub struct EIfElseEmptyTrueTemplate74;
#[must_use]
pub struct EIfElseEmptyTrueTemplate75;
#[must_use]
pub struct EIfElseEmptyTrueTemplate76;
#[must_use]
pub struct EIfElseEmptyTrueTemplate77;
#[must_use]
pub struct EIfElseEmptyTrueTemplate78;
#[must_use]
pub struct EIfElseEmptyTrueTemplate79;
#[must_use]
pub struct EIfElseEmptyTrueTemplate80;
#[must_use]
pub struct EIfElseEmptyTrueTemplate81;
#[must_use]
pub struct EIfElseEmptyTrueTemplate82;
#[must_use]
pub struct EIfElseEmptyTrueTemplate83;
#[must_use]
pub struct EIfElseEmptyTrueTemplate84;
#[must_use]
pub struct EIfElseEmptyTrueTemplate85;
#[must_use]
pub struct EIfElseEmptyTrueTemplate86;
#[must_use]
pub struct EIfElseEmptyTrueTemplate87;
#[must_use]
pub struct EIfElseEmptyTrueTemplate88;
#[must_use]
pub struct EIfElseEmptyTrueTemplate89;
#[must_use]
pub struct EIfElseEmptyTrueTemplate90;
#[must_use]
pub struct EIfElseEmptyTrueTemplate91;
impl<Partial, After> Template<EIfElseEmptyTrueTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyTrueTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyTrueTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyTrueTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn e_if_else_empty_true()
    ->
        (Template<EIfElseEmptyTrueTemplate10, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<EIfElseEmptyTrueTemplate10, (),
            ()> {
            r#type: EIfElseEmptyTrueTemplate10,
            partial: (),
            after: (),
        }, async gen {})
}
const _e_if_else_empty_true_FORCE_RECOMPILE: &'static str =
    "{{#if author}}{{else}}false{{/if}}";
#[must_use]
pub struct EIfElseEmptyTemplate0;
#[must_use]
pub struct EIfElseEmptyTemplate1;
#[must_use]
pub struct EIfElseEmptyTemplate2;
#[must_use]
pub struct EIfElseEmptyTemplate3;
#[must_use]
pub struct EIfElseEmptyTemplate4;
#[must_use]
pub struct EIfElseEmptyTemplate5;
#[must_use]
pub struct EIfElseEmptyTemplate6;
#[must_use]
pub struct EIfElseEmptyTemplate7;
#[must_use]
pub struct EIfElseEmptyTemplate8;
#[must_use]
pub struct EIfElseEmptyTemplate9;
#[must_use]
pub struct EIfElseEmptyTemplate10;
#[must_use]
pub struct EIfElseEmptyTemplate11;
#[must_use]
pub struct EIfElseEmptyTemplate12;
#[must_use]
pub struct EIfElseEmptyTemplate13;
#[must_use]
pub struct EIfElseEmptyTemplate14;
#[must_use]
pub struct EIfElseEmptyTemplate15;
#[must_use]
pub struct EIfElseEmptyTemplate16;
#[must_use]
pub struct EIfElseEmptyTemplate17;
#[must_use]
pub struct EIfElseEmptyTemplate18;
#[must_use]
pub struct EIfElseEmptyTemplate19;
#[must_use]
pub struct EIfElseEmptyTemplate20;
#[must_use]
pub struct EIfElseEmptyTemplate21;
#[must_use]
pub struct EIfElseEmptyTemplate22;
#[must_use]
pub struct EIfElseEmptyTemplate23;
#[must_use]
pub struct EIfElseEmptyTemplate24;
#[must_use]
pub struct EIfElseEmptyTemplate25;
#[must_use]
pub struct EIfElseEmptyTemplate26;
#[must_use]
pub struct EIfElseEmptyTemplate27;
#[must_use]
pub struct EIfElseEmptyTemplate28;
#[must_use]
pub struct EIfElseEmptyTemplate29;
#[must_use]
pub struct EIfElseEmptyTemplate30;
#[must_use]
pub struct EIfElseEmptyTemplate31;
#[must_use]
pub struct EIfElseEmptyTemplate32;
#[must_use]
pub struct EIfElseEmptyTemplate33;
#[must_use]
pub struct EIfElseEmptyTemplate34;
#[must_use]
pub struct EIfElseEmptyTemplate35;
#[must_use]
pub struct EIfElseEmptyTemplate36;
#[must_use]
pub struct EIfElseEmptyTemplate37;
#[must_use]
pub struct EIfElseEmptyTemplate38;
#[must_use]
pub struct EIfElseEmptyTemplate39;
#[must_use]
pub struct EIfElseEmptyTemplate40;
#[must_use]
pub struct EIfElseEmptyTemplate41;
#[must_use]
pub struct EIfElseEmptyTemplate42;
#[must_use]
pub struct EIfElseEmptyTemplate43;
#[must_use]
pub struct EIfElseEmptyTemplate44;
#[must_use]
pub struct EIfElseEmptyTemplate45;
#[must_use]
pub struct EIfElseEmptyTemplate46;
#[must_use]
pub struct EIfElseEmptyTemplate47;
#[must_use]
pub struct EIfElseEmptyTemplate48;
#[must_use]
pub struct EIfElseEmptyTemplate49;
#[must_use]
pub struct EIfElseEmptyTemplate50;
#[must_use]
pub struct EIfElseEmptyTemplate51;
#[must_use]
pub struct EIfElseEmptyTemplate52;
#[must_use]
pub struct EIfElseEmptyTemplate53;
#[must_use]
pub struct EIfElseEmptyTemplate54;
#[must_use]
pub struct EIfElseEmptyTemplate55;
#[must_use]
pub struct EIfElseEmptyTemplate56;
#[must_use]
pub struct EIfElseEmptyTemplate57;
#[must_use]
pub struct EIfElseEmptyTemplate58;
#[must_use]
pub struct EIfElseEmptyTemplate59;
#[must_use]
pub struct EIfElseEmptyTemplate60;
#[must_use]
pub struct EIfElseEmptyTemplate61;
#[must_use]
pub struct EIfElseEmptyTemplate62;
#[must_use]
pub struct EIfElseEmptyTemplate63;
#[must_use]
pub struct EIfElseEmptyTemplate64;
#[must_use]
pub struct EIfElseEmptyTemplate65;
#[must_use]
pub struct EIfElseEmptyTemplate66;
#[must_use]
pub struct EIfElseEmptyTemplate67;
#[must_use]
pub struct EIfElseEmptyTemplate68;
#[must_use]
pub struct EIfElseEmptyTemplate69;
#[must_use]
pub struct EIfElseEmptyTemplate70;
#[must_use]
pub struct EIfElseEmptyTemplate71;
#[must_use]
pub struct EIfElseEmptyTemplate72;
#[must_use]
pub struct EIfElseEmptyTemplate73;
#[must_use]
pub struct EIfElseEmptyTemplate74;
#[must_use]
pub struct EIfElseEmptyTemplate75;
#[must_use]
pub struct EIfElseEmptyTemplate76;
#[must_use]
pub struct EIfElseEmptyTemplate77;
#[must_use]
pub struct EIfElseEmptyTemplate78;
#[must_use]
pub struct EIfElseEmptyTemplate79;
#[must_use]
pub struct EIfElseEmptyTemplate80;
#[must_use]
pub struct EIfElseEmptyTemplate81;
#[must_use]
pub struct EIfElseEmptyTemplate82;
#[must_use]
pub struct EIfElseEmptyTemplate83;
#[must_use]
pub struct EIfElseEmptyTemplate84;
#[must_use]
pub struct EIfElseEmptyTemplate85;
#[must_use]
pub struct EIfElseEmptyTemplate86;
#[must_use]
pub struct EIfElseEmptyTemplate87;
#[must_use]
pub struct EIfElseEmptyTemplate88;
#[must_use]
pub struct EIfElseEmptyTemplate89;
#[must_use]
pub struct EIfElseEmptyTemplate90;
#[must_use]
pub struct EIfElseEmptyTemplate91;
impl<Partial, After> Template<EIfElseEmptyTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn e_if_else_empty()
    ->
        (Template<EIfElseEmptyTemplate11, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<EIfElseEmptyTemplate11, (),
            ()> { r#type: EIfElseEmptyTemplate11, partial: (), after: () },
        async gen {})
}
const _e_if_else_empty_FORCE_RECOMPILE: &'static str =
    "{{#if author}}{{else}}{{/if}}";
#[must_use]
pub struct EIfElseWithVariablesTemplate0;
#[must_use]
pub struct EIfElseWithVariablesTemplate1;
#[must_use]
pub struct EIfElseWithVariablesTemplate2;
#[must_use]
pub struct EIfElseWithVariablesTemplate3;
#[must_use]
pub struct EIfElseWithVariablesTemplate4;
#[must_use]
pub struct EIfElseWithVariablesTemplate5;
#[must_use]
pub struct EIfElseWithVariablesTemplate6;
#[must_use]
pub struct EIfElseWithVariablesTemplate7;
#[must_use]
pub struct EIfElseWithVariablesTemplate8;
#[must_use]
pub struct EIfElseWithVariablesTemplate9;
#[must_use]
pub struct EIfElseWithVariablesTemplate10;
#[must_use]
pub struct EIfElseWithVariablesTemplate11;
#[must_use]
pub struct EIfElseWithVariablesTemplate12;
#[must_use]
pub struct EIfElseWithVariablesTemplate13;
#[must_use]
pub struct EIfElseWithVariablesTemplate14;
#[must_use]
pub struct EIfElseWithVariablesTemplate15;
#[must_use]
pub struct EIfElseWithVariablesTemplate16;
#[must_use]
pub struct EIfElseWithVariablesTemplate17;
#[must_use]
pub struct EIfElseWithVariablesTemplate18;
#[must_use]
pub struct EIfElseWithVariablesTemplate19;
#[must_use]
pub struct EIfElseWithVariablesTemplate20;
#[must_use]
pub struct EIfElseWithVariablesTemplate21;
#[must_use]
pub struct EIfElseWithVariablesTemplate22;
#[must_use]
pub struct EIfElseWithVariablesTemplate23;
#[must_use]
pub struct EIfElseWithVariablesTemplate24;
#[must_use]
pub struct EIfElseWithVariablesTemplate25;
#[must_use]
pub struct EIfElseWithVariablesTemplate26;
#[must_use]
pub struct EIfElseWithVariablesTemplate27;
#[must_use]
pub struct EIfElseWithVariablesTemplate28;
#[must_use]
pub struct EIfElseWithVariablesTemplate29;
#[must_use]
pub struct EIfElseWithVariablesTemplate30;
#[must_use]
pub struct EIfElseWithVariablesTemplate31;
#[must_use]
pub struct EIfElseWithVariablesTemplate32;
#[must_use]
pub struct EIfElseWithVariablesTemplate33;
#[must_use]
pub struct EIfElseWithVariablesTemplate34;
#[must_use]
pub struct EIfElseWithVariablesTemplate35;
#[must_use]
pub struct EIfElseWithVariablesTemplate36;
#[must_use]
pub struct EIfElseWithVariablesTemplate37;
#[must_use]
pub struct EIfElseWithVariablesTemplate38;
#[must_use]
pub struct EIfElseWithVariablesTemplate39;
#[must_use]
pub struct EIfElseWithVariablesTemplate40;
#[must_use]
pub struct EIfElseWithVariablesTemplate41;
#[must_use]
pub struct EIfElseWithVariablesTemplate42;
#[must_use]
pub struct EIfElseWithVariablesTemplate43;
#[must_use]
pub struct EIfElseWithVariablesTemplate44;
#[must_use]
pub struct EIfElseWithVariablesTemplate45;
#[must_use]
pub struct EIfElseWithVariablesTemplate46;
#[must_use]
pub struct EIfElseWithVariablesTemplate47;
#[must_use]
pub struct EIfElseWithVariablesTemplate48;
#[must_use]
pub struct EIfElseWithVariablesTemplate49;
#[must_use]
pub struct EIfElseWithVariablesTemplate50;
#[must_use]
pub struct EIfElseWithVariablesTemplate51;
#[must_use]
pub struct EIfElseWithVariablesTemplate52;
#[must_use]
pub struct EIfElseWithVariablesTemplate53;
#[must_use]
pub struct EIfElseWithVariablesTemplate54;
#[must_use]
pub struct EIfElseWithVariablesTemplate55;
#[must_use]
pub struct EIfElseWithVariablesTemplate56;
#[must_use]
pub struct EIfElseWithVariablesTemplate57;
#[must_use]
pub struct EIfElseWithVariablesTemplate58;
#[must_use]
pub struct EIfElseWithVariablesTemplate59;
#[must_use]
pub struct EIfElseWithVariablesTemplate60;
#[must_use]
pub struct EIfElseWithVariablesTemplate61;
#[must_use]
pub struct EIfElseWithVariablesTemplate62;
#[must_use]
pub struct EIfElseWithVariablesTemplate63;
#[must_use]
pub struct EIfElseWithVariablesTemplate64;
#[must_use]
pub struct EIfElseWithVariablesTemplate65;
#[must_use]
pub struct EIfElseWithVariablesTemplate66;
#[must_use]
pub struct EIfElseWithVariablesTemplate67;
#[must_use]
pub struct EIfElseWithVariablesTemplate68;
#[must_use]
pub struct EIfElseWithVariablesTemplate69;
#[must_use]
pub struct EIfElseWithVariablesTemplate70;
#[must_use]
pub struct EIfElseWithVariablesTemplate71;
#[must_use]
pub struct EIfElseWithVariablesTemplate72;
#[must_use]
pub struct EIfElseWithVariablesTemplate73;
#[must_use]
pub struct EIfElseWithVariablesTemplate74;
#[must_use]
pub struct EIfElseWithVariablesTemplate75;
#[must_use]
pub struct EIfElseWithVariablesTemplate76;
#[must_use]
pub struct EIfElseWithVariablesTemplate77;
#[must_use]
pub struct EIfElseWithVariablesTemplate78;
#[must_use]
pub struct EIfElseWithVariablesTemplate79;
#[must_use]
pub struct EIfElseWithVariablesTemplate80;
#[must_use]
pub struct EIfElseWithVariablesTemplate81;
#[must_use]
pub struct EIfElseWithVariablesTemplate82;
#[must_use]
pub struct EIfElseWithVariablesTemplate83;
#[must_use]
pub struct EIfElseWithVariablesTemplate84;
#[must_use]
pub struct EIfElseWithVariablesTemplate85;
#[must_use]
pub struct EIfElseWithVariablesTemplate86;
#[must_use]
pub struct EIfElseWithVariablesTemplate87;
#[must_use]
pub struct EIfElseWithVariablesTemplate88;
#[must_use]
pub struct EIfElseWithVariablesTemplate89;
#[must_use]
pub struct EIfElseWithVariablesTemplate90;
#[must_use]
pub struct EIfElseWithVariablesTemplate91;
impl<Partial, After> Template<EIfElseWithVariablesTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate35, Partial, After>
    {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate12, Partial, After>
    {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate15, Partial, After>
    {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate16, Partial, After>
    {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate48, Partial, After>
    {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate17, Partial, After>
    {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate50, Partial, After>
    {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate18, Partial, After>
    {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseWithVariablesTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseWithVariablesTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate57, Partial, After>
    {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate20, Partial, After>
    {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate60, Partial, After>
    {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate59, Partial, After>
    {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate21, Partial, After>
    {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate63, Partial, After>
    {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate22, Partial, After>
    {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate68, Partial, After>
    {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate67, Partial, After>
    {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate71, Partial, After>
    {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate23, Partial, After>
    {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate74, Partial, After>
    {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate24, Partial, After>
    {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate77, Partial, After>
    {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate76, Partial, After>
    {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate80, Partial, After>
    {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate79, Partial, After>
    {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate25, Partial, After>
    {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate84, Partial, After>
    {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate83, Partial, After>
    {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate26, Partial, After>
    {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate89, Partial, After>
    {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseWithVariablesTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn e_if_else_with_variables()
    ->
        (Template<EIfElseWithVariablesTemplate12, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<EIfElseWithVariablesTemplate12, (),
            ()> {
            r#type: EIfElseWithVariablesTemplate12,
            partial: (),
            after: (),
        }, async gen {})
}
const _e_if_else_with_variables_FORCE_RECOMPILE: &'static str =
    "<span>{{#if author}}{{t}}{{else}}{{f}}{{/if}}</span>";
#[must_use]
pub struct EIfElseTemplate0;
#[must_use]
pub struct EIfElseTemplate1;
#[must_use]
pub struct EIfElseTemplate2;
#[must_use]
pub struct EIfElseTemplate3;
#[must_use]
pub struct EIfElseTemplate4;
#[must_use]
pub struct EIfElseTemplate5;
#[must_use]
pub struct EIfElseTemplate6;
#[must_use]
pub struct EIfElseTemplate7;
#[must_use]
pub struct EIfElseTemplate8;
#[must_use]
pub struct EIfElseTemplate9;
#[must_use]
pub struct EIfElseTemplate10;
#[must_use]
pub struct EIfElseTemplate11;
#[must_use]
pub struct EIfElseTemplate12;
#[must_use]
pub struct EIfElseTemplate13;
#[must_use]
pub struct EIfElseTemplate14;
#[must_use]
pub struct EIfElseTemplate15;
#[must_use]
pub struct EIfElseTemplate16;
#[must_use]
pub struct EIfElseTemplate17;
#[must_use]
pub struct EIfElseTemplate18;
#[must_use]
pub struct EIfElseTemplate19;
#[must_use]
pub struct EIfElseTemplate20;
#[must_use]
pub struct EIfElseTemplate21;
#[must_use]
pub struct EIfElseTemplate22;
#[must_use]
pub struct EIfElseTemplate23;
#[must_use]
pub struct EIfElseTemplate24;
#[must_use]
pub struct EIfElseTemplate25;
#[must_use]
pub struct EIfElseTemplate26;
#[must_use]
pub struct EIfElseTemplate27;
#[must_use]
pub struct EIfElseTemplate28;
#[must_use]
pub struct EIfElseTemplate29;
#[must_use]
pub struct EIfElseTemplate30;
#[must_use]
pub struct EIfElseTemplate31;
#[must_use]
pub struct EIfElseTemplate32;
#[must_use]
pub struct EIfElseTemplate33;
#[must_use]
pub struct EIfElseTemplate34;
#[must_use]
pub struct EIfElseTemplate35;
#[must_use]
pub struct EIfElseTemplate36;
#[must_use]
pub struct EIfElseTemplate37;
#[must_use]
pub struct EIfElseTemplate38;
#[must_use]
pub struct EIfElseTemplate39;
#[must_use]
pub struct EIfElseTemplate40;
#[must_use]
pub struct EIfElseTemplate41;
#[must_use]
pub struct EIfElseTemplate42;
#[must_use]
pub struct EIfElseTemplate43;
#[must_use]
pub struct EIfElseTemplate44;
#[must_use]
pub struct EIfElseTemplate45;
#[must_use]
pub struct EIfElseTemplate46;
#[must_use]
pub struct EIfElseTemplate47;
#[must_use]
pub struct EIfElseTemplate48;
#[must_use]
pub struct EIfElseTemplate49;
#[must_use]
pub struct EIfElseTemplate50;
#[must_use]
pub struct EIfElseTemplate51;
#[must_use]
pub struct EIfElseTemplate52;
#[must_use]
pub struct EIfElseTemplate53;
#[must_use]
pub struct EIfElseTemplate54;
#[must_use]
pub struct EIfElseTemplate55;
#[must_use]
pub struct EIfElseTemplate56;
#[must_use]
pub struct EIfElseTemplate57;
#[must_use]
pub struct EIfElseTemplate58;
#[must_use]
pub struct EIfElseTemplate59;
#[must_use]
pub struct EIfElseTemplate60;
#[must_use]
pub struct EIfElseTemplate61;
#[must_use]
pub struct EIfElseTemplate62;
#[must_use]
pub struct EIfElseTemplate63;
#[must_use]
pub struct EIfElseTemplate64;
#[must_use]
pub struct EIfElseTemplate65;
#[must_use]
pub struct EIfElseTemplate66;
#[must_use]
pub struct EIfElseTemplate67;
#[must_use]
pub struct EIfElseTemplate68;
#[must_use]
pub struct EIfElseTemplate69;
#[must_use]
pub struct EIfElseTemplate70;
#[must_use]
pub struct EIfElseTemplate71;
#[must_use]
pub struct EIfElseTemplate72;
#[must_use]
pub struct EIfElseTemplate73;
#[must_use]
pub struct EIfElseTemplate74;
#[must_use]
pub struct EIfElseTemplate75;
#[must_use]
pub struct EIfElseTemplate76;
#[must_use]
pub struct EIfElseTemplate77;
#[must_use]
pub struct EIfElseTemplate78;
#[must_use]
pub struct EIfElseTemplate79;
#[must_use]
pub struct EIfElseTemplate80;
#[must_use]
pub struct EIfElseTemplate81;
#[must_use]
pub struct EIfElseTemplate82;
#[must_use]
pub struct EIfElseTemplate83;
#[must_use]
pub struct EIfElseTemplate84;
#[must_use]
pub struct EIfElseTemplate85;
#[must_use]
pub struct EIfElseTemplate86;
#[must_use]
pub struct EIfElseTemplate87;
#[must_use]
pub struct EIfElseTemplate88;
#[must_use]
pub struct EIfElseTemplate89;
#[must_use]
pub struct EIfElseTemplate90;
#[must_use]
pub struct EIfElseTemplate91;
impl<Partial, After> Template<EIfElseTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<EIfElseTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn e_if_else()
    ->
        (Template<EIfElseTemplate13, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<EIfElseTemplate13, (),
            ()> { r#type: EIfElseTemplate13, partial: (), after: () },
        async gen {})
}
const _e_if_else_FORCE_RECOMPILE: &'static str =
    "{{#if author}}true{{else}}false{{/if}}";
#[must_use]
pub struct FEachEmptyTemplate0;
#[must_use]
pub struct FEachEmptyTemplate1;
#[must_use]
pub struct FEachEmptyTemplate2;
#[must_use]
pub struct FEachEmptyTemplate3;
#[must_use]
pub struct FEachEmptyTemplate4;
#[must_use]
pub struct FEachEmptyTemplate5;
#[must_use]
pub struct FEachEmptyTemplate6;
#[must_use]
pub struct FEachEmptyTemplate7;
#[must_use]
pub struct FEachEmptyTemplate8;
#[must_use]
pub struct FEachEmptyTemplate9;
#[must_use]
pub struct FEachEmptyTemplate10;
#[must_use]
pub struct FEachEmptyTemplate11;
#[must_use]
pub struct FEachEmptyTemplate12;
#[must_use]
pub struct FEachEmptyTemplate13;
#[must_use]
pub struct FEachEmptyTemplate14;
#[must_use]
pub struct FEachEmptyTemplate15;
#[must_use]
pub struct FEachEmptyTemplate16;
#[must_use]
pub struct FEachEmptyTemplate17;
#[must_use]
pub struct FEachEmptyTemplate18;
#[must_use]
pub struct FEachEmptyTemplate19;
#[must_use]
pub struct FEachEmptyTemplate20;
#[must_use]
pub struct FEachEmptyTemplate21;
#[must_use]
pub struct FEachEmptyTemplate22;
#[must_use]
pub struct FEachEmptyTemplate23;
#[must_use]
pub struct FEachEmptyTemplate24;
#[must_use]
pub struct FEachEmptyTemplate25;
#[must_use]
pub struct FEachEmptyTemplate26;
#[must_use]
pub struct FEachEmptyTemplate27;
#[must_use]
pub struct FEachEmptyTemplate28;
#[must_use]
pub struct FEachEmptyTemplate29;
#[must_use]
pub struct FEachEmptyTemplate30;
#[must_use]
pub struct FEachEmptyTemplate31;
#[must_use]
pub struct FEachEmptyTemplate32;
#[must_use]
pub struct FEachEmptyTemplate33;
#[must_use]
pub struct FEachEmptyTemplate34;
#[must_use]
pub struct FEachEmptyTemplate35;
#[must_use]
pub struct FEachEmptyTemplate36;
#[must_use]
pub struct FEachEmptyTemplate37;
#[must_use]
pub struct FEachEmptyTemplate38;
#[must_use]
pub struct FEachEmptyTemplate39;
#[must_use]
pub struct FEachEmptyTemplate40;
#[must_use]
pub struct FEachEmptyTemplate41;
#[must_use]
pub struct FEachEmptyTemplate42;
#[must_use]
pub struct FEachEmptyTemplate43;
#[must_use]
pub struct FEachEmptyTemplate44;
#[must_use]
pub struct FEachEmptyTemplate45;
#[must_use]
pub struct FEachEmptyTemplate46;
#[must_use]
pub struct FEachEmptyTemplate47;
#[must_use]
pub struct FEachEmptyTemplate48;
#[must_use]
pub struct FEachEmptyTemplate49;
#[must_use]
pub struct FEachEmptyTemplate50;
#[must_use]
pub struct FEachEmptyTemplate51;
#[must_use]
pub struct FEachEmptyTemplate52;
#[must_use]
pub struct FEachEmptyTemplate53;
#[must_use]
pub struct FEachEmptyTemplate54;
#[must_use]
pub struct FEachEmptyTemplate55;
#[must_use]
pub struct FEachEmptyTemplate56;
#[must_use]
pub struct FEachEmptyTemplate57;
#[must_use]
pub struct FEachEmptyTemplate58;
#[must_use]
pub struct FEachEmptyTemplate59;
#[must_use]
pub struct FEachEmptyTemplate60;
#[must_use]
pub struct FEachEmptyTemplate61;
#[must_use]
pub struct FEachEmptyTemplate62;
#[must_use]
pub struct FEachEmptyTemplate63;
#[must_use]
pub struct FEachEmptyTemplate64;
#[must_use]
pub struct FEachEmptyTemplate65;
#[must_use]
pub struct FEachEmptyTemplate66;
#[must_use]
pub struct FEachEmptyTemplate67;
#[must_use]
pub struct FEachEmptyTemplate68;
#[must_use]
pub struct FEachEmptyTemplate69;
#[must_use]
pub struct FEachEmptyTemplate70;
#[must_use]
pub struct FEachEmptyTemplate71;
#[must_use]
pub struct FEachEmptyTemplate72;
#[must_use]
pub struct FEachEmptyTemplate73;
#[must_use]
pub struct FEachEmptyTemplate74;
#[must_use]
pub struct FEachEmptyTemplate75;
#[must_use]
pub struct FEachEmptyTemplate76;
#[must_use]
pub struct FEachEmptyTemplate77;
#[must_use]
pub struct FEachEmptyTemplate78;
#[must_use]
pub struct FEachEmptyTemplate79;
#[must_use]
pub struct FEachEmptyTemplate80;
#[must_use]
pub struct FEachEmptyTemplate81;
#[must_use]
pub struct FEachEmptyTemplate82;
#[must_use]
pub struct FEachEmptyTemplate83;
#[must_use]
pub struct FEachEmptyTemplate84;
#[must_use]
pub struct FEachEmptyTemplate85;
#[must_use]
pub struct FEachEmptyTemplate86;
#[must_use]
pub struct FEachEmptyTemplate87;
#[must_use]
pub struct FEachEmptyTemplate88;
#[must_use]
pub struct FEachEmptyTemplate89;
#[must_use]
pub struct FEachEmptyTemplate90;
#[must_use]
pub struct FEachEmptyTemplate91;
impl<Partial, After> Template<FEachEmptyTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<FEachEmptyTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<FEachEmptyTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<FEachEmptyTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn f_each_empty()
    ->
        (Template<FEachEmptyTemplate14, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<FEachEmptyTemplate14, (),
            ()> { r#type: FEachEmptyTemplate14, partial: (), after: () },
        async gen {})
}
const _f_each_empty_FORCE_RECOMPILE: &'static str =
    "{{#each articles}}{{/each}}";
#[must_use]
pub struct FEachOneVariableTemplate0;
#[must_use]
pub struct FEachOneVariableTemplate1;
#[must_use]
pub struct FEachOneVariableTemplate2;
#[must_use]
pub struct FEachOneVariableTemplate3;
#[must_use]
pub struct FEachOneVariableTemplate4;
#[must_use]
pub struct FEachOneVariableTemplate5;
#[must_use]
pub struct FEachOneVariableTemplate6;
#[must_use]
pub struct FEachOneVariableTemplate7;
#[must_use]
pub struct FEachOneVariableTemplate8;
#[must_use]
pub struct FEachOneVariableTemplate9;
#[must_use]
pub struct FEachOneVariableTemplate10;
#[must_use]
pub struct FEachOneVariableTemplate11;
#[must_use]
pub struct FEachOneVariableTemplate12;
#[must_use]
pub struct FEachOneVariableTemplate13;
#[must_use]
pub struct FEachOneVariableTemplate14;
#[must_use]
pub struct FEachOneVariableTemplate15;
#[must_use]
pub struct FEachOneVariableTemplate16;
#[must_use]
pub struct FEachOneVariableTemplate17;
#[must_use]
pub struct FEachOneVariableTemplate18;
#[must_use]
pub struct FEachOneVariableTemplate19;
#[must_use]
pub struct FEachOneVariableTemplate20;
#[must_use]
pub struct FEachOneVariableTemplate21;
#[must_use]
pub struct FEachOneVariableTemplate22;
#[must_use]
pub struct FEachOneVariableTemplate23;
#[must_use]
pub struct FEachOneVariableTemplate24;
#[must_use]
pub struct FEachOneVariableTemplate25;
#[must_use]
pub struct FEachOneVariableTemplate26;
#[must_use]
pub struct FEachOneVariableTemplate27;
#[must_use]
pub struct FEachOneVariableTemplate28;
#[must_use]
pub struct FEachOneVariableTemplate29;
#[must_use]
pub struct FEachOneVariableTemplate30;
#[must_use]
pub struct FEachOneVariableTemplate31;
#[must_use]
pub struct FEachOneVariableTemplate32;
#[must_use]
pub struct FEachOneVariableTemplate33;
#[must_use]
pub struct FEachOneVariableTemplate34;
#[must_use]
pub struct FEachOneVariableTemplate35;
#[must_use]
pub struct FEachOneVariableTemplate36;
#[must_use]
pub struct FEachOneVariableTemplate37;
#[must_use]
pub struct FEachOneVariableTemplate38;
#[must_use]
pub struct FEachOneVariableTemplate39;
#[must_use]
pub struct FEachOneVariableTemplate40;
#[must_use]
pub struct FEachOneVariableTemplate41;
#[must_use]
pub struct FEachOneVariableTemplate42;
#[must_use]
pub struct FEachOneVariableTemplate43;
#[must_use]
pub struct FEachOneVariableTemplate44;
#[must_use]
pub struct FEachOneVariableTemplate45;
#[must_use]
pub struct FEachOneVariableTemplate46;
#[must_use]
pub struct FEachOneVariableTemplate47;
#[must_use]
pub struct FEachOneVariableTemplate48;
#[must_use]
pub struct FEachOneVariableTemplate49;
#[must_use]
pub struct FEachOneVariableTemplate50;
#[must_use]
pub struct FEachOneVariableTemplate51;
#[must_use]
pub struct FEachOneVariableTemplate52;
#[must_use]
pub struct FEachOneVariableTemplate53;
#[must_use]
pub struct FEachOneVariableTemplate54;
#[must_use]
pub struct FEachOneVariableTemplate55;
#[must_use]
pub struct FEachOneVariableTemplate56;
#[must_use]
pub struct FEachOneVariableTemplate57;
#[must_use]
pub struct FEachOneVariableTemplate58;
#[must_use]
pub struct FEachOneVariableTemplate59;
#[must_use]
pub struct FEachOneVariableTemplate60;
#[must_use]
pub struct FEachOneVariableTemplate61;
#[must_use]
pub struct FEachOneVariableTemplate62;
#[must_use]
pub struct FEachOneVariableTemplate63;
#[must_use]
pub struct FEachOneVariableTemplate64;
#[must_use]
pub struct FEachOneVariableTemplate65;
#[must_use]
pub struct FEachOneVariableTemplate66;
#[must_use]
pub struct FEachOneVariableTemplate67;
#[must_use]
pub struct FEachOneVariableTemplate68;
#[must_use]
pub struct FEachOneVariableTemplate69;
#[must_use]
pub struct FEachOneVariableTemplate70;
#[must_use]
pub struct FEachOneVariableTemplate71;
#[must_use]
pub struct FEachOneVariableTemplate72;
#[must_use]
pub struct FEachOneVariableTemplate73;
#[must_use]
pub struct FEachOneVariableTemplate74;
#[must_use]
pub struct FEachOneVariableTemplate75;
#[must_use]
pub struct FEachOneVariableTemplate76;
#[must_use]
pub struct FEachOneVariableTemplate77;
#[must_use]
pub struct FEachOneVariableTemplate78;
#[must_use]
pub struct FEachOneVariableTemplate79;
#[must_use]
pub struct FEachOneVariableTemplate80;
#[must_use]
pub struct FEachOneVariableTemplate81;
#[must_use]
pub struct FEachOneVariableTemplate82;
#[must_use]
pub struct FEachOneVariableTemplate83;
#[must_use]
pub struct FEachOneVariableTemplate84;
#[must_use]
pub struct FEachOneVariableTemplate85;
#[must_use]
pub struct FEachOneVariableTemplate86;
#[must_use]
pub struct FEachOneVariableTemplate87;
#[must_use]
pub struct FEachOneVariableTemplate88;
#[must_use]
pub struct FEachOneVariableTemplate89;
#[must_use]
pub struct FEachOneVariableTemplate90;
#[must_use]
pub struct FEachOneVariableTemplate91;
impl<Partial, After> Template<FEachOneVariableTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<FEachOneVariableTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<FEachOneVariableTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<FEachOneVariableTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn f_each_one_variable()
    ->
        (Template<FEachOneVariableTemplate15, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<FEachOneVariableTemplate15, (),
            ()> {
            r#type: FEachOneVariableTemplate15,
            partial: (),
            after: (),
        }, async gen {})
}
const _f_each_one_variable_FORCE_RECOMPILE: &'static str =
    "<span>{{#each articles}}{{title}}{{/each}}</span>";
#[must_use]
pub struct FEachTwoVariablesTemplate0;
#[must_use]
pub struct FEachTwoVariablesTemplate1;
#[must_use]
pub struct FEachTwoVariablesTemplate2;
#[must_use]
pub struct FEachTwoVariablesTemplate3;
#[must_use]
pub struct FEachTwoVariablesTemplate4;
#[must_use]
pub struct FEachTwoVariablesTemplate5;
#[must_use]
pub struct FEachTwoVariablesTemplate6;
#[must_use]
pub struct FEachTwoVariablesTemplate7;
#[must_use]
pub struct FEachTwoVariablesTemplate8;
#[must_use]
pub struct FEachTwoVariablesTemplate9;
#[must_use]
pub struct FEachTwoVariablesTemplate10;
#[must_use]
pub struct FEachTwoVariablesTemplate11;
#[must_use]
pub struct FEachTwoVariablesTemplate12;
#[must_use]
pub struct FEachTwoVariablesTemplate13;
#[must_use]
pub struct FEachTwoVariablesTemplate14;
#[must_use]
pub struct FEachTwoVariablesTemplate15;
#[must_use]
pub struct FEachTwoVariablesTemplate16;
#[must_use]
pub struct FEachTwoVariablesTemplate17;
#[must_use]
pub struct FEachTwoVariablesTemplate18;
#[must_use]
pub struct FEachTwoVariablesTemplate19;
#[must_use]
pub struct FEachTwoVariablesTemplate20;
#[must_use]
pub struct FEachTwoVariablesTemplate21;
#[must_use]
pub struct FEachTwoVariablesTemplate22;
#[must_use]
pub struct FEachTwoVariablesTemplate23;
#[must_use]
pub struct FEachTwoVariablesTemplate24;
#[must_use]
pub struct FEachTwoVariablesTemplate25;
#[must_use]
pub struct FEachTwoVariablesTemplate26;
#[must_use]
pub struct FEachTwoVariablesTemplate27;
#[must_use]
pub struct FEachTwoVariablesTemplate28;
#[must_use]
pub struct FEachTwoVariablesTemplate29;
#[must_use]
pub struct FEachTwoVariablesTemplate30;
#[must_use]
pub struct FEachTwoVariablesTemplate31;
#[must_use]
pub struct FEachTwoVariablesTemplate32;
#[must_use]
pub struct FEachTwoVariablesTemplate33;
#[must_use]
pub struct FEachTwoVariablesTemplate34;
#[must_use]
pub struct FEachTwoVariablesTemplate35;
#[must_use]
pub struct FEachTwoVariablesTemplate36;
#[must_use]
pub struct FEachTwoVariablesTemplate37;
#[must_use]
pub struct FEachTwoVariablesTemplate38;
#[must_use]
pub struct FEachTwoVariablesTemplate39;
#[must_use]
pub struct FEachTwoVariablesTemplate40;
#[must_use]
pub struct FEachTwoVariablesTemplate41;
#[must_use]
pub struct FEachTwoVariablesTemplate42;
#[must_use]
pub struct FEachTwoVariablesTemplate43;
#[must_use]
pub struct FEachTwoVariablesTemplate44;
#[must_use]
pub struct FEachTwoVariablesTemplate45;
#[must_use]
pub struct FEachTwoVariablesTemplate46;
#[must_use]
pub struct FEachTwoVariablesTemplate47;
#[must_use]
pub struct FEachTwoVariablesTemplate48;
#[must_use]
pub struct FEachTwoVariablesTemplate49;
#[must_use]
pub struct FEachTwoVariablesTemplate50;
#[must_use]
pub struct FEachTwoVariablesTemplate51;
#[must_use]
pub struct FEachTwoVariablesTemplate52;
#[must_use]
pub struct FEachTwoVariablesTemplate53;
#[must_use]
pub struct FEachTwoVariablesTemplate54;
#[must_use]
pub struct FEachTwoVariablesTemplate55;
#[must_use]
pub struct FEachTwoVariablesTemplate56;
#[must_use]
pub struct FEachTwoVariablesTemplate57;
#[must_use]
pub struct FEachTwoVariablesTemplate58;
#[must_use]
pub struct FEachTwoVariablesTemplate59;
#[must_use]
pub struct FEachTwoVariablesTemplate60;
#[must_use]
pub struct FEachTwoVariablesTemplate61;
#[must_use]
pub struct FEachTwoVariablesTemplate62;
#[must_use]
pub struct FEachTwoVariablesTemplate63;
#[must_use]
pub struct FEachTwoVariablesTemplate64;
#[must_use]
pub struct FEachTwoVariablesTemplate65;
#[must_use]
pub struct FEachTwoVariablesTemplate66;
#[must_use]
pub struct FEachTwoVariablesTemplate67;
#[must_use]
pub struct FEachTwoVariablesTemplate68;
#[must_use]
pub struct FEachTwoVariablesTemplate69;
#[must_use]
pub struct FEachTwoVariablesTemplate70;
#[must_use]
pub struct FEachTwoVariablesTemplate71;
#[must_use]
pub struct FEachTwoVariablesTemplate72;
#[must_use]
pub struct FEachTwoVariablesTemplate73;
#[must_use]
pub struct FEachTwoVariablesTemplate74;
#[must_use]
pub struct FEachTwoVariablesTemplate75;
#[must_use]
pub struct FEachTwoVariablesTemplate76;
#[must_use]
pub struct FEachTwoVariablesTemplate77;
#[must_use]
pub struct FEachTwoVariablesTemplate78;
#[must_use]
pub struct FEachTwoVariablesTemplate79;
#[must_use]
pub struct FEachTwoVariablesTemplate80;
#[must_use]
pub struct FEachTwoVariablesTemplate81;
#[must_use]
pub struct FEachTwoVariablesTemplate82;
#[must_use]
pub struct FEachTwoVariablesTemplate83;
#[must_use]
pub struct FEachTwoVariablesTemplate84;
#[must_use]
pub struct FEachTwoVariablesTemplate85;
#[must_use]
pub struct FEachTwoVariablesTemplate86;
#[must_use]
pub struct FEachTwoVariablesTemplate87;
#[must_use]
pub struct FEachTwoVariablesTemplate88;
#[must_use]
pub struct FEachTwoVariablesTemplate89;
#[must_use]
pub struct FEachTwoVariablesTemplate90;
#[must_use]
pub struct FEachTwoVariablesTemplate91;
impl<Partial, After> Template<FEachTwoVariablesTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<FEachTwoVariablesTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<FEachTwoVariablesTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<FEachTwoVariablesTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn f_each_two_variables()
    ->
        (Template<FEachTwoVariablesTemplate16, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<FEachTwoVariablesTemplate16, (),
            ()> {
            r#type: FEachTwoVariablesTemplate16,
            partial: (),
            after: (),
        }, async gen {})
}
const _f_each_two_variables_FORCE_RECOMPILE: &'static str =
    "<span>{{#each articles}}{{title}}{{content}}{{/each}}</span>";
#[must_use]
pub struct GEmptyTemplateMultipleTemplate0;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate1;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate2;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate3;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate4;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate5;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate6;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate7;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate8;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate9;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate10;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate11;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate12;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate13;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate14;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate15;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate16;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate17;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate18;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate19;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate20;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate21;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate22;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate23;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate24;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate25;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate26;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate27;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate28;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate29;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate30;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate31;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate32;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate33;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate34;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate35;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate36;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate37;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate38;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate39;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate40;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate41;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate42;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate43;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate44;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate45;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate46;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate47;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate48;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate49;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate50;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate51;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate52;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate53;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate54;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate55;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate56;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate57;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate58;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate59;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate60;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate61;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate62;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate63;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate64;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate65;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate66;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate67;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate68;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate69;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate70;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate71;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate72;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate73;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate74;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate75;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate76;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate77;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate78;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate79;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate80;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate81;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate82;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate83;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate84;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate85;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate86;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate87;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate88;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate89;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate90;
#[must_use]
pub struct GEmptyTemplateMultipleTemplate91;
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate1, Partial, After>
    {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate2, Partial, After>
    {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate3, Partial, After>
    {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate4, Partial, After>
    {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate5, Partial, After>
    {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate6, Partial, After>
    {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate7, Partial, After>
    {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate8, Partial, After>
    {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate9, Partial, After>
    {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate9, Partial, After>
    {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GEmptyTemplateMultipleTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GEmptyTemplateMultipleTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GEmptyTemplateMultipleTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_empty_template_multiple()
    ->
        (Template<GEmptyTemplateMultipleTemplate17, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GEmptyTemplateMultipleTemplate17, (),
            ()> {
            r#type: GEmptyTemplateMultipleTemplate17,
            partial: (),
            after: (),
        }, async gen {})
}
const _g_empty_template_multiple_FORCE_RECOMPILE: &'static str =
    "{{#>a_empty}}{{/a_empty}}{{#>a_empty}}{{/a_empty}}";
#[must_use]
pub struct GEmptyTemplateTemplate0;
#[must_use]
pub struct GEmptyTemplateTemplate1;
#[must_use]
pub struct GEmptyTemplateTemplate2;
#[must_use]
pub struct GEmptyTemplateTemplate3;
#[must_use]
pub struct GEmptyTemplateTemplate4;
#[must_use]
pub struct GEmptyTemplateTemplate5;
#[must_use]
pub struct GEmptyTemplateTemplate6;
#[must_use]
pub struct GEmptyTemplateTemplate7;
#[must_use]
pub struct GEmptyTemplateTemplate8;
#[must_use]
pub struct GEmptyTemplateTemplate9;
#[must_use]
pub struct GEmptyTemplateTemplate10;
#[must_use]
pub struct GEmptyTemplateTemplate11;
#[must_use]
pub struct GEmptyTemplateTemplate12;
#[must_use]
pub struct GEmptyTemplateTemplate13;
#[must_use]
pub struct GEmptyTemplateTemplate14;
#[must_use]
pub struct GEmptyTemplateTemplate15;
#[must_use]
pub struct GEmptyTemplateTemplate16;
#[must_use]
pub struct GEmptyTemplateTemplate17;
#[must_use]
pub struct GEmptyTemplateTemplate18;
#[must_use]
pub struct GEmptyTemplateTemplate19;
#[must_use]
pub struct GEmptyTemplateTemplate20;
#[must_use]
pub struct GEmptyTemplateTemplate21;
#[must_use]
pub struct GEmptyTemplateTemplate22;
#[must_use]
pub struct GEmptyTemplateTemplate23;
#[must_use]
pub struct GEmptyTemplateTemplate24;
#[must_use]
pub struct GEmptyTemplateTemplate25;
#[must_use]
pub struct GEmptyTemplateTemplate26;
#[must_use]
pub struct GEmptyTemplateTemplate27;
#[must_use]
pub struct GEmptyTemplateTemplate28;
#[must_use]
pub struct GEmptyTemplateTemplate29;
#[must_use]
pub struct GEmptyTemplateTemplate30;
#[must_use]
pub struct GEmptyTemplateTemplate31;
#[must_use]
pub struct GEmptyTemplateTemplate32;
#[must_use]
pub struct GEmptyTemplateTemplate33;
#[must_use]
pub struct GEmptyTemplateTemplate34;
#[must_use]
pub struct GEmptyTemplateTemplate35;
#[must_use]
pub struct GEmptyTemplateTemplate36;
#[must_use]
pub struct GEmptyTemplateTemplate37;
#[must_use]
pub struct GEmptyTemplateTemplate38;
#[must_use]
pub struct GEmptyTemplateTemplate39;
#[must_use]
pub struct GEmptyTemplateTemplate40;
#[must_use]
pub struct GEmptyTemplateTemplate41;
#[must_use]
pub struct GEmptyTemplateTemplate42;
#[must_use]
pub struct GEmptyTemplateTemplate43;
#[must_use]
pub struct GEmptyTemplateTemplate44;
#[must_use]
pub struct GEmptyTemplateTemplate45;
#[must_use]
pub struct GEmptyTemplateTemplate46;
#[must_use]
pub struct GEmptyTemplateTemplate47;
#[must_use]
pub struct GEmptyTemplateTemplate48;
#[must_use]
pub struct GEmptyTemplateTemplate49;
#[must_use]
pub struct GEmptyTemplateTemplate50;
#[must_use]
pub struct GEmptyTemplateTemplate51;
#[must_use]
pub struct GEmptyTemplateTemplate52;
#[must_use]
pub struct GEmptyTemplateTemplate53;
#[must_use]
pub struct GEmptyTemplateTemplate54;
#[must_use]
pub struct GEmptyTemplateTemplate55;
#[must_use]
pub struct GEmptyTemplateTemplate56;
#[must_use]
pub struct GEmptyTemplateTemplate57;
#[must_use]
pub struct GEmptyTemplateTemplate58;
#[must_use]
pub struct GEmptyTemplateTemplate59;
#[must_use]
pub struct GEmptyTemplateTemplate60;
#[must_use]
pub struct GEmptyTemplateTemplate61;
#[must_use]
pub struct GEmptyTemplateTemplate62;
#[must_use]
pub struct GEmptyTemplateTemplate63;
#[must_use]
pub struct GEmptyTemplateTemplate64;
#[must_use]
pub struct GEmptyTemplateTemplate65;
#[must_use]
pub struct GEmptyTemplateTemplate66;
#[must_use]
pub struct GEmptyTemplateTemplate67;
#[must_use]
pub struct GEmptyTemplateTemplate68;
#[must_use]
pub struct GEmptyTemplateTemplate69;
#[must_use]
pub struct GEmptyTemplateTemplate70;
#[must_use]
pub struct GEmptyTemplateTemplate71;
#[must_use]
pub struct GEmptyTemplateTemplate72;
#[must_use]
pub struct GEmptyTemplateTemplate73;
#[must_use]
pub struct GEmptyTemplateTemplate74;
#[must_use]
pub struct GEmptyTemplateTemplate75;
#[must_use]
pub struct GEmptyTemplateTemplate76;
#[must_use]
pub struct GEmptyTemplateTemplate77;
#[must_use]
pub struct GEmptyTemplateTemplate78;
#[must_use]
pub struct GEmptyTemplateTemplate79;
#[must_use]
pub struct GEmptyTemplateTemplate80;
#[must_use]
pub struct GEmptyTemplateTemplate81;
#[must_use]
pub struct GEmptyTemplateTemplate82;
#[must_use]
pub struct GEmptyTemplateTemplate83;
#[must_use]
pub struct GEmptyTemplateTemplate84;
#[must_use]
pub struct GEmptyTemplateTemplate85;
#[must_use]
pub struct GEmptyTemplateTemplate86;
#[must_use]
pub struct GEmptyTemplateTemplate87;
#[must_use]
pub struct GEmptyTemplateTemplate88;
#[must_use]
pub struct GEmptyTemplateTemplate89;
#[must_use]
pub struct GEmptyTemplateTemplate90;
#[must_use]
pub struct GEmptyTemplateTemplate91;
impl<Partial, After> Template<GEmptyTemplateTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GEmptyTemplateTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GEmptyTemplateTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GEmptyTemplateTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_empty_template()
    ->
        (Template<GEmptyTemplateTemplate18, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GEmptyTemplateTemplate18, (),
            ()> { r#type: GEmptyTemplateTemplate18, partial: (), after: () },
        async gen {})
}
const _g_empty_template_FORCE_RECOMPILE: &'static str =
    "{{#>a_empty}}{{/a_empty}}";
#[must_use]
pub struct GPartialBlockPartialTemplate0;
#[must_use]
pub struct GPartialBlockPartialTemplate1;
#[must_use]
pub struct GPartialBlockPartialTemplate2;
#[must_use]
pub struct GPartialBlockPartialTemplate3;
#[must_use]
pub struct GPartialBlockPartialTemplate4;
#[must_use]
pub struct GPartialBlockPartialTemplate5;
#[must_use]
pub struct GPartialBlockPartialTemplate6;
#[must_use]
pub struct GPartialBlockPartialTemplate7;
#[must_use]
pub struct GPartialBlockPartialTemplate8;
#[must_use]
pub struct GPartialBlockPartialTemplate9;
#[must_use]
pub struct GPartialBlockPartialTemplate10;
#[must_use]
pub struct GPartialBlockPartialTemplate11;
#[must_use]
pub struct GPartialBlockPartialTemplate12;
#[must_use]
pub struct GPartialBlockPartialTemplate13;
#[must_use]
pub struct GPartialBlockPartialTemplate14;
#[must_use]
pub struct GPartialBlockPartialTemplate15;
#[must_use]
pub struct GPartialBlockPartialTemplate16;
#[must_use]
pub struct GPartialBlockPartialTemplate17;
#[must_use]
pub struct GPartialBlockPartialTemplate18;
#[must_use]
pub struct GPartialBlockPartialTemplate19;
#[must_use]
pub struct GPartialBlockPartialTemplate20;
#[must_use]
pub struct GPartialBlockPartialTemplate21;
#[must_use]
pub struct GPartialBlockPartialTemplate22;
#[must_use]
pub struct GPartialBlockPartialTemplate23;
#[must_use]
pub struct GPartialBlockPartialTemplate24;
#[must_use]
pub struct GPartialBlockPartialTemplate25;
#[must_use]
pub struct GPartialBlockPartialTemplate26;
#[must_use]
pub struct GPartialBlockPartialTemplate27;
#[must_use]
pub struct GPartialBlockPartialTemplate28;
#[must_use]
pub struct GPartialBlockPartialTemplate29;
#[must_use]
pub struct GPartialBlockPartialTemplate30;
#[must_use]
pub struct GPartialBlockPartialTemplate31;
#[must_use]
pub struct GPartialBlockPartialTemplate32;
#[must_use]
pub struct GPartialBlockPartialTemplate33;
#[must_use]
pub struct GPartialBlockPartialTemplate34;
#[must_use]
pub struct GPartialBlockPartialTemplate35;
#[must_use]
pub struct GPartialBlockPartialTemplate36;
#[must_use]
pub struct GPartialBlockPartialTemplate37;
#[must_use]
pub struct GPartialBlockPartialTemplate38;
#[must_use]
pub struct GPartialBlockPartialTemplate39;
#[must_use]
pub struct GPartialBlockPartialTemplate40;
#[must_use]
pub struct GPartialBlockPartialTemplate41;
#[must_use]
pub struct GPartialBlockPartialTemplate42;
#[must_use]
pub struct GPartialBlockPartialTemplate43;
#[must_use]
pub struct GPartialBlockPartialTemplate44;
#[must_use]
pub struct GPartialBlockPartialTemplate45;
#[must_use]
pub struct GPartialBlockPartialTemplate46;
#[must_use]
pub struct GPartialBlockPartialTemplate47;
#[must_use]
pub struct GPartialBlockPartialTemplate48;
#[must_use]
pub struct GPartialBlockPartialTemplate49;
#[must_use]
pub struct GPartialBlockPartialTemplate50;
#[must_use]
pub struct GPartialBlockPartialTemplate51;
#[must_use]
pub struct GPartialBlockPartialTemplate52;
#[must_use]
pub struct GPartialBlockPartialTemplate53;
#[must_use]
pub struct GPartialBlockPartialTemplate54;
#[must_use]
pub struct GPartialBlockPartialTemplate55;
#[must_use]
pub struct GPartialBlockPartialTemplate56;
#[must_use]
pub struct GPartialBlockPartialTemplate57;
#[must_use]
pub struct GPartialBlockPartialTemplate58;
#[must_use]
pub struct GPartialBlockPartialTemplate59;
#[must_use]
pub struct GPartialBlockPartialTemplate60;
#[must_use]
pub struct GPartialBlockPartialTemplate61;
#[must_use]
pub struct GPartialBlockPartialTemplate62;
#[must_use]
pub struct GPartialBlockPartialTemplate63;
#[must_use]
pub struct GPartialBlockPartialTemplate64;
#[must_use]
pub struct GPartialBlockPartialTemplate65;
#[must_use]
pub struct GPartialBlockPartialTemplate66;
#[must_use]
pub struct GPartialBlockPartialTemplate67;
#[must_use]
pub struct GPartialBlockPartialTemplate68;
#[must_use]
pub struct GPartialBlockPartialTemplate69;
#[must_use]
pub struct GPartialBlockPartialTemplate70;
#[must_use]
pub struct GPartialBlockPartialTemplate71;
#[must_use]
pub struct GPartialBlockPartialTemplate72;
#[must_use]
pub struct GPartialBlockPartialTemplate73;
#[must_use]
pub struct GPartialBlockPartialTemplate74;
#[must_use]
pub struct GPartialBlockPartialTemplate75;
#[must_use]
pub struct GPartialBlockPartialTemplate76;
#[must_use]
pub struct GPartialBlockPartialTemplate77;
#[must_use]
pub struct GPartialBlockPartialTemplate78;
#[must_use]
pub struct GPartialBlockPartialTemplate79;
#[must_use]
pub struct GPartialBlockPartialTemplate80;
#[must_use]
pub struct GPartialBlockPartialTemplate81;
#[must_use]
pub struct GPartialBlockPartialTemplate82;
#[must_use]
pub struct GPartialBlockPartialTemplate83;
#[must_use]
pub struct GPartialBlockPartialTemplate84;
#[must_use]
pub struct GPartialBlockPartialTemplate85;
#[must_use]
pub struct GPartialBlockPartialTemplate86;
#[must_use]
pub struct GPartialBlockPartialTemplate87;
#[must_use]
pub struct GPartialBlockPartialTemplate88;
#[must_use]
pub struct GPartialBlockPartialTemplate89;
#[must_use]
pub struct GPartialBlockPartialTemplate90;
#[must_use]
pub struct GPartialBlockPartialTemplate91;
impl<Partial, After> Template<GPartialBlockPartialTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate35, Partial, After>
    {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate12, Partial, After>
    {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate15, Partial, After>
    {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate16, Partial, After>
    {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate48, Partial, After>
    {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate17, Partial, After>
    {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate50, Partial, After>
    {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate18, Partial, After>
    {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GPartialBlockPartialTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GPartialBlockPartialTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate57, Partial, After>
    {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate20, Partial, After>
    {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate60, Partial, After>
    {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate59, Partial, After>
    {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate21, Partial, After>
    {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate63, Partial, After>
    {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate22, Partial, After>
    {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate68, Partial, After>
    {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate67, Partial, After>
    {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate71, Partial, After>
    {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate23, Partial, After>
    {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate74, Partial, After>
    {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate24, Partial, After>
    {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate77, Partial, After>
    {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate76, Partial, After>
    {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate80, Partial, After>
    {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate79, Partial, After>
    {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate25, Partial, After>
    {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate84, Partial, After>
    {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate83, Partial, After>
    {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate26, Partial, After>
    {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate89, Partial, After>
    {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GPartialBlockPartialTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_partial_block_partial()
    ->
        (Template<GPartialBlockPartialTemplate19, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GPartialBlockPartialTemplate19, (),
            ()> {
            r#type: GPartialBlockPartialTemplate19,
            partial: (),
            after: (),
        }, async gen {})
}
const _g_partial_block_partial_FORCE_RECOMPILE: &'static str =
    "<span>{{before}}<p>{{>@partial-block}}</p><div>{{>@partial-block}}</div>{{after}}</span>";
#[must_use]
pub struct GPartialBlockTemplate0;
#[must_use]
pub struct GPartialBlockTemplate1;
#[must_use]
pub struct GPartialBlockTemplate2;
#[must_use]
pub struct GPartialBlockTemplate3;
#[must_use]
pub struct GPartialBlockTemplate4;
#[must_use]
pub struct GPartialBlockTemplate5;
#[must_use]
pub struct GPartialBlockTemplate6;
#[must_use]
pub struct GPartialBlockTemplate7;
#[must_use]
pub struct GPartialBlockTemplate8;
#[must_use]
pub struct GPartialBlockTemplate9;
#[must_use]
pub struct GPartialBlockTemplate10;
#[must_use]
pub struct GPartialBlockTemplate11;
#[must_use]
pub struct GPartialBlockTemplate12;
#[must_use]
pub struct GPartialBlockTemplate13;
#[must_use]
pub struct GPartialBlockTemplate14;
#[must_use]
pub struct GPartialBlockTemplate15;
#[must_use]
pub struct GPartialBlockTemplate16;
#[must_use]
pub struct GPartialBlockTemplate17;
#[must_use]
pub struct GPartialBlockTemplate18;
#[must_use]
pub struct GPartialBlockTemplate19;
#[must_use]
pub struct GPartialBlockTemplate20;
#[must_use]
pub struct GPartialBlockTemplate21;
#[must_use]
pub struct GPartialBlockTemplate22;
#[must_use]
pub struct GPartialBlockTemplate23;
#[must_use]
pub struct GPartialBlockTemplate24;
#[must_use]
pub struct GPartialBlockTemplate25;
#[must_use]
pub struct GPartialBlockTemplate26;
#[must_use]
pub struct GPartialBlockTemplate27;
#[must_use]
pub struct GPartialBlockTemplate28;
#[must_use]
pub struct GPartialBlockTemplate29;
#[must_use]
pub struct GPartialBlockTemplate30;
#[must_use]
pub struct GPartialBlockTemplate31;
#[must_use]
pub struct GPartialBlockTemplate32;
#[must_use]
pub struct GPartialBlockTemplate33;
#[must_use]
pub struct GPartialBlockTemplate34;
#[must_use]
pub struct GPartialBlockTemplate35;
#[must_use]
pub struct GPartialBlockTemplate36;
#[must_use]
pub struct GPartialBlockTemplate37;
#[must_use]
pub struct GPartialBlockTemplate38;
#[must_use]
pub struct GPartialBlockTemplate39;
#[must_use]
pub struct GPartialBlockTemplate40;
#[must_use]
pub struct GPartialBlockTemplate41;
#[must_use]
pub struct GPartialBlockTemplate42;
#[must_use]
pub struct GPartialBlockTemplate43;
#[must_use]
pub struct GPartialBlockTemplate44;
#[must_use]
pub struct GPartialBlockTemplate45;
#[must_use]
pub struct GPartialBlockTemplate46;
#[must_use]
pub struct GPartialBlockTemplate47;
#[must_use]
pub struct GPartialBlockTemplate48;
#[must_use]
pub struct GPartialBlockTemplate49;
#[must_use]
pub struct GPartialBlockTemplate50;
#[must_use]
pub struct GPartialBlockTemplate51;
#[must_use]
pub struct GPartialBlockTemplate52;
#[must_use]
pub struct GPartialBlockTemplate53;
#[must_use]
pub struct GPartialBlockTemplate54;
#[must_use]
pub struct GPartialBlockTemplate55;
#[must_use]
pub struct GPartialBlockTemplate56;
#[must_use]
pub struct GPartialBlockTemplate57;
#[must_use]
pub struct GPartialBlockTemplate58;
#[must_use]
pub struct GPartialBlockTemplate59;
#[must_use]
pub struct GPartialBlockTemplate60;
#[must_use]
pub struct GPartialBlockTemplate61;
#[must_use]
pub struct GPartialBlockTemplate62;
#[must_use]
pub struct GPartialBlockTemplate63;
#[must_use]
pub struct GPartialBlockTemplate64;
#[must_use]
pub struct GPartialBlockTemplate65;
#[must_use]
pub struct GPartialBlockTemplate66;
#[must_use]
pub struct GPartialBlockTemplate67;
#[must_use]
pub struct GPartialBlockTemplate68;
#[must_use]
pub struct GPartialBlockTemplate69;
#[must_use]
pub struct GPartialBlockTemplate70;
#[must_use]
pub struct GPartialBlockTemplate71;
#[must_use]
pub struct GPartialBlockTemplate72;
#[must_use]
pub struct GPartialBlockTemplate73;
#[must_use]
pub struct GPartialBlockTemplate74;
#[must_use]
pub struct GPartialBlockTemplate75;
#[must_use]
pub struct GPartialBlockTemplate76;
#[must_use]
pub struct GPartialBlockTemplate77;
#[must_use]
pub struct GPartialBlockTemplate78;
#[must_use]
pub struct GPartialBlockTemplate79;
#[must_use]
pub struct GPartialBlockTemplate80;
#[must_use]
pub struct GPartialBlockTemplate81;
#[must_use]
pub struct GPartialBlockTemplate82;
#[must_use]
pub struct GPartialBlockTemplate83;
#[must_use]
pub struct GPartialBlockTemplate84;
#[must_use]
pub struct GPartialBlockTemplate85;
#[must_use]
pub struct GPartialBlockTemplate86;
#[must_use]
pub struct GPartialBlockTemplate87;
#[must_use]
pub struct GPartialBlockTemplate88;
#[must_use]
pub struct GPartialBlockTemplate89;
#[must_use]
pub struct GPartialBlockTemplate90;
#[must_use]
pub struct GPartialBlockTemplate91;
impl<Partial, After> Template<GPartialBlockTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GPartialBlockTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GPartialBlockTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GPartialBlockTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_partial_block()
    ->
        (Template<GPartialBlockTemplate20, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GPartialBlockTemplate20, (),
            ()> { r#type: GPartialBlockTemplate20, partial: (), after: () },
        async gen {})
}
const _g_partial_block_FORCE_RECOMPILE: &'static str =
    "<span>hello{{#>g_partial_block_partial}}childrenstart{{test}}childrenend{{/g_partial_block_partial}}world</span>";
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate0;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate1;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate2;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate3;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate4;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate5;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate6;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate7;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate8;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate9;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate10;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate11;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate12;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate13;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate14;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate15;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate16;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate17;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate18;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate19;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate20;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate21;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate22;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate23;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate24;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate25;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate26;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate27;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate28;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate29;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate30;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate31;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate32;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate33;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate34;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate35;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate36;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate37;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate38;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate39;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate40;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate41;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate42;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate43;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate44;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate45;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate46;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate47;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate48;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate49;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate50;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate51;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate52;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate53;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate54;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate55;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate56;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate57;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate58;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate59;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate60;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate61;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate62;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate63;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate64;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate65;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate66;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate67;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate68;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate69;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate70;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate71;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate72;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate73;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate74;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate75;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate76;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate77;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate78;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate79;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate80;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate81;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate82;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate83;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate84;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate85;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate86;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate87;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate88;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate89;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate90;
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate91;
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_template_only_partial_block_multiple()
    ->
        (Template<GTemplateOnlyPartialBlockMultipleTemplate21, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GTemplateOnlyPartialBlockMultipleTemplate21, (),
            ()> {
            r#type: GTemplateOnlyPartialBlockMultipleTemplate21,
            partial: (),
            after: (),
        }, async gen {})
}
const _g_template_only_partial_block_multiple_FORCE_RECOMPILE: &'static str =
    "{{#>g_only_partial_block}}{{/g_only_partial_block}}{{#>g_only_partial_block}}{{/g_only_partial_block}}";
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate0;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate1;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate2;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate3;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate4;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate5;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate6;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate7;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate8;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate9;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate10;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate11;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate12;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate13;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate14;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate15;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate16;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate17;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate18;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate19;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate20;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate21;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate22;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate23;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate24;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate25;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate26;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate27;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate28;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate29;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate30;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate31;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate32;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate33;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate34;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate35;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate36;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate37;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate38;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate39;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate40;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate41;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate42;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate43;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate44;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate45;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate46;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate47;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate48;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate49;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate50;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate51;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate52;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate53;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate54;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate55;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate56;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate57;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate58;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate59;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate60;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate61;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate62;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate63;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate64;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate65;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate66;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate67;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate68;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate69;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate70;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate71;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate72;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate73;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate74;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate75;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate76;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate77;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate78;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate79;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate80;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate81;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate82;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate83;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate84;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate85;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate86;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate87;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate88;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate89;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate90;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate91;
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate1, Partial,
    After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate2, Partial,
    After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate3, Partial,
    After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate4, Partial,
    After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate5, Partial,
    After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate6, Partial,
    After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate7, Partial,
    After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate35, Partial,
    After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate8, Partial,
    After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate9, Partial,
    After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate9, Partial,
    After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate10, Partial,
    After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate10, Partial,
    After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate11, Partial,
    After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate11, Partial,
    After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate12, Partial,
    After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate41, Partial,
    After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate41, Partial,
    After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate13, Partial,
    After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate13, Partial,
    After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate14, Partial,
    After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate14, Partial,
    After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate15, Partial,
    After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate45, Partial,
    After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate45, Partial,
    After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate16, Partial,
    After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate47, Partial,
    After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate48, Partial,
    After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate47, Partial,
    After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate17, Partial,
    After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate50, Partial,
    After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate18, Partial,
    After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate57, Partial,
    After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate20, Partial,
    After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate60, Partial,
    After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate59, Partial,
    After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate21, Partial,
    After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate63, Partial,
    After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate22, Partial,
    After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, Partial,
    After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, Partial,
    After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, Partial,
    After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate23, Partial,
    After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate74, Partial,
    After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate24, Partial,
    After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate77, Partial,
    After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate76, Partial,
    After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate80, Partial,
    After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate79, Partial,
    After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate25, Partial,
    After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate84, Partial,
    After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate83, Partial,
    After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate26, Partial,
    After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate27, Partial,
    After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate89, Partial,
    After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate27, Partial,
    After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_template_only_partial_block_with_text_multiple()
    ->
        (Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate22, (),
        ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate22, (),
            ()> {
            r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate22,
            partial: (),
            after: (),
        }, async gen {})
}
const _g_template_only_partial_block_with_text_multiple_FORCE_RECOMPILE:
    &'static str =
    "{{#>g_only_partial_block}}test{{/g_only_partial_block}}{{#>g_only_partial_block}}test{{/g_only_partial_block}}";
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate0;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate1;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate2;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate3;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate4;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate5;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate6;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate7;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate8;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate9;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate10;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate11;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate12;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate13;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate14;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate15;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate16;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate17;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate18;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate19;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate20;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate21;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate22;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate23;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate24;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate25;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate26;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate27;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate28;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate29;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate30;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate31;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate32;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate33;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate34;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate35;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate36;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate37;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate38;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate39;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate40;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate41;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate42;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate43;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate44;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate45;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate46;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate47;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate48;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate49;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate50;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate51;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate52;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate53;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate54;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate55;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate56;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate57;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate58;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate59;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate60;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate61;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate62;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate63;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate64;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate65;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate66;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate67;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate68;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate69;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate70;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate71;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate72;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate73;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate74;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate75;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate76;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate77;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate78;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate79;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate80;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate81;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate82;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate83;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate84;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate85;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate86;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate87;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate88;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate89;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate90;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate91;
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_template_only_partial_block_with_text()
    ->
        (Template<GTemplateOnlyPartialBlockWithTextTemplate23, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GTemplateOnlyPartialBlockWithTextTemplate23, (),
            ()> {
            r#type: GTemplateOnlyPartialBlockWithTextTemplate23,
            partial: (),
            after: (),
        }, async gen {})
}
const _g_template_only_partial_block_with_text_FORCE_RECOMPILE: &'static str =
    "{{#>g_only_partial_block}}test{{/g_only_partial_block}}";
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate0;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate1;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate2;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate3;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate4;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate5;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate6;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate7;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate8;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate9;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate10;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate11;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate12;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate13;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate14;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate15;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate16;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate17;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate18;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate19;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate20;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate21;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate22;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate23;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate24;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate25;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate26;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate27;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate28;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate29;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate30;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate31;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate32;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate33;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate34;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate35;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate36;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate37;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate38;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate39;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate40;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate41;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate42;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate43;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate44;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate45;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate46;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate47;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate48;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate49;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate50;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate51;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate52;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate53;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate54;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate55;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate56;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate57;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate58;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate59;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate60;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate61;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate62;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate63;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate64;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate65;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate66;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate67;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate68;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate69;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate70;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate71;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate72;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate73;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate74;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate75;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate76;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate77;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate78;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate79;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate80;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate81;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate82;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate83;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate84;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate85;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate86;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate87;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate88;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate89;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate90;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate91;
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate1, Partial,
    After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate2, Partial,
    After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate3, Partial,
    After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate4, Partial,
    After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate5, Partial,
    After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate6, Partial,
    After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate7, Partial,
    After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate35, Partial,
    After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate8, Partial,
    After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate9, Partial,
    After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate9, Partial,
    After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate10, Partial,
    After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate10, Partial,
    After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate11, Partial,
    After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate11, Partial,
    After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate12, Partial,
    After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate41, Partial,
    After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate41, Partial,
    After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate13, Partial,
    After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate13, Partial,
    After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate14, Partial,
    After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate14, Partial,
    After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate15, Partial,
    After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate45, Partial,
    After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate45, Partial,
    After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate16, Partial,
    After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate47, Partial,
    After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate48, Partial,
    After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate47, Partial,
    After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate17, Partial,
    After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate50, Partial,
    After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate18, Partial,
    After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate57, Partial,
    After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate20, Partial,
    After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate60, Partial,
    After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate59, Partial,
    After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate21, Partial,
    After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate63, Partial,
    After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate22, Partial,
    After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate68, Partial,
    After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate67, Partial,
    After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate71, Partial,
    After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate23, Partial,
    After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate74, Partial,
    After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate24, Partial,
    After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77, Partial,
    After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76, Partial,
    After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80, Partial,
    After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79, Partial,
    After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate25, Partial,
    After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate84, Partial,
    After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate83, Partial,
    After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate26, Partial,
    After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate27, Partial,
    After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate89, Partial,
    After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate27, Partial,
    After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_template_only_partial_block_with_variable_multiple()
    ->
        (Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate24, (),
        ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate24, (),
            ()> {
            r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate24,
            partial: (),
            after: (),
        }, async gen {})
}
const _g_template_only_partial_block_with_variable_multiple_FORCE_RECOMPILE:
    &'static str =
    "<span>{{#>g_only_partial_block}}{{test}}{{/g_only_partial_block}}{{#>g_only_partial_block}}{{test}}{{/g_only_partial_block}}</span>";
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate0;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate1;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate2;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate3;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate4;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate5;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate6;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate7;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate8;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate9;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate10;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate11;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate12;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate13;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate14;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate15;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate16;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate17;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate18;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate19;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate20;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate21;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate22;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate23;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate24;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate25;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate26;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate27;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate28;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate29;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate30;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate31;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate32;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate33;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate34;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate35;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate36;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate37;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate38;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate39;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate40;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate41;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate42;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate43;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate44;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate45;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate46;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate47;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate48;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate49;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate50;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate51;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate52;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate53;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate54;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate55;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate56;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate57;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate58;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate59;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate60;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate61;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate62;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate63;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate64;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate65;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate66;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate67;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate68;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate69;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate70;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate71;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate72;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate73;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate74;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate75;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate76;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate77;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate78;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate79;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate80;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate81;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate82;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate83;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate84;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate85;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate86;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate87;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate88;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate89;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate90;
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate91;
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate35, Partial, After>
    {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate12, Partial, After>
    {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate15, Partial, After>
    {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate16, Partial, After>
    {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate48, Partial, After>
    {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate17, Partial, After>
    {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate50, Partial, After>
    {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate18, Partial, After>
    {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate57, Partial, After>
    {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate20, Partial, After>
    {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate60, Partial, After>
    {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate59, Partial, After>
    {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate21, Partial, After>
    {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate63, Partial, After>
    {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate22, Partial, After>
    {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate68, Partial, After>
    {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate67, Partial, After>
    {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate71, Partial, After>
    {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate23, Partial, After>
    {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate74, Partial, After>
    {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate24, Partial, After>
    {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate77, Partial, After>
    {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate76, Partial, After>
    {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate80, Partial, After>
    {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate79, Partial, After>
    {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate25, Partial, After>
    {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate84, Partial, After>
    {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate83, Partial, After>
    {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate26, Partial, After>
    {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate89, Partial, After>
    {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_template_only_partial_block_with_variable()
    ->
        (Template<GTemplateOnlyPartialBlockWithVariableTemplate25, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GTemplateOnlyPartialBlockWithVariableTemplate25, (),
            ()> {
            r#type: GTemplateOnlyPartialBlockWithVariableTemplate25,
            partial: (),
            after: (),
        }, async gen {})
}
const _g_template_only_partial_block_with_variable_FORCE_RECOMPILE:
    &'static str =
    "<span>{{#>g_only_partial_block}}{{test}}{{/g_only_partial_block}}</span>";
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate0;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate1;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate2;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate3;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate4;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate5;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate6;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate7;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate8;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate9;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate10;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate11;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate12;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate13;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate14;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate15;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate16;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate17;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate18;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate19;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate20;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate21;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate22;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate23;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate24;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate25;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate26;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate27;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate28;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate29;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate30;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate31;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate32;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate33;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate34;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate35;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate36;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate37;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate38;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate39;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate40;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate41;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate42;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate43;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate44;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate45;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate46;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate47;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate48;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate49;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate50;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate51;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate52;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate53;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate54;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate55;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate56;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate57;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate58;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate59;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate60;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate61;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate62;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate63;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate64;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate65;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate66;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate67;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate68;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate69;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate70;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate71;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate72;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate73;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate74;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate75;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate76;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate77;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate78;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate79;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate80;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate81;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate82;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate83;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate84;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate85;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate86;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate87;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate88;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate89;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate90;
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate91;
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_template_only_partial_block()
    ->
        (Template<GTemplateOnlyPartialBlockTemplate26, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GTemplateOnlyPartialBlockTemplate26, (),
            ()> {
            r#type: GTemplateOnlyPartialBlockTemplate26,
            partial: (),
            after: (),
        }, async gen {})
}
const _g_template_only_partial_block_FORCE_RECOMPILE: &'static str =
    "{{#>g_only_partial_block}}{{/g_only_partial_block}}";
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate0;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate1;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate2;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate3;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate4;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate5;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate6;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate7;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate8;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate9;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate10;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate11;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate12;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate13;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate14;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate15;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate16;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate17;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate18;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate19;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate20;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate21;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate22;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate23;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate24;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate25;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate26;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate27;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate28;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate29;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate30;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate31;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate32;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate33;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate34;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate35;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate36;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate37;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate38;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate39;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate40;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate41;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate42;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate43;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate44;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate45;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate46;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate47;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate48;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate49;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate50;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate51;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate52;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate53;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate54;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate55;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate56;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate57;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate58;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate59;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate60;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate61;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate62;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate63;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate64;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate65;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate66;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate67;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate68;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate69;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate70;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate71;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate72;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate73;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate74;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate75;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate76;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate77;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate78;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate79;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate80;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate81;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate82;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate83;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate84;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate85;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate86;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate87;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate88;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate89;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate90;
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate91;
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate1, Partial, After>
    {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate2, Partial, After>
    {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate3, Partial, After>
    {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate4, Partial, After>
    {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate5, Partial, After>
    {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate6, Partial, After>
    {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate7, Partial, After>
    {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate35, Partial, After>
    {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate8, Partial, After>
    {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate9, Partial, After>
    {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate9, Partial, After>
    {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate12, Partial, After>
    {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate15, Partial, After>
    {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate16, Partial, After>
    {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate48, Partial, After>
    {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate17, Partial, After>
    {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate50, Partial, After>
    {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate18, Partial, After>
    {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<FEachTwoVariablesHtmlTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<FEachTwoVariablesHtmlTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate57, Partial, After>
    {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate20, Partial, After>
    {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate60, Partial, After>
    {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate59, Partial, After>
    {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate21, Partial, After>
    {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate63, Partial, After>
    {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate22, Partial, After>
    {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate68, Partial, After>
    {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate67, Partial, After>
    {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate71, Partial, After>
    {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate23, Partial, After>
    {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate74, Partial, After>
    {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate24, Partial, After>
    {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate77, Partial, After>
    {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate76, Partial, After>
    {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate80, Partial, After>
    {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate79, Partial, After>
    {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate25, Partial, After>
    {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate84, Partial, After>
    {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate83, Partial, After>
    {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate26, Partial, After>
    {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate89, Partial, After>
    {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<FEachTwoVariablesHtmlTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn f_each_two_variables_html()
    ->
        (Template<FEachTwoVariablesHtmlTemplate27, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<FEachTwoVariablesHtmlTemplate27, (),
            ()> {
            r#type: FEachTwoVariablesHtmlTemplate27,
            partial: (),
            after: (),
        }, async gen {})
}
const _f_each_two_variables_html_FORCE_RECOMPILE: &'static str =
    "{{#each articles}}\n    <li>{{title}}</li>\n    <li>{{content}}</li>\n{{/each}}";
#[must_use]
pub struct GOnlyPartialBlockTemplate0;
#[must_use]
pub struct GOnlyPartialBlockTemplate1;
#[must_use]
pub struct GOnlyPartialBlockTemplate2;
#[must_use]
pub struct GOnlyPartialBlockTemplate3;
#[must_use]
pub struct GOnlyPartialBlockTemplate4;
#[must_use]
pub struct GOnlyPartialBlockTemplate5;
#[must_use]
pub struct GOnlyPartialBlockTemplate6;
#[must_use]
pub struct GOnlyPartialBlockTemplate7;
#[must_use]
pub struct GOnlyPartialBlockTemplate8;
#[must_use]
pub struct GOnlyPartialBlockTemplate9;
#[must_use]
pub struct GOnlyPartialBlockTemplate10;
#[must_use]
pub struct GOnlyPartialBlockTemplate11;
#[must_use]
pub struct GOnlyPartialBlockTemplate12;
#[must_use]
pub struct GOnlyPartialBlockTemplate13;
#[must_use]
pub struct GOnlyPartialBlockTemplate14;
#[must_use]
pub struct GOnlyPartialBlockTemplate15;
#[must_use]
pub struct GOnlyPartialBlockTemplate16;
#[must_use]
pub struct GOnlyPartialBlockTemplate17;
#[must_use]
pub struct GOnlyPartialBlockTemplate18;
#[must_use]
pub struct GOnlyPartialBlockTemplate19;
#[must_use]
pub struct GOnlyPartialBlockTemplate20;
#[must_use]
pub struct GOnlyPartialBlockTemplate21;
#[must_use]
pub struct GOnlyPartialBlockTemplate22;
#[must_use]
pub struct GOnlyPartialBlockTemplate23;
#[must_use]
pub struct GOnlyPartialBlockTemplate24;
#[must_use]
pub struct GOnlyPartialBlockTemplate25;
#[must_use]
pub struct GOnlyPartialBlockTemplate26;
#[must_use]
pub struct GOnlyPartialBlockTemplate27;
#[must_use]
pub struct GOnlyPartialBlockTemplate28;
#[must_use]
pub struct GOnlyPartialBlockTemplate29;
#[must_use]
pub struct GOnlyPartialBlockTemplate30;
#[must_use]
pub struct GOnlyPartialBlockTemplate31;
#[must_use]
pub struct GOnlyPartialBlockTemplate32;
#[must_use]
pub struct GOnlyPartialBlockTemplate33;
#[must_use]
pub struct GOnlyPartialBlockTemplate34;
#[must_use]
pub struct GOnlyPartialBlockTemplate35;
#[must_use]
pub struct GOnlyPartialBlockTemplate36;
#[must_use]
pub struct GOnlyPartialBlockTemplate37;
#[must_use]
pub struct GOnlyPartialBlockTemplate38;
#[must_use]
pub struct GOnlyPartialBlockTemplate39;
#[must_use]
pub struct GOnlyPartialBlockTemplate40;
#[must_use]
pub struct GOnlyPartialBlockTemplate41;
#[must_use]
pub struct GOnlyPartialBlockTemplate42;
#[must_use]
pub struct GOnlyPartialBlockTemplate43;
#[must_use]
pub struct GOnlyPartialBlockTemplate44;
#[must_use]
pub struct GOnlyPartialBlockTemplate45;
#[must_use]
pub struct GOnlyPartialBlockTemplate46;
#[must_use]
pub struct GOnlyPartialBlockTemplate47;
#[must_use]
pub struct GOnlyPartialBlockTemplate48;
#[must_use]
pub struct GOnlyPartialBlockTemplate49;
#[must_use]
pub struct GOnlyPartialBlockTemplate50;
#[must_use]
pub struct GOnlyPartialBlockTemplate51;
#[must_use]
pub struct GOnlyPartialBlockTemplate52;
#[must_use]
pub struct GOnlyPartialBlockTemplate53;
#[must_use]
pub struct GOnlyPartialBlockTemplate54;
#[must_use]
pub struct GOnlyPartialBlockTemplate55;
#[must_use]
pub struct GOnlyPartialBlockTemplate56;
#[must_use]
pub struct GOnlyPartialBlockTemplate57;
#[must_use]
pub struct GOnlyPartialBlockTemplate58;
#[must_use]
pub struct GOnlyPartialBlockTemplate59;
#[must_use]
pub struct GOnlyPartialBlockTemplate60;
#[must_use]
pub struct GOnlyPartialBlockTemplate61;
#[must_use]
pub struct GOnlyPartialBlockTemplate62;
#[must_use]
pub struct GOnlyPartialBlockTemplate63;
#[must_use]
pub struct GOnlyPartialBlockTemplate64;
#[must_use]
pub struct GOnlyPartialBlockTemplate65;
#[must_use]
pub struct GOnlyPartialBlockTemplate66;
#[must_use]
pub struct GOnlyPartialBlockTemplate67;
#[must_use]
pub struct GOnlyPartialBlockTemplate68;
#[must_use]
pub struct GOnlyPartialBlockTemplate69;
#[must_use]
pub struct GOnlyPartialBlockTemplate70;
#[must_use]
pub struct GOnlyPartialBlockTemplate71;
#[must_use]
pub struct GOnlyPartialBlockTemplate72;
#[must_use]
pub struct GOnlyPartialBlockTemplate73;
#[must_use]
pub struct GOnlyPartialBlockTemplate74;
#[must_use]
pub struct GOnlyPartialBlockTemplate75;
#[must_use]
pub struct GOnlyPartialBlockTemplate76;
#[must_use]
pub struct GOnlyPartialBlockTemplate77;
#[must_use]
pub struct GOnlyPartialBlockTemplate78;
#[must_use]
pub struct GOnlyPartialBlockTemplate79;
#[must_use]
pub struct GOnlyPartialBlockTemplate80;
#[must_use]
pub struct GOnlyPartialBlockTemplate81;
#[must_use]
pub struct GOnlyPartialBlockTemplate82;
#[must_use]
pub struct GOnlyPartialBlockTemplate83;
#[must_use]
pub struct GOnlyPartialBlockTemplate84;
#[must_use]
pub struct GOnlyPartialBlockTemplate85;
#[must_use]
pub struct GOnlyPartialBlockTemplate86;
#[must_use]
pub struct GOnlyPartialBlockTemplate87;
#[must_use]
pub struct GOnlyPartialBlockTemplate88;
#[must_use]
pub struct GOnlyPartialBlockTemplate89;
#[must_use]
pub struct GOnlyPartialBlockTemplate90;
#[must_use]
pub struct GOnlyPartialBlockTemplate91;
impl<Partial, After> Template<GOnlyPartialBlockTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<!DOCTYPE html>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GOnlyPartialBlockTemplate19,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate56, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate56, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: (),
                    after: self.after,
                },
            },
            async gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GOnlyPartialBlockTemplate56,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GPartialBlockPartialTemplate57, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GPartialBlockPartialTemplate57, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57, (),
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            async gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            async gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, PartialPartial, PartialAfter, After>
    Template<GOnlyPartialBlockTemplate28,
    Template<Partial, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<Partial, (),
            Template<GOnlyPartialBlockTemplate91, (), After>>,
            impl ::std::async_iter::AsyncIterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<Partial, (),
                Template<GOnlyPartialBlockTemplate91, (),
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91, (),
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: (),
                    after: self.after,
                },
            }, async gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_only_partial_block()
    ->
        (Template<GOnlyPartialBlockTemplate28, (), ()>,
        impl ::std::async_iter::AsyncIterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GOnlyPartialBlockTemplate28, (),
            ()> {
            r#type: GOnlyPartialBlockTemplate28,
            partial: (),
            after: (),
        }, async gen {})
}
const _g_only_partial_block_FORCE_RECOMPILE: &'static str =
    "{{>@partial-block}}";
pub async gen fn test() -> Cow<'static, str> {
    let template =
        {
            let expr = g_partial_block();
            let ret = expr.0;
            let mut iter =
                ::core::pin::Pin::<&mut _> { pointer: &mut { expr.1 } };
            while let Some(v) =
                    ::zero_cost_templating::async_iterator_extension::AsyncIterExt::next(&mut iter).await
                {
                yield v;
            }
            ret
        };
    let template =
        {
            let expr = template.next();
            let ret = expr.0;
            let mut iter =
                ::core::pin::Pin::<&mut _> { pointer: &mut { expr.1 } };
            while let Some(v) =
                    ::zero_cost_templating::async_iterator_extension::AsyncIterExt::next(&mut iter).await
                {
                yield v;
            }
            ret
        };
    let template =
        {
            let expr = template.before("test");
            let ret = expr.0;
            let mut iter =
                ::core::pin::Pin::<&mut _> { pointer: &mut { expr.1 } };
            while let Some(v) =
                    ::zero_cost_templating::async_iterator_extension::AsyncIterExt::next(&mut iter).await
                {
                yield v;
            }
            ret
        };
    let template =
        {
            let expr = template.test("test");
            let ret = expr.0;
            let mut iter =
                ::core::pin::Pin::<&mut _> { pointer: &mut { expr.1 } };
            while let Some(v) =
                    ::zero_cost_templating::async_iterator_extension::AsyncIterExt::next(&mut iter).await
                {
                yield v;
            }
            ret
        };
}
pub fn main() {}
