#![feature(print_internals)] #![feature(unsafe_pin_internals)]
#![feature(prelude_import)]
#![feature(async_closure, async_iterator, coroutines, gen_blocks, noop_waker)]
#[prelude_import]
use std::prelude::rust_2024::*;
#[macro_use]
extern crate std;

extern crate alloc;

use std::borrow::Cow;

use zero_cost_templating::{template_stream, yields};

// https://github.com/dtolnay/cargo-expand

// export RUSTFLAGS="-Z proc-macro-backtrace"
// cargo build
// cargo expand --package zero-cost-templating --bin simple
// echo '#![feature(print_internals)] #![feature(unsafe_pin_internals)]' > zero-cost-templating/src/bin/test.rs
// cargo expand --package zero-cost-templating --bin simple >> zero-cost-templating/src/bin/test.rs
// cargo run --release --bin simple

// RUSTFLAGS="-Zprint-type-sizes" cargo run --release --bin test > type-sizes.txt
// search for
// `{gen fn body@
// `{gen block@
// `{async gen fn body@
// `{async gen block@
// `{static coroutine@

// Don't use Cow because it is so big?
#[must_use]
pub struct Template<Type, Partial, After> {
    r#type: Type,
    partial: Partial,
    after: After,
}
#[automatically_derived]
impl<Type: ::core::clone::Clone, Partial: ::core::clone::Clone,
    After: ::core::clone::Clone> ::core::clone::Clone for
    Template<Type, Partial, After> {
    #[inline]
    fn clone(&self) -> Template<Type, Partial, After> {
        Template {
            r#type: ::core::clone::Clone::clone(&self.r#type),
            partial: ::core::clone::Clone::clone(&self.partial),
            after: ::core::clone::Clone::clone(&self.after),
        }
    }
}
#[automatically_derived]
impl<Type: ::core::marker::Copy, Partial: ::core::marker::Copy,
    After: ::core::marker::Copy> ::core::marker::Copy for
    Template<Type, Partial, After> {
}
#[must_use]
pub struct AEmptyTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate0 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate0 { }
#[must_use]
pub struct AEmptyTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate1 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate1 { }
#[must_use]
pub struct AEmptyTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate2 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate2 { }
#[must_use]
pub struct AEmptyTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate3 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate3 { }
#[must_use]
pub struct AEmptyTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate4 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate4 { }
#[must_use]
pub struct AEmptyTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate5 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate5 { }
#[must_use]
pub struct AEmptyTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate6 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate6 { }
#[must_use]
pub struct AEmptyTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate7 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate7 { }
#[must_use]
pub struct AEmptyTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate8 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate8 { }
#[must_use]
pub struct AEmptyTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate9 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate9 { }
#[must_use]
pub struct AEmptyTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate10 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate10 { }
#[must_use]
pub struct AEmptyTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate11 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate11 { }
#[must_use]
pub struct AEmptyTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate12 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate12 { }
#[must_use]
pub struct AEmptyTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate13 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate13 { }
#[must_use]
pub struct AEmptyTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate14 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate14 { }
#[must_use]
pub struct AEmptyTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate15 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate15 { }
#[must_use]
pub struct AEmptyTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate16 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate16 { }
#[must_use]
pub struct AEmptyTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate17 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate17 { }
#[must_use]
pub struct AEmptyTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate18 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate18 { }
#[must_use]
pub struct AEmptyTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate19 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate19 { }
#[must_use]
pub struct AEmptyTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate20 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate20 { }
#[must_use]
pub struct AEmptyTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate21 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate21 { }
#[must_use]
pub struct AEmptyTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate22 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate22 { }
#[must_use]
pub struct AEmptyTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate23 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate23 { }
#[must_use]
pub struct AEmptyTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate24 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate24 { }
#[must_use]
pub struct AEmptyTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate25 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate25 { }
#[must_use]
pub struct AEmptyTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate26 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate26 { }
#[must_use]
pub struct AEmptyTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate27 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate27 { }
#[must_use]
pub struct AEmptyTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate28 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate28 { }
#[must_use]
pub struct AEmptyTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate29 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate29 { }
#[must_use]
pub struct AEmptyTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate30 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate30 { }
#[must_use]
pub struct AEmptyTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate31 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate31 { }
#[must_use]
pub struct AEmptyTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate32 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate32 { }
#[must_use]
pub struct AEmptyTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate33 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate33 { }
#[must_use]
pub struct AEmptyTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate34 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate34 { }
#[must_use]
pub struct AEmptyTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate35 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate35 { }
#[must_use]
pub struct AEmptyTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate36 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate36 { }
#[must_use]
pub struct AEmptyTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate37 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate37 { }
#[must_use]
pub struct AEmptyTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate38 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate38 { }
#[must_use]
pub struct AEmptyTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate39 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate39 { }
#[must_use]
pub struct AEmptyTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate40 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate40 { }
#[must_use]
pub struct AEmptyTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate41 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate41 { }
#[must_use]
pub struct AEmptyTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate42 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate42 { }
#[must_use]
pub struct AEmptyTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate43 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate43 { }
#[must_use]
pub struct AEmptyTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate44 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate44 { }
#[must_use]
pub struct AEmptyTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate45 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate45 { }
#[must_use]
pub struct AEmptyTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate46 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate46 { }
#[must_use]
pub struct AEmptyTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate47 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate47 { }
#[must_use]
pub struct AEmptyTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate48 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate48 { }
#[must_use]
pub struct AEmptyTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate49 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate49 { }
#[must_use]
pub struct AEmptyTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate50 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate50 { }
#[must_use]
pub struct AEmptyTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate51 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate51 { }
#[must_use]
pub struct AEmptyTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate52 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate52 { }
#[must_use]
pub struct AEmptyTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate53 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate53 { }
#[must_use]
pub struct AEmptyTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate54 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate54 { }
#[must_use]
pub struct AEmptyTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate55 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate55 { }
#[must_use]
pub struct AEmptyTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate56 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate56 { }
#[must_use]
pub struct AEmptyTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate57 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate57 { }
#[must_use]
pub struct AEmptyTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate58 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate58 { }
#[must_use]
pub struct AEmptyTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate59 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate59 { }
#[must_use]
pub struct AEmptyTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate60 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate60 { }
#[must_use]
pub struct AEmptyTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate61 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate61 { }
#[must_use]
pub struct AEmptyTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate62 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate62 { }
#[must_use]
pub struct AEmptyTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate63 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate63 { }
#[must_use]
pub struct AEmptyTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate64 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate64 { }
#[must_use]
pub struct AEmptyTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate65 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate65 { }
#[must_use]
pub struct AEmptyTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate66 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate66 { }
#[must_use]
pub struct AEmptyTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate67 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate67 { }
#[must_use]
pub struct AEmptyTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate68 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate68 { }
#[must_use]
pub struct AEmptyTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate69 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate69 { }
#[must_use]
pub struct AEmptyTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate70 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate70 { }
#[must_use]
pub struct AEmptyTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate71 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate71 { }
#[must_use]
pub struct AEmptyTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate72 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate72 { }
#[must_use]
pub struct AEmptyTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate73 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate73 { }
#[must_use]
pub struct AEmptyTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate74 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate74 { }
#[must_use]
pub struct AEmptyTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate75 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate75 { }
#[must_use]
pub struct AEmptyTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate76 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate76 { }
#[must_use]
pub struct AEmptyTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate77 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate77 { }
#[must_use]
pub struct AEmptyTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate78 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate78 { }
#[must_use]
pub struct AEmptyTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate79 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate79 { }
#[must_use]
pub struct AEmptyTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate80 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate80 { }
#[must_use]
pub struct AEmptyTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate81 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate81 { }
#[must_use]
pub struct AEmptyTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate82 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate82 { }
#[must_use]
pub struct AEmptyTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate83 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate83 { }
#[must_use]
pub struct AEmptyTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate84 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate84 { }
#[must_use]
pub struct AEmptyTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate85 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate85 { }
#[must_use]
pub struct AEmptyTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate86 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate86 { }
#[must_use]
pub struct AEmptyTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate87 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate87 { }
#[must_use]
pub struct AEmptyTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate88 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate88 { }
#[must_use]
pub struct AEmptyTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate89 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate89 { }
#[must_use]
pub struct AEmptyTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate90 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate90 { }
#[must_use]
pub struct AEmptyTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for AEmptyTemplate91 {
    #[inline]
    fn clone(&self) -> AEmptyTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for AEmptyTemplate91 { }
impl<Partial, After> Template<AEmptyTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<AEmptyTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<AEmptyTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<AEmptyTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<AEmptyTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<AEmptyTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<AEmptyTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn a_empty()
    ->
        ((),
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    ((), gen {})
}
const _a_empty_FORCE_RECOMPILE: &'static str = "";
#[must_use]
pub struct BTextTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate0 {
    #[inline]
    fn clone(&self) -> BTextTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate0 { }
#[must_use]
pub struct BTextTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate1 {
    #[inline]
    fn clone(&self) -> BTextTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate1 { }
#[must_use]
pub struct BTextTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate2 {
    #[inline]
    fn clone(&self) -> BTextTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate2 { }
#[must_use]
pub struct BTextTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate3 {
    #[inline]
    fn clone(&self) -> BTextTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate3 { }
#[must_use]
pub struct BTextTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate4 {
    #[inline]
    fn clone(&self) -> BTextTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate4 { }
#[must_use]
pub struct BTextTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate5 {
    #[inline]
    fn clone(&self) -> BTextTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate5 { }
#[must_use]
pub struct BTextTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate6 {
    #[inline]
    fn clone(&self) -> BTextTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate6 { }
#[must_use]
pub struct BTextTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate7 {
    #[inline]
    fn clone(&self) -> BTextTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate7 { }
#[must_use]
pub struct BTextTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate8 {
    #[inline]
    fn clone(&self) -> BTextTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate8 { }
#[must_use]
pub struct BTextTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate9 {
    #[inline]
    fn clone(&self) -> BTextTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate9 { }
#[must_use]
pub struct BTextTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate10 {
    #[inline]
    fn clone(&self) -> BTextTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate10 { }
#[must_use]
pub struct BTextTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate11 {
    #[inline]
    fn clone(&self) -> BTextTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate11 { }
#[must_use]
pub struct BTextTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate12 {
    #[inline]
    fn clone(&self) -> BTextTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate12 { }
#[must_use]
pub struct BTextTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate13 {
    #[inline]
    fn clone(&self) -> BTextTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate13 { }
#[must_use]
pub struct BTextTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate14 {
    #[inline]
    fn clone(&self) -> BTextTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate14 { }
#[must_use]
pub struct BTextTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate15 {
    #[inline]
    fn clone(&self) -> BTextTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate15 { }
#[must_use]
pub struct BTextTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate16 {
    #[inline]
    fn clone(&self) -> BTextTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate16 { }
#[must_use]
pub struct BTextTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate17 {
    #[inline]
    fn clone(&self) -> BTextTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate17 { }
#[must_use]
pub struct BTextTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate18 {
    #[inline]
    fn clone(&self) -> BTextTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate18 { }
#[must_use]
pub struct BTextTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate19 {
    #[inline]
    fn clone(&self) -> BTextTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate19 { }
#[must_use]
pub struct BTextTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate20 {
    #[inline]
    fn clone(&self) -> BTextTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate20 { }
#[must_use]
pub struct BTextTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate21 {
    #[inline]
    fn clone(&self) -> BTextTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate21 { }
#[must_use]
pub struct BTextTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate22 {
    #[inline]
    fn clone(&self) -> BTextTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate22 { }
#[must_use]
pub struct BTextTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate23 {
    #[inline]
    fn clone(&self) -> BTextTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate23 { }
#[must_use]
pub struct BTextTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate24 {
    #[inline]
    fn clone(&self) -> BTextTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate24 { }
#[must_use]
pub struct BTextTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate25 {
    #[inline]
    fn clone(&self) -> BTextTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate25 { }
#[must_use]
pub struct BTextTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate26 {
    #[inline]
    fn clone(&self) -> BTextTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate26 { }
#[must_use]
pub struct BTextTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate27 {
    #[inline]
    fn clone(&self) -> BTextTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate27 { }
#[must_use]
pub struct BTextTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate28 {
    #[inline]
    fn clone(&self) -> BTextTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate28 { }
#[must_use]
pub struct BTextTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate29 {
    #[inline]
    fn clone(&self) -> BTextTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate29 { }
#[must_use]
pub struct BTextTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate30 {
    #[inline]
    fn clone(&self) -> BTextTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate30 { }
#[must_use]
pub struct BTextTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate31 {
    #[inline]
    fn clone(&self) -> BTextTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate31 { }
#[must_use]
pub struct BTextTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate32 {
    #[inline]
    fn clone(&self) -> BTextTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate32 { }
#[must_use]
pub struct BTextTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate33 {
    #[inline]
    fn clone(&self) -> BTextTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate33 { }
#[must_use]
pub struct BTextTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate34 {
    #[inline]
    fn clone(&self) -> BTextTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate34 { }
#[must_use]
pub struct BTextTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate35 {
    #[inline]
    fn clone(&self) -> BTextTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate35 { }
#[must_use]
pub struct BTextTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate36 {
    #[inline]
    fn clone(&self) -> BTextTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate36 { }
#[must_use]
pub struct BTextTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate37 {
    #[inline]
    fn clone(&self) -> BTextTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate37 { }
#[must_use]
pub struct BTextTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate38 {
    #[inline]
    fn clone(&self) -> BTextTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate38 { }
#[must_use]
pub struct BTextTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate39 {
    #[inline]
    fn clone(&self) -> BTextTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate39 { }
#[must_use]
pub struct BTextTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate40 {
    #[inline]
    fn clone(&self) -> BTextTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate40 { }
#[must_use]
pub struct BTextTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate41 {
    #[inline]
    fn clone(&self) -> BTextTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate41 { }
#[must_use]
pub struct BTextTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate42 {
    #[inline]
    fn clone(&self) -> BTextTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate42 { }
#[must_use]
pub struct BTextTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate43 {
    #[inline]
    fn clone(&self) -> BTextTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate43 { }
#[must_use]
pub struct BTextTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate44 {
    #[inline]
    fn clone(&self) -> BTextTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate44 { }
#[must_use]
pub struct BTextTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate45 {
    #[inline]
    fn clone(&self) -> BTextTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate45 { }
#[must_use]
pub struct BTextTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate46 {
    #[inline]
    fn clone(&self) -> BTextTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate46 { }
#[must_use]
pub struct BTextTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate47 {
    #[inline]
    fn clone(&self) -> BTextTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate47 { }
#[must_use]
pub struct BTextTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate48 {
    #[inline]
    fn clone(&self) -> BTextTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate48 { }
#[must_use]
pub struct BTextTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate49 {
    #[inline]
    fn clone(&self) -> BTextTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate49 { }
#[must_use]
pub struct BTextTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate50 {
    #[inline]
    fn clone(&self) -> BTextTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate50 { }
#[must_use]
pub struct BTextTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate51 {
    #[inline]
    fn clone(&self) -> BTextTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate51 { }
#[must_use]
pub struct BTextTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate52 {
    #[inline]
    fn clone(&self) -> BTextTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate52 { }
#[must_use]
pub struct BTextTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate53 {
    #[inline]
    fn clone(&self) -> BTextTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate53 { }
#[must_use]
pub struct BTextTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate54 {
    #[inline]
    fn clone(&self) -> BTextTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate54 { }
#[must_use]
pub struct BTextTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate55 {
    #[inline]
    fn clone(&self) -> BTextTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate55 { }
#[must_use]
pub struct BTextTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate56 {
    #[inline]
    fn clone(&self) -> BTextTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate56 { }
#[must_use]
pub struct BTextTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate57 {
    #[inline]
    fn clone(&self) -> BTextTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate57 { }
#[must_use]
pub struct BTextTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate58 {
    #[inline]
    fn clone(&self) -> BTextTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate58 { }
#[must_use]
pub struct BTextTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate59 {
    #[inline]
    fn clone(&self) -> BTextTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate59 { }
#[must_use]
pub struct BTextTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate60 {
    #[inline]
    fn clone(&self) -> BTextTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate60 { }
#[must_use]
pub struct BTextTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate61 {
    #[inline]
    fn clone(&self) -> BTextTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate61 { }
#[must_use]
pub struct BTextTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate62 {
    #[inline]
    fn clone(&self) -> BTextTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate62 { }
#[must_use]
pub struct BTextTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate63 {
    #[inline]
    fn clone(&self) -> BTextTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate63 { }
#[must_use]
pub struct BTextTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate64 {
    #[inline]
    fn clone(&self) -> BTextTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate64 { }
#[must_use]
pub struct BTextTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate65 {
    #[inline]
    fn clone(&self) -> BTextTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate65 { }
#[must_use]
pub struct BTextTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate66 {
    #[inline]
    fn clone(&self) -> BTextTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate66 { }
#[must_use]
pub struct BTextTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate67 {
    #[inline]
    fn clone(&self) -> BTextTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate67 { }
#[must_use]
pub struct BTextTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate68 {
    #[inline]
    fn clone(&self) -> BTextTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate68 { }
#[must_use]
pub struct BTextTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate69 {
    #[inline]
    fn clone(&self) -> BTextTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate69 { }
#[must_use]
pub struct BTextTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate70 {
    #[inline]
    fn clone(&self) -> BTextTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate70 { }
#[must_use]
pub struct BTextTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate71 {
    #[inline]
    fn clone(&self) -> BTextTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate71 { }
#[must_use]
pub struct BTextTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate72 {
    #[inline]
    fn clone(&self) -> BTextTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate72 { }
#[must_use]
pub struct BTextTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate73 {
    #[inline]
    fn clone(&self) -> BTextTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate73 { }
#[must_use]
pub struct BTextTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate74 {
    #[inline]
    fn clone(&self) -> BTextTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate74 { }
#[must_use]
pub struct BTextTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate75 {
    #[inline]
    fn clone(&self) -> BTextTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate75 { }
#[must_use]
pub struct BTextTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate76 {
    #[inline]
    fn clone(&self) -> BTextTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate76 { }
#[must_use]
pub struct BTextTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate77 {
    #[inline]
    fn clone(&self) -> BTextTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate77 { }
#[must_use]
pub struct BTextTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate78 {
    #[inline]
    fn clone(&self) -> BTextTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate78 { }
#[must_use]
pub struct BTextTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate79 {
    #[inline]
    fn clone(&self) -> BTextTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate79 { }
#[must_use]
pub struct BTextTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate80 {
    #[inline]
    fn clone(&self) -> BTextTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate80 { }
#[must_use]
pub struct BTextTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate81 {
    #[inline]
    fn clone(&self) -> BTextTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate81 { }
#[must_use]
pub struct BTextTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate82 {
    #[inline]
    fn clone(&self) -> BTextTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate82 { }
#[must_use]
pub struct BTextTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate83 {
    #[inline]
    fn clone(&self) -> BTextTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate83 { }
#[must_use]
pub struct BTextTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate84 {
    #[inline]
    fn clone(&self) -> BTextTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate84 { }
#[must_use]
pub struct BTextTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate85 {
    #[inline]
    fn clone(&self) -> BTextTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate85 { }
#[must_use]
pub struct BTextTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate86 {
    #[inline]
    fn clone(&self) -> BTextTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate86 { }
#[must_use]
pub struct BTextTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate87 {
    #[inline]
    fn clone(&self) -> BTextTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate87 { }
#[must_use]
pub struct BTextTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate88 {
    #[inline]
    fn clone(&self) -> BTextTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate88 { }
#[must_use]
pub struct BTextTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate89 {
    #[inline]
    fn clone(&self) -> BTextTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate89 { }
#[must_use]
pub struct BTextTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate90 {
    #[inline]
    fn clone(&self) -> BTextTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate90 { }
#[must_use]
pub struct BTextTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for BTextTemplate91 {
    #[inline]
    fn clone(&self) -> BTextTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for BTextTemplate91 { }
impl<Partial, After> Template<BTextTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<BTextTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<BTextTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<BTextTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<BTextTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<BTextTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<BTextTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<BTextTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<BTextTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<BTextTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<BTextTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<BTextTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<BTextTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<BTextTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<BTextTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<BTextTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<BTextTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<BTextTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<BTextTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<BTextTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<BTextTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<BTextTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<BTextTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<BTextTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<BTextTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<BTextTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<BTextTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<BTextTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<BTextTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<BTextTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn b_text()
    ->
        (Template<BTextTemplate1, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<BTextTemplate1, (),
            ()> { r#type: BTextTemplate1, partial: (), after: () }, gen {})
}
const _b_text_FORCE_RECOMPILE: &'static str = "hello";
#[must_use]
pub struct CElementWithAttributeTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate0 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate0 { }
#[must_use]
pub struct CElementWithAttributeTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate1 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate1 { }
#[must_use]
pub struct CElementWithAttributeTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate2 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate2 { }
#[must_use]
pub struct CElementWithAttributeTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate3 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate3 { }
#[must_use]
pub struct CElementWithAttributeTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate4 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate4 { }
#[must_use]
pub struct CElementWithAttributeTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate5 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate5 { }
#[must_use]
pub struct CElementWithAttributeTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate6 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate6 { }
#[must_use]
pub struct CElementWithAttributeTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate7 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate7 { }
#[must_use]
pub struct CElementWithAttributeTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate8 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate8 { }
#[must_use]
pub struct CElementWithAttributeTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate9 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate9 { }
#[must_use]
pub struct CElementWithAttributeTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate10 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate10 { }
#[must_use]
pub struct CElementWithAttributeTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate11 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate11 { }
#[must_use]
pub struct CElementWithAttributeTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate12 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate12 { }
#[must_use]
pub struct CElementWithAttributeTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate13 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate13 { }
#[must_use]
pub struct CElementWithAttributeTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate14 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate14 { }
#[must_use]
pub struct CElementWithAttributeTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate15 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate15 { }
#[must_use]
pub struct CElementWithAttributeTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate16 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate16 { }
#[must_use]
pub struct CElementWithAttributeTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate17 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate17 { }
#[must_use]
pub struct CElementWithAttributeTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate18 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate18 { }
#[must_use]
pub struct CElementWithAttributeTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate19 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate19 { }
#[must_use]
pub struct CElementWithAttributeTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate20 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate20 { }
#[must_use]
pub struct CElementWithAttributeTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate21 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate21 { }
#[must_use]
pub struct CElementWithAttributeTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate22 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate22 { }
#[must_use]
pub struct CElementWithAttributeTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate23 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate23 { }
#[must_use]
pub struct CElementWithAttributeTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate24 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate24 { }
#[must_use]
pub struct CElementWithAttributeTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate25 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate25 { }
#[must_use]
pub struct CElementWithAttributeTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate26 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate26 { }
#[must_use]
pub struct CElementWithAttributeTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate27 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate27 { }
#[must_use]
pub struct CElementWithAttributeTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate28 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate28 { }
#[must_use]
pub struct CElementWithAttributeTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate29 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate29 { }
#[must_use]
pub struct CElementWithAttributeTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate30 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate30 { }
#[must_use]
pub struct CElementWithAttributeTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate31 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate31 { }
#[must_use]
pub struct CElementWithAttributeTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate32 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate32 { }
#[must_use]
pub struct CElementWithAttributeTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate33 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate33 { }
#[must_use]
pub struct CElementWithAttributeTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate34 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate34 { }
#[must_use]
pub struct CElementWithAttributeTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate35 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate35 { }
#[must_use]
pub struct CElementWithAttributeTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate36 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate36 { }
#[must_use]
pub struct CElementWithAttributeTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate37 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate37 { }
#[must_use]
pub struct CElementWithAttributeTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate38 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate38 { }
#[must_use]
pub struct CElementWithAttributeTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate39 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate39 { }
#[must_use]
pub struct CElementWithAttributeTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate40 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate40 { }
#[must_use]
pub struct CElementWithAttributeTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate41 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate41 { }
#[must_use]
pub struct CElementWithAttributeTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate42 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate42 { }
#[must_use]
pub struct CElementWithAttributeTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate43 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate43 { }
#[must_use]
pub struct CElementWithAttributeTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate44 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate44 { }
#[must_use]
pub struct CElementWithAttributeTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate45 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate45 { }
#[must_use]
pub struct CElementWithAttributeTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate46 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate46 { }
#[must_use]
pub struct CElementWithAttributeTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate47 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate47 { }
#[must_use]
pub struct CElementWithAttributeTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate48 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate48 { }
#[must_use]
pub struct CElementWithAttributeTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate49 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate49 { }
#[must_use]
pub struct CElementWithAttributeTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate50 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate50 { }
#[must_use]
pub struct CElementWithAttributeTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate51 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate51 { }
#[must_use]
pub struct CElementWithAttributeTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate52 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate52 { }
#[must_use]
pub struct CElementWithAttributeTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate53 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate53 { }
#[must_use]
pub struct CElementWithAttributeTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate54 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate54 { }
#[must_use]
pub struct CElementWithAttributeTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate55 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate55 { }
#[must_use]
pub struct CElementWithAttributeTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate56 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate56 { }
#[must_use]
pub struct CElementWithAttributeTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate57 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate57 { }
#[must_use]
pub struct CElementWithAttributeTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate58 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate58 { }
#[must_use]
pub struct CElementWithAttributeTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate59 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate59 { }
#[must_use]
pub struct CElementWithAttributeTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate60 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate60 { }
#[must_use]
pub struct CElementWithAttributeTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate61 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate61 { }
#[must_use]
pub struct CElementWithAttributeTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate62 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate62 { }
#[must_use]
pub struct CElementWithAttributeTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate63 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate63 { }
#[must_use]
pub struct CElementWithAttributeTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate64 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate64 { }
#[must_use]
pub struct CElementWithAttributeTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate65 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate65 { }
#[must_use]
pub struct CElementWithAttributeTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate66 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate66 { }
#[must_use]
pub struct CElementWithAttributeTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate67 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate67 { }
#[must_use]
pub struct CElementWithAttributeTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate68 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate68 { }
#[must_use]
pub struct CElementWithAttributeTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate69 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate69 { }
#[must_use]
pub struct CElementWithAttributeTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate70 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate70 { }
#[must_use]
pub struct CElementWithAttributeTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate71 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate71 { }
#[must_use]
pub struct CElementWithAttributeTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate72 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate72 { }
#[must_use]
pub struct CElementWithAttributeTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate73 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate73 { }
#[must_use]
pub struct CElementWithAttributeTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate74 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate74 { }
#[must_use]
pub struct CElementWithAttributeTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate75 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate75 { }
#[must_use]
pub struct CElementWithAttributeTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate76 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate76 { }
#[must_use]
pub struct CElementWithAttributeTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate77 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate77 { }
#[must_use]
pub struct CElementWithAttributeTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate78 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate78 { }
#[must_use]
pub struct CElementWithAttributeTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate79 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate79 { }
#[must_use]
pub struct CElementWithAttributeTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate80 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate80 { }
#[must_use]
pub struct CElementWithAttributeTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate81 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate81 { }
#[must_use]
pub struct CElementWithAttributeTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate82 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate82 { }
#[must_use]
pub struct CElementWithAttributeTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate83 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate83 { }
#[must_use]
pub struct CElementWithAttributeTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate84 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate84 { }
#[must_use]
pub struct CElementWithAttributeTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate85 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate85 { }
#[must_use]
pub struct CElementWithAttributeTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate86 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate86 { }
#[must_use]
pub struct CElementWithAttributeTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate87 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate87 { }
#[must_use]
pub struct CElementWithAttributeTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate88 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate88 { }
#[must_use]
pub struct CElementWithAttributeTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate89 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate89 { }
#[must_use]
pub struct CElementWithAttributeTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate90 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate90 { }
#[must_use]
pub struct CElementWithAttributeTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithAttributeTemplate91 {
    #[inline]
    fn clone(&self) -> CElementWithAttributeTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithAttributeTemplate91 { }
impl<Partial, After> Template<CElementWithAttributeTemplate1, Partial, After>
    {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate2, Partial, After>
    {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate3, Partial, After>
    {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate4, Partial, After>
    {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate5, Partial, After>
    {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate6, Partial, After>
    {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate7, Partial, After>
    {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate35, Partial, After>
    {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate8, Partial, After>
    {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate9, Partial, After>
    {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate9, Partial, After>
    {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate12, Partial, After>
    {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate15, Partial, After>
    {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate16, Partial, After>
    {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate48, Partial, After>
    {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate17, Partial, After>
    {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate50, Partial, After>
    {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate18, Partial, After>
    {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CElementWithAttributeTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CElementWithAttributeTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate57, Partial, After>
    {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate20, Partial, After>
    {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate60, Partial, After>
    {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate59, Partial, After>
    {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate21, Partial, After>
    {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate63, Partial, After>
    {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate22, Partial, After>
    {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate68, Partial, After>
    {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate67, Partial, After>
    {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate71, Partial, After>
    {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate23, Partial, After>
    {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate74, Partial, After>
    {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate24, Partial, After>
    {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate77, Partial, After>
    {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate76, Partial, After>
    {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate80, Partial, After>
    {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate79, Partial, After>
    {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate25, Partial, After>
    {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate84, Partial, After>
    {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate83, Partial, After>
    {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate26, Partial, After>
    {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate89, Partial, After>
    {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<CElementWithAttributeTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CElementWithAttributeTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn c_element_with_attribute()
    ->
        (Template<CElementWithAttributeTemplate2, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<CElementWithAttributeTemplate2, (),
            ()> {
            r#type: CElementWithAttributeTemplate2,
            partial: (),
            after: (),
        }, gen {})
}
const _c_element_with_attribute_FORCE_RECOMPILE: &'static str =
    "<a class=\"test\"></a>";
#[must_use]
pub struct CElementWithContentTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate0 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate0 { }
#[must_use]
pub struct CElementWithContentTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate1 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate1 { }
#[must_use]
pub struct CElementWithContentTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate2 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate2 { }
#[must_use]
pub struct CElementWithContentTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate3 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate3 { }
#[must_use]
pub struct CElementWithContentTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate4 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate4 { }
#[must_use]
pub struct CElementWithContentTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate5 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate5 { }
#[must_use]
pub struct CElementWithContentTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate6 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate6 { }
#[must_use]
pub struct CElementWithContentTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate7 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate7 { }
#[must_use]
pub struct CElementWithContentTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate8 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate8 { }
#[must_use]
pub struct CElementWithContentTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate9 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate9 { }
#[must_use]
pub struct CElementWithContentTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate10 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate10 { }
#[must_use]
pub struct CElementWithContentTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate11 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate11 { }
#[must_use]
pub struct CElementWithContentTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate12 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate12 { }
#[must_use]
pub struct CElementWithContentTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate13 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate13 { }
#[must_use]
pub struct CElementWithContentTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate14 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate14 { }
#[must_use]
pub struct CElementWithContentTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate15 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate15 { }
#[must_use]
pub struct CElementWithContentTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate16 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate16 { }
#[must_use]
pub struct CElementWithContentTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate17 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate17 { }
#[must_use]
pub struct CElementWithContentTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate18 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate18 { }
#[must_use]
pub struct CElementWithContentTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate19 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate19 { }
#[must_use]
pub struct CElementWithContentTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate20 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate20 { }
#[must_use]
pub struct CElementWithContentTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate21 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate21 { }
#[must_use]
pub struct CElementWithContentTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate22 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate22 { }
#[must_use]
pub struct CElementWithContentTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate23 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate23 { }
#[must_use]
pub struct CElementWithContentTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate24 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate24 { }
#[must_use]
pub struct CElementWithContentTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate25 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate25 { }
#[must_use]
pub struct CElementWithContentTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate26 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate26 { }
#[must_use]
pub struct CElementWithContentTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate27 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate27 { }
#[must_use]
pub struct CElementWithContentTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate28 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate28 { }
#[must_use]
pub struct CElementWithContentTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate29 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate29 { }
#[must_use]
pub struct CElementWithContentTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate30 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate30 { }
#[must_use]
pub struct CElementWithContentTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate31 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate31 { }
#[must_use]
pub struct CElementWithContentTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate32 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate32 { }
#[must_use]
pub struct CElementWithContentTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate33 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate33 { }
#[must_use]
pub struct CElementWithContentTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate34 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate34 { }
#[must_use]
pub struct CElementWithContentTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate35 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate35 { }
#[must_use]
pub struct CElementWithContentTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate36 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate36 { }
#[must_use]
pub struct CElementWithContentTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate37 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate37 { }
#[must_use]
pub struct CElementWithContentTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate38 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate38 { }
#[must_use]
pub struct CElementWithContentTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate39 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate39 { }
#[must_use]
pub struct CElementWithContentTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate40 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate40 { }
#[must_use]
pub struct CElementWithContentTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate41 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate41 { }
#[must_use]
pub struct CElementWithContentTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate42 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate42 { }
#[must_use]
pub struct CElementWithContentTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate43 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate43 { }
#[must_use]
pub struct CElementWithContentTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate44 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate44 { }
#[must_use]
pub struct CElementWithContentTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate45 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate45 { }
#[must_use]
pub struct CElementWithContentTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate46 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate46 { }
#[must_use]
pub struct CElementWithContentTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate47 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate47 { }
#[must_use]
pub struct CElementWithContentTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate48 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate48 { }
#[must_use]
pub struct CElementWithContentTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate49 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate49 { }
#[must_use]
pub struct CElementWithContentTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate50 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate50 { }
#[must_use]
pub struct CElementWithContentTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate51 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate51 { }
#[must_use]
pub struct CElementWithContentTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate52 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate52 { }
#[must_use]
pub struct CElementWithContentTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate53 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate53 { }
#[must_use]
pub struct CElementWithContentTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate54 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate54 { }
#[must_use]
pub struct CElementWithContentTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate55 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate55 { }
#[must_use]
pub struct CElementWithContentTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate56 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate56 { }
#[must_use]
pub struct CElementWithContentTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate57 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate57 { }
#[must_use]
pub struct CElementWithContentTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate58 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate58 { }
#[must_use]
pub struct CElementWithContentTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate59 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate59 { }
#[must_use]
pub struct CElementWithContentTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate60 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate60 { }
#[must_use]
pub struct CElementWithContentTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate61 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate61 { }
#[must_use]
pub struct CElementWithContentTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate62 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate62 { }
#[must_use]
pub struct CElementWithContentTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate63 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate63 { }
#[must_use]
pub struct CElementWithContentTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate64 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate64 { }
#[must_use]
pub struct CElementWithContentTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate65 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate65 { }
#[must_use]
pub struct CElementWithContentTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate66 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate66 { }
#[must_use]
pub struct CElementWithContentTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate67 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate67 { }
#[must_use]
pub struct CElementWithContentTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate68 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate68 { }
#[must_use]
pub struct CElementWithContentTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate69 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate69 { }
#[must_use]
pub struct CElementWithContentTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate70 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate70 { }
#[must_use]
pub struct CElementWithContentTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate71 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate71 { }
#[must_use]
pub struct CElementWithContentTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate72 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate72 { }
#[must_use]
pub struct CElementWithContentTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate73 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate73 { }
#[must_use]
pub struct CElementWithContentTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate74 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate74 { }
#[must_use]
pub struct CElementWithContentTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate75 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate75 { }
#[must_use]
pub struct CElementWithContentTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate76 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate76 { }
#[must_use]
pub struct CElementWithContentTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate77 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate77 { }
#[must_use]
pub struct CElementWithContentTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate78 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate78 { }
#[must_use]
pub struct CElementWithContentTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate79 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate79 { }
#[must_use]
pub struct CElementWithContentTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate80 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate80 { }
#[must_use]
pub struct CElementWithContentTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate81 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate81 { }
#[must_use]
pub struct CElementWithContentTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate82 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate82 { }
#[must_use]
pub struct CElementWithContentTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate83 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate83 { }
#[must_use]
pub struct CElementWithContentTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate84 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate84 { }
#[must_use]
pub struct CElementWithContentTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate85 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate85 { }
#[must_use]
pub struct CElementWithContentTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate86 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate86 { }
#[must_use]
pub struct CElementWithContentTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate87 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate87 { }
#[must_use]
pub struct CElementWithContentTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate88 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate88 { }
#[must_use]
pub struct CElementWithContentTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate89 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate89 { }
#[must_use]
pub struct CElementWithContentTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate90 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate90 { }
#[must_use]
pub struct CElementWithContentTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for CElementWithContentTemplate91 {
    #[inline]
    fn clone(&self) -> CElementWithContentTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CElementWithContentTemplate91 { }
impl<Partial, After> Template<CElementWithContentTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CElementWithContentTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CElementWithContentTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<CElementWithContentTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CElementWithContentTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn c_element_with_content()
    ->
        (Template<CElementWithContentTemplate3, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<CElementWithContentTemplate3, (),
            ()> {
            r#type: CElementWithContentTemplate3,
            partial: (),
            after: (),
        }, gen {})
}
const _c_element_with_content_FORCE_RECOMPILE: &'static str = "<h1>hi</h1>";
#[must_use]
pub struct CEmptyElementTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate0 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate0 { }
#[must_use]
pub struct CEmptyElementTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate1 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate1 { }
#[must_use]
pub struct CEmptyElementTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate2 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate2 { }
#[must_use]
pub struct CEmptyElementTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate3 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate3 { }
#[must_use]
pub struct CEmptyElementTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate4 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate4 { }
#[must_use]
pub struct CEmptyElementTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate5 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate5 { }
#[must_use]
pub struct CEmptyElementTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate6 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate6 { }
#[must_use]
pub struct CEmptyElementTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate7 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate7 { }
#[must_use]
pub struct CEmptyElementTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate8 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate8 { }
#[must_use]
pub struct CEmptyElementTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate9 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate9 { }
#[must_use]
pub struct CEmptyElementTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate10 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate10 { }
#[must_use]
pub struct CEmptyElementTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate11 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate11 { }
#[must_use]
pub struct CEmptyElementTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate12 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate12 { }
#[must_use]
pub struct CEmptyElementTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate13 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate13 { }
#[must_use]
pub struct CEmptyElementTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate14 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate14 { }
#[must_use]
pub struct CEmptyElementTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate15 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate15 { }
#[must_use]
pub struct CEmptyElementTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate16 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate16 { }
#[must_use]
pub struct CEmptyElementTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate17 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate17 { }
#[must_use]
pub struct CEmptyElementTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate18 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate18 { }
#[must_use]
pub struct CEmptyElementTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate19 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate19 { }
#[must_use]
pub struct CEmptyElementTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate20 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate20 { }
#[must_use]
pub struct CEmptyElementTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate21 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate21 { }
#[must_use]
pub struct CEmptyElementTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate22 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate22 { }
#[must_use]
pub struct CEmptyElementTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate23 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate23 { }
#[must_use]
pub struct CEmptyElementTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate24 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate24 { }
#[must_use]
pub struct CEmptyElementTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate25 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate25 { }
#[must_use]
pub struct CEmptyElementTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate26 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate26 { }
#[must_use]
pub struct CEmptyElementTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate27 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate27 { }
#[must_use]
pub struct CEmptyElementTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate28 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate28 { }
#[must_use]
pub struct CEmptyElementTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate29 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate29 { }
#[must_use]
pub struct CEmptyElementTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate30 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate30 { }
#[must_use]
pub struct CEmptyElementTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate31 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate31 { }
#[must_use]
pub struct CEmptyElementTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate32 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate32 { }
#[must_use]
pub struct CEmptyElementTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate33 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate33 { }
#[must_use]
pub struct CEmptyElementTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate34 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate34 { }
#[must_use]
pub struct CEmptyElementTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate35 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate35 { }
#[must_use]
pub struct CEmptyElementTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate36 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate36 { }
#[must_use]
pub struct CEmptyElementTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate37 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate37 { }
#[must_use]
pub struct CEmptyElementTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate38 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate38 { }
#[must_use]
pub struct CEmptyElementTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate39 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate39 { }
#[must_use]
pub struct CEmptyElementTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate40 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate40 { }
#[must_use]
pub struct CEmptyElementTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate41 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate41 { }
#[must_use]
pub struct CEmptyElementTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate42 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate42 { }
#[must_use]
pub struct CEmptyElementTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate43 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate43 { }
#[must_use]
pub struct CEmptyElementTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate44 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate44 { }
#[must_use]
pub struct CEmptyElementTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate45 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate45 { }
#[must_use]
pub struct CEmptyElementTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate46 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate46 { }
#[must_use]
pub struct CEmptyElementTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate47 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate47 { }
#[must_use]
pub struct CEmptyElementTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate48 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate48 { }
#[must_use]
pub struct CEmptyElementTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate49 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate49 { }
#[must_use]
pub struct CEmptyElementTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate50 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate50 { }
#[must_use]
pub struct CEmptyElementTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate51 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate51 { }
#[must_use]
pub struct CEmptyElementTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate52 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate52 { }
#[must_use]
pub struct CEmptyElementTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate53 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate53 { }
#[must_use]
pub struct CEmptyElementTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate54 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate54 { }
#[must_use]
pub struct CEmptyElementTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate55 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate55 { }
#[must_use]
pub struct CEmptyElementTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate56 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate56 { }
#[must_use]
pub struct CEmptyElementTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate57 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate57 { }
#[must_use]
pub struct CEmptyElementTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate58 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate58 { }
#[must_use]
pub struct CEmptyElementTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate59 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate59 { }
#[must_use]
pub struct CEmptyElementTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate60 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate60 { }
#[must_use]
pub struct CEmptyElementTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate61 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate61 { }
#[must_use]
pub struct CEmptyElementTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate62 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate62 { }
#[must_use]
pub struct CEmptyElementTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate63 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate63 { }
#[must_use]
pub struct CEmptyElementTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate64 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate64 { }
#[must_use]
pub struct CEmptyElementTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate65 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate65 { }
#[must_use]
pub struct CEmptyElementTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate66 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate66 { }
#[must_use]
pub struct CEmptyElementTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate67 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate67 { }
#[must_use]
pub struct CEmptyElementTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate68 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate68 { }
#[must_use]
pub struct CEmptyElementTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate69 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate69 { }
#[must_use]
pub struct CEmptyElementTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate70 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate70 { }
#[must_use]
pub struct CEmptyElementTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate71 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate71 { }
#[must_use]
pub struct CEmptyElementTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate72 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate72 { }
#[must_use]
pub struct CEmptyElementTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate73 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate73 { }
#[must_use]
pub struct CEmptyElementTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate74 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate74 { }
#[must_use]
pub struct CEmptyElementTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate75 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate75 { }
#[must_use]
pub struct CEmptyElementTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate76 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate76 { }
#[must_use]
pub struct CEmptyElementTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate77 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate77 { }
#[must_use]
pub struct CEmptyElementTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate78 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate78 { }
#[must_use]
pub struct CEmptyElementTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate79 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate79 { }
#[must_use]
pub struct CEmptyElementTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate80 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate80 { }
#[must_use]
pub struct CEmptyElementTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate81 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate81 { }
#[must_use]
pub struct CEmptyElementTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate82 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate82 { }
#[must_use]
pub struct CEmptyElementTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate83 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate83 { }
#[must_use]
pub struct CEmptyElementTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate84 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate84 { }
#[must_use]
pub struct CEmptyElementTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate85 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate85 { }
#[must_use]
pub struct CEmptyElementTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate86 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate86 { }
#[must_use]
pub struct CEmptyElementTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate87 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate87 { }
#[must_use]
pub struct CEmptyElementTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate88 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate88 { }
#[must_use]
pub struct CEmptyElementTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate89 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate89 { }
#[must_use]
pub struct CEmptyElementTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate90 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate90 { }
#[must_use]
pub struct CEmptyElementTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for CEmptyElementTemplate91 {
    #[inline]
    fn clone(&self) -> CEmptyElementTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CEmptyElementTemplate91 { }
impl<Partial, After> Template<CEmptyElementTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CEmptyElementTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CEmptyElementTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<CEmptyElementTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CEmptyElementTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn c_empty_element()
    ->
        (Template<CEmptyElementTemplate4, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<CEmptyElementTemplate4, (),
            ()> { r#type: CEmptyElementTemplate4, partial: (), after: () },
        gen {})
}
const _c_empty_element_FORCE_RECOMPILE: &'static str = "<h1></h1>";
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate0 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate0 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate1 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate1 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate2 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate2 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate3 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate3 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate4 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate4 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate5 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate5 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate6 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate6 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate7 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate7 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate8 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate8 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate9 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate9 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate10 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate10 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate11 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate11 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate12 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate12 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate13 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate13 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate14 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate14 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate15 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate15 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate16 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate16 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate17 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate17 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate18 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate18 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate19 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate19 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate20 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate20 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate21 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate21 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate22 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate22 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate23 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate23 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate24 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate24 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate25 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate25 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate26 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate26 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate27 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate27 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate28 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate28 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate29 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate29 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate30 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate30 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate31 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate31 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate32 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate32 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate33 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate33 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate34 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate34 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate35 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate35 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate36 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate36 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate37 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate37 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate38 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate38 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate39 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate39 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate40 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate40 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate41 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate41 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate42 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate42 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate43 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate43 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate44 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate44 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate45 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate45 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate46 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate46 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate47 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate47 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate48 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate48 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate49 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate49 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate50 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate50 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate51 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate51 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate52 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate52 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate53 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate53 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate54 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate54 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate55 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate55 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate56 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate56 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate57 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate57 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate58 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate58 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate59 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate59 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate60 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate60 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate61 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate61 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate62 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate62 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate63 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate63 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate64 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate64 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate65 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate65 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate66 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate66 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate67 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate67 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate68 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate68 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate69 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate69 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate70 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate70 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate71 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate71 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate72 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate72 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate73 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate73 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate74 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate74 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate75 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate75 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate76 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate76 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate77 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate77 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate78 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate78 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate79 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate79 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate80 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate80 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate81 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate81 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate82 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate82 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate83 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate83 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate84 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate84 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate85 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate85 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate86 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate86 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate87 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate87 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate88 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate88 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate89 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate89 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate90 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate90 { }
#[must_use]
pub struct CSelfClosingBooleanAttrTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingBooleanAttrTemplate91 {
    #[inline]
    fn clone(&self) -> CSelfClosingBooleanAttrTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingBooleanAttrTemplate91 { }
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CSelfClosingBooleanAttrTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CSelfClosingBooleanAttrTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<CSelfClosingBooleanAttrTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CSelfClosingBooleanAttrTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn c_self_closing_boolean_attr()
    ->
        (Template<CSelfClosingBooleanAttrTemplate5, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<CSelfClosingBooleanAttrTemplate5, (),
            ()> {
            r#type: CSelfClosingBooleanAttrTemplate5,
            partial: (),
            after: (),
        }, gen {})
}
const _c_self_closing_boolean_attr_FORCE_RECOMPILE: &'static str =
    "<!DOCTYPE html>";
#[must_use]
pub struct CSelfClosingTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate0 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate0 { }
#[must_use]
pub struct CSelfClosingTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate1 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate1 { }
#[must_use]
pub struct CSelfClosingTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate2 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate2 { }
#[must_use]
pub struct CSelfClosingTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate3 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate3 { }
#[must_use]
pub struct CSelfClosingTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate4 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate4 { }
#[must_use]
pub struct CSelfClosingTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate5 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate5 { }
#[must_use]
pub struct CSelfClosingTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate6 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate6 { }
#[must_use]
pub struct CSelfClosingTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate7 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate7 { }
#[must_use]
pub struct CSelfClosingTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate8 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate8 { }
#[must_use]
pub struct CSelfClosingTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate9 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate9 { }
#[must_use]
pub struct CSelfClosingTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate10 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate10 { }
#[must_use]
pub struct CSelfClosingTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate11 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate11 { }
#[must_use]
pub struct CSelfClosingTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate12 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate12 { }
#[must_use]
pub struct CSelfClosingTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate13 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate13 { }
#[must_use]
pub struct CSelfClosingTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate14 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate14 { }
#[must_use]
pub struct CSelfClosingTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate15 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate15 { }
#[must_use]
pub struct CSelfClosingTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate16 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate16 { }
#[must_use]
pub struct CSelfClosingTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate17 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate17 { }
#[must_use]
pub struct CSelfClosingTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate18 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate18 { }
#[must_use]
pub struct CSelfClosingTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate19 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate19 { }
#[must_use]
pub struct CSelfClosingTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate20 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate20 { }
#[must_use]
pub struct CSelfClosingTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate21 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate21 { }
#[must_use]
pub struct CSelfClosingTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate22 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate22 { }
#[must_use]
pub struct CSelfClosingTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate23 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate23 { }
#[must_use]
pub struct CSelfClosingTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate24 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate24 { }
#[must_use]
pub struct CSelfClosingTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate25 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate25 { }
#[must_use]
pub struct CSelfClosingTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate26 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate26 { }
#[must_use]
pub struct CSelfClosingTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate27 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate27 { }
#[must_use]
pub struct CSelfClosingTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate28 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate28 { }
#[must_use]
pub struct CSelfClosingTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate29 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate29 { }
#[must_use]
pub struct CSelfClosingTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate30 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate30 { }
#[must_use]
pub struct CSelfClosingTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate31 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate31 { }
#[must_use]
pub struct CSelfClosingTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate32 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate32 { }
#[must_use]
pub struct CSelfClosingTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate33 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate33 { }
#[must_use]
pub struct CSelfClosingTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate34 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate34 { }
#[must_use]
pub struct CSelfClosingTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate35 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate35 { }
#[must_use]
pub struct CSelfClosingTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate36 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate36 { }
#[must_use]
pub struct CSelfClosingTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate37 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate37 { }
#[must_use]
pub struct CSelfClosingTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate38 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate38 { }
#[must_use]
pub struct CSelfClosingTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate39 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate39 { }
#[must_use]
pub struct CSelfClosingTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate40 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate40 { }
#[must_use]
pub struct CSelfClosingTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate41 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate41 { }
#[must_use]
pub struct CSelfClosingTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate42 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate42 { }
#[must_use]
pub struct CSelfClosingTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate43 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate43 { }
#[must_use]
pub struct CSelfClosingTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate44 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate44 { }
#[must_use]
pub struct CSelfClosingTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate45 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate45 { }
#[must_use]
pub struct CSelfClosingTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate46 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate46 { }
#[must_use]
pub struct CSelfClosingTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate47 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate47 { }
#[must_use]
pub struct CSelfClosingTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate48 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate48 { }
#[must_use]
pub struct CSelfClosingTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate49 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate49 { }
#[must_use]
pub struct CSelfClosingTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate50 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate50 { }
#[must_use]
pub struct CSelfClosingTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate51 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate51 { }
#[must_use]
pub struct CSelfClosingTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate52 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate52 { }
#[must_use]
pub struct CSelfClosingTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate53 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate53 { }
#[must_use]
pub struct CSelfClosingTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate54 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate54 { }
#[must_use]
pub struct CSelfClosingTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate55 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate55 { }
#[must_use]
pub struct CSelfClosingTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate56 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate56 { }
#[must_use]
pub struct CSelfClosingTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate57 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate57 { }
#[must_use]
pub struct CSelfClosingTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate58 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate58 { }
#[must_use]
pub struct CSelfClosingTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate59 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate59 { }
#[must_use]
pub struct CSelfClosingTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate60 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate60 { }
#[must_use]
pub struct CSelfClosingTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate61 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate61 { }
#[must_use]
pub struct CSelfClosingTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate62 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate62 { }
#[must_use]
pub struct CSelfClosingTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate63 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate63 { }
#[must_use]
pub struct CSelfClosingTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate64 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate64 { }
#[must_use]
pub struct CSelfClosingTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate65 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate65 { }
#[must_use]
pub struct CSelfClosingTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate66 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate66 { }
#[must_use]
pub struct CSelfClosingTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate67 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate67 { }
#[must_use]
pub struct CSelfClosingTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate68 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate68 { }
#[must_use]
pub struct CSelfClosingTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate69 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate69 { }
#[must_use]
pub struct CSelfClosingTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate70 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate70 { }
#[must_use]
pub struct CSelfClosingTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate71 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate71 { }
#[must_use]
pub struct CSelfClosingTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate72 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate72 { }
#[must_use]
pub struct CSelfClosingTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate73 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate73 { }
#[must_use]
pub struct CSelfClosingTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate74 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate74 { }
#[must_use]
pub struct CSelfClosingTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate75 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate75 { }
#[must_use]
pub struct CSelfClosingTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate76 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate76 { }
#[must_use]
pub struct CSelfClosingTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate77 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate77 { }
#[must_use]
pub struct CSelfClosingTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate78 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate78 { }
#[must_use]
pub struct CSelfClosingTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate79 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate79 { }
#[must_use]
pub struct CSelfClosingTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate80 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate80 { }
#[must_use]
pub struct CSelfClosingTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate81 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate81 { }
#[must_use]
pub struct CSelfClosingTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate82 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate82 { }
#[must_use]
pub struct CSelfClosingTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate83 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate83 { }
#[must_use]
pub struct CSelfClosingTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate84 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate84 { }
#[must_use]
pub struct CSelfClosingTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate85 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate85 { }
#[must_use]
pub struct CSelfClosingTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate86 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate86 { }
#[must_use]
pub struct CSelfClosingTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate87 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate87 { }
#[must_use]
pub struct CSelfClosingTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate88 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate88 { }
#[must_use]
pub struct CSelfClosingTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate89 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate89 { }
#[must_use]
pub struct CSelfClosingTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate90 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate90 { }
#[must_use]
pub struct CSelfClosingTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for CSelfClosingTemplate91 {
    #[inline]
    fn clone(&self) -> CSelfClosingTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for CSelfClosingTemplate91 { }
impl<Partial, After> Template<CSelfClosingTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CSelfClosingTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CSelfClosingTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<CSelfClosingTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<CSelfClosingTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn c_self_closing()
    ->
        (Template<CSelfClosingTemplate6, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<CSelfClosingTemplate6, (),
            ()> { r#type: CSelfClosingTemplate6, partial: (), after: () },
        gen {})
}
const _c_self_closing_FORCE_RECOMPILE: &'static str = "<!DOCTYPE>";
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate0 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate0 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate1 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate1 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate2 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate2 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate3 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate3 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate4 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate4 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate5 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate5 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate6 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate6 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate7 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate7 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate8 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate8 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate9 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate9 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate10 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate10 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate11 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate11 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate12 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate12 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate13 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate13 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate14 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate14 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate15 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate15 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate16 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate16 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate17 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate17 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate18 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate18 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate19 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate19 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate20 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate20 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate21 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate21 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate22 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate22 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate23 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate23 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate24 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate24 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate25 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate25 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate26 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate26 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate27 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate27 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate28 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate28 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate29 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate29 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate30 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate30 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate31 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate31 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate32 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate32 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate33 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate33 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate34 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate34 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate35 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate35 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate36 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate36 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate37 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate37 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate38 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate38 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate39 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate39 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate40 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate40 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate41 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate41 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate42 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate42 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate43 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate43 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate44 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate44 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate45 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate45 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate46 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate46 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate47 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate47 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate48 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate48 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate49 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate49 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate50 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate50 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate51 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate51 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate52 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate52 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate53 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate53 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate54 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate54 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate55 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate55 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate56 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate56 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate57 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate57 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate58 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate58 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate59 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate59 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate60 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate60 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate61 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate61 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate62 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate62 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate63 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate63 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate64 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate64 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate65 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate65 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate66 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate66 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate67 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate67 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate68 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate68 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate69 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate69 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate70 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate70 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate71 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate71 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate72 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate72 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate73 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate73 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate74 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate74 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate75 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate75 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate76 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate76 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate77 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate77 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate78 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate78 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate79 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate79 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate80 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate80 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate81 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate81 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate82 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate82 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate83 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate83 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate84 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate84 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate85 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate85 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate86 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate86 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate87 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate87 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate88 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate88 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate89 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate89 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate90 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate90 { }
#[must_use]
pub struct DElementWithAttributeAndVariablesTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for DElementWithAttributeAndVariablesTemplate91 {
    #[inline]
    fn clone(&self) -> DElementWithAttributeAndVariablesTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DElementWithAttributeAndVariablesTemplate91 { }
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<DElementWithAttributeAndVariablesTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<DElementWithAttributeAndVariablesTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<DElementWithAttributeAndVariablesTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<DElementWithAttributeAndVariablesTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn d_element_with_attribute_and_variables()
    ->
        (Template<DElementWithAttributeAndVariablesTemplate7, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<DElementWithAttributeAndVariablesTemplate7, (),
            ()> {
            r#type: DElementWithAttributeAndVariablesTemplate7,
            partial: (),
            after: (),
        }, gen {})
}
const _d_element_with_attribute_and_variables_FORCE_RECOMPILE: &'static str =
    "<a class=\"{{test}}\">{{var}}</a>";
#[must_use]
pub struct DVariableTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate0 {
    #[inline]
    fn clone(&self) -> DVariableTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate0 { }
#[must_use]
pub struct DVariableTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate1 {
    #[inline]
    fn clone(&self) -> DVariableTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate1 { }
#[must_use]
pub struct DVariableTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate2 {
    #[inline]
    fn clone(&self) -> DVariableTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate2 { }
#[must_use]
pub struct DVariableTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate3 {
    #[inline]
    fn clone(&self) -> DVariableTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate3 { }
#[must_use]
pub struct DVariableTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate4 {
    #[inline]
    fn clone(&self) -> DVariableTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate4 { }
#[must_use]
pub struct DVariableTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate5 {
    #[inline]
    fn clone(&self) -> DVariableTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate5 { }
#[must_use]
pub struct DVariableTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate6 {
    #[inline]
    fn clone(&self) -> DVariableTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate6 { }
#[must_use]
pub struct DVariableTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate7 {
    #[inline]
    fn clone(&self) -> DVariableTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate7 { }
#[must_use]
pub struct DVariableTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate8 {
    #[inline]
    fn clone(&self) -> DVariableTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate8 { }
#[must_use]
pub struct DVariableTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate9 {
    #[inline]
    fn clone(&self) -> DVariableTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate9 { }
#[must_use]
pub struct DVariableTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate10 {
    #[inline]
    fn clone(&self) -> DVariableTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate10 { }
#[must_use]
pub struct DVariableTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate11 {
    #[inline]
    fn clone(&self) -> DVariableTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate11 { }
#[must_use]
pub struct DVariableTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate12 {
    #[inline]
    fn clone(&self) -> DVariableTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate12 { }
#[must_use]
pub struct DVariableTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate13 {
    #[inline]
    fn clone(&self) -> DVariableTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate13 { }
#[must_use]
pub struct DVariableTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate14 {
    #[inline]
    fn clone(&self) -> DVariableTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate14 { }
#[must_use]
pub struct DVariableTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate15 {
    #[inline]
    fn clone(&self) -> DVariableTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate15 { }
#[must_use]
pub struct DVariableTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate16 {
    #[inline]
    fn clone(&self) -> DVariableTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate16 { }
#[must_use]
pub struct DVariableTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate17 {
    #[inline]
    fn clone(&self) -> DVariableTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate17 { }
#[must_use]
pub struct DVariableTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate18 {
    #[inline]
    fn clone(&self) -> DVariableTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate18 { }
#[must_use]
pub struct DVariableTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate19 {
    #[inline]
    fn clone(&self) -> DVariableTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate19 { }
#[must_use]
pub struct DVariableTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate20 {
    #[inline]
    fn clone(&self) -> DVariableTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate20 { }
#[must_use]
pub struct DVariableTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate21 {
    #[inline]
    fn clone(&self) -> DVariableTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate21 { }
#[must_use]
pub struct DVariableTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate22 {
    #[inline]
    fn clone(&self) -> DVariableTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate22 { }
#[must_use]
pub struct DVariableTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate23 {
    #[inline]
    fn clone(&self) -> DVariableTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate23 { }
#[must_use]
pub struct DVariableTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate24 {
    #[inline]
    fn clone(&self) -> DVariableTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate24 { }
#[must_use]
pub struct DVariableTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate25 {
    #[inline]
    fn clone(&self) -> DVariableTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate25 { }
#[must_use]
pub struct DVariableTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate26 {
    #[inline]
    fn clone(&self) -> DVariableTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate26 { }
#[must_use]
pub struct DVariableTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate27 {
    #[inline]
    fn clone(&self) -> DVariableTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate27 { }
#[must_use]
pub struct DVariableTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate28 {
    #[inline]
    fn clone(&self) -> DVariableTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate28 { }
#[must_use]
pub struct DVariableTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate29 {
    #[inline]
    fn clone(&self) -> DVariableTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate29 { }
#[must_use]
pub struct DVariableTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate30 {
    #[inline]
    fn clone(&self) -> DVariableTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate30 { }
#[must_use]
pub struct DVariableTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate31 {
    #[inline]
    fn clone(&self) -> DVariableTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate31 { }
#[must_use]
pub struct DVariableTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate32 {
    #[inline]
    fn clone(&self) -> DVariableTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate32 { }
#[must_use]
pub struct DVariableTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate33 {
    #[inline]
    fn clone(&self) -> DVariableTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate33 { }
#[must_use]
pub struct DVariableTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate34 {
    #[inline]
    fn clone(&self) -> DVariableTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate34 { }
#[must_use]
pub struct DVariableTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate35 {
    #[inline]
    fn clone(&self) -> DVariableTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate35 { }
#[must_use]
pub struct DVariableTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate36 {
    #[inline]
    fn clone(&self) -> DVariableTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate36 { }
#[must_use]
pub struct DVariableTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate37 {
    #[inline]
    fn clone(&self) -> DVariableTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate37 { }
#[must_use]
pub struct DVariableTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate38 {
    #[inline]
    fn clone(&self) -> DVariableTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate38 { }
#[must_use]
pub struct DVariableTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate39 {
    #[inline]
    fn clone(&self) -> DVariableTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate39 { }
#[must_use]
pub struct DVariableTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate40 {
    #[inline]
    fn clone(&self) -> DVariableTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate40 { }
#[must_use]
pub struct DVariableTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate41 {
    #[inline]
    fn clone(&self) -> DVariableTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate41 { }
#[must_use]
pub struct DVariableTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate42 {
    #[inline]
    fn clone(&self) -> DVariableTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate42 { }
#[must_use]
pub struct DVariableTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate43 {
    #[inline]
    fn clone(&self) -> DVariableTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate43 { }
#[must_use]
pub struct DVariableTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate44 {
    #[inline]
    fn clone(&self) -> DVariableTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate44 { }
#[must_use]
pub struct DVariableTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate45 {
    #[inline]
    fn clone(&self) -> DVariableTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate45 { }
#[must_use]
pub struct DVariableTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate46 {
    #[inline]
    fn clone(&self) -> DVariableTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate46 { }
#[must_use]
pub struct DVariableTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate47 {
    #[inline]
    fn clone(&self) -> DVariableTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate47 { }
#[must_use]
pub struct DVariableTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate48 {
    #[inline]
    fn clone(&self) -> DVariableTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate48 { }
#[must_use]
pub struct DVariableTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate49 {
    #[inline]
    fn clone(&self) -> DVariableTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate49 { }
#[must_use]
pub struct DVariableTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate50 {
    #[inline]
    fn clone(&self) -> DVariableTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate50 { }
#[must_use]
pub struct DVariableTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate51 {
    #[inline]
    fn clone(&self) -> DVariableTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate51 { }
#[must_use]
pub struct DVariableTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate52 {
    #[inline]
    fn clone(&self) -> DVariableTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate52 { }
#[must_use]
pub struct DVariableTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate53 {
    #[inline]
    fn clone(&self) -> DVariableTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate53 { }
#[must_use]
pub struct DVariableTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate54 {
    #[inline]
    fn clone(&self) -> DVariableTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate54 { }
#[must_use]
pub struct DVariableTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate55 {
    #[inline]
    fn clone(&self) -> DVariableTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate55 { }
#[must_use]
pub struct DVariableTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate56 {
    #[inline]
    fn clone(&self) -> DVariableTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate56 { }
#[must_use]
pub struct DVariableTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate57 {
    #[inline]
    fn clone(&self) -> DVariableTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate57 { }
#[must_use]
pub struct DVariableTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate58 {
    #[inline]
    fn clone(&self) -> DVariableTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate58 { }
#[must_use]
pub struct DVariableTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate59 {
    #[inline]
    fn clone(&self) -> DVariableTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate59 { }
#[must_use]
pub struct DVariableTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate60 {
    #[inline]
    fn clone(&self) -> DVariableTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate60 { }
#[must_use]
pub struct DVariableTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate61 {
    #[inline]
    fn clone(&self) -> DVariableTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate61 { }
#[must_use]
pub struct DVariableTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate62 {
    #[inline]
    fn clone(&self) -> DVariableTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate62 { }
#[must_use]
pub struct DVariableTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate63 {
    #[inline]
    fn clone(&self) -> DVariableTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate63 { }
#[must_use]
pub struct DVariableTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate64 {
    #[inline]
    fn clone(&self) -> DVariableTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate64 { }
#[must_use]
pub struct DVariableTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate65 {
    #[inline]
    fn clone(&self) -> DVariableTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate65 { }
#[must_use]
pub struct DVariableTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate66 {
    #[inline]
    fn clone(&self) -> DVariableTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate66 { }
#[must_use]
pub struct DVariableTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate67 {
    #[inline]
    fn clone(&self) -> DVariableTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate67 { }
#[must_use]
pub struct DVariableTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate68 {
    #[inline]
    fn clone(&self) -> DVariableTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate68 { }
#[must_use]
pub struct DVariableTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate69 {
    #[inline]
    fn clone(&self) -> DVariableTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate69 { }
#[must_use]
pub struct DVariableTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate70 {
    #[inline]
    fn clone(&self) -> DVariableTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate70 { }
#[must_use]
pub struct DVariableTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate71 {
    #[inline]
    fn clone(&self) -> DVariableTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate71 { }
#[must_use]
pub struct DVariableTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate72 {
    #[inline]
    fn clone(&self) -> DVariableTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate72 { }
#[must_use]
pub struct DVariableTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate73 {
    #[inline]
    fn clone(&self) -> DVariableTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate73 { }
#[must_use]
pub struct DVariableTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate74 {
    #[inline]
    fn clone(&self) -> DVariableTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate74 { }
#[must_use]
pub struct DVariableTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate75 {
    #[inline]
    fn clone(&self) -> DVariableTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate75 { }
#[must_use]
pub struct DVariableTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate76 {
    #[inline]
    fn clone(&self) -> DVariableTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate76 { }
#[must_use]
pub struct DVariableTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate77 {
    #[inline]
    fn clone(&self) -> DVariableTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate77 { }
#[must_use]
pub struct DVariableTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate78 {
    #[inline]
    fn clone(&self) -> DVariableTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate78 { }
#[must_use]
pub struct DVariableTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate79 {
    #[inline]
    fn clone(&self) -> DVariableTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate79 { }
#[must_use]
pub struct DVariableTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate80 {
    #[inline]
    fn clone(&self) -> DVariableTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate80 { }
#[must_use]
pub struct DVariableTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate81 {
    #[inline]
    fn clone(&self) -> DVariableTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate81 { }
#[must_use]
pub struct DVariableTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate82 {
    #[inline]
    fn clone(&self) -> DVariableTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate82 { }
#[must_use]
pub struct DVariableTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate83 {
    #[inline]
    fn clone(&self) -> DVariableTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate83 { }
#[must_use]
pub struct DVariableTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate84 {
    #[inline]
    fn clone(&self) -> DVariableTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate84 { }
#[must_use]
pub struct DVariableTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate85 {
    #[inline]
    fn clone(&self) -> DVariableTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate85 { }
#[must_use]
pub struct DVariableTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate86 {
    #[inline]
    fn clone(&self) -> DVariableTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate86 { }
#[must_use]
pub struct DVariableTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate87 {
    #[inline]
    fn clone(&self) -> DVariableTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate87 { }
#[must_use]
pub struct DVariableTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate88 {
    #[inline]
    fn clone(&self) -> DVariableTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate88 { }
#[must_use]
pub struct DVariableTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate89 {
    #[inline]
    fn clone(&self) -> DVariableTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate89 { }
#[must_use]
pub struct DVariableTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate90 {
    #[inline]
    fn clone(&self) -> DVariableTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate90 { }
#[must_use]
pub struct DVariableTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for DVariableTemplate91 {
    #[inline]
    fn clone(&self) -> DVariableTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for DVariableTemplate91 { }
impl<Partial, After> Template<DVariableTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<DVariableTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<DVariableTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<DVariableTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<DVariableTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<DVariableTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<DVariableTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<DVariableTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<DVariableTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<DVariableTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<DVariableTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<DVariableTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<DVariableTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<DVariableTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<DVariableTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<DVariableTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn d_variable()
    ->
        (Template<DVariableTemplate8, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<DVariableTemplate8, (),
            ()> { r#type: DVariableTemplate8, partial: (), after: () },
        gen {})
}
const _d_variable_FORCE_RECOMPILE: &'static str = "<p>{{test}}</p>";
#[must_use]
pub struct EIfElseEmptyFalseTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate0 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate0 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate1 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate1 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate2 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate2 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate3 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate3 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate4 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate4 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate5 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate5 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate6 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate6 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate7 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate7 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate8 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate8 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate9 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate9 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate10 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate10 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate11 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate11 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate12 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate12 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate13 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate13 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate14 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate14 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate15 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate15 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate16 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate16 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate17 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate17 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate18 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate18 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate19 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate19 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate20 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate20 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate21 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate21 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate22 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate22 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate23 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate23 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate24 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate24 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate25 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate25 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate26 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate26 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate27 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate27 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate28 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate28 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate29 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate29 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate30 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate30 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate31 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate31 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate32 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate32 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate33 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate33 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate34 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate34 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate35 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate35 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate36 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate36 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate37 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate37 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate38 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate38 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate39 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate39 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate40 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate40 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate41 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate41 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate42 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate42 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate43 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate43 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate44 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate44 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate45 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate45 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate46 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate46 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate47 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate47 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate48 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate48 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate49 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate49 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate50 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate50 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate51 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate51 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate52 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate52 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate53 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate53 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate54 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate54 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate55 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate55 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate56 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate56 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate57 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate57 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate58 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate58 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate59 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate59 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate60 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate60 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate61 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate61 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate62 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate62 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate63 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate63 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate64 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate64 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate65 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate65 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate66 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate66 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate67 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate67 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate68 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate68 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate69 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate69 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate70 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate70 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate71 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate71 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate72 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate72 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate73 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate73 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate74 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate74 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate75 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate75 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate76 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate76 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate77 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate77 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate78 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate78 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate79 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate79 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate80 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate80 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate81 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate81 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate82 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate82 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate83 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate83 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate84 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate84 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate85 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate85 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate86 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate86 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate87 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate87 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate88 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate88 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate89 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate89 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate90 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate90 { }
#[must_use]
pub struct EIfElseEmptyFalseTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyFalseTemplate91 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyFalseTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyFalseTemplate91 { }
impl<Partial, After> Template<EIfElseEmptyFalseTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyFalseTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyFalseTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyFalseTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyFalseTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn e_if_else_empty_false()
    ->
        (Template<EIfElseEmptyFalseTemplate9, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<EIfElseEmptyFalseTemplate9, (),
            ()> {
            r#type: EIfElseEmptyFalseTemplate9,
            partial: (),
            after: (),
        }, gen {})
}
const _e_if_else_empty_false_FORCE_RECOMPILE: &'static str =
    "{{#if author}}true{{else}}{{/if}}";
#[must_use]
pub struct EIfElseEmptyTrueTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate0 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate0 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate1 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate1 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate2 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate2 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate3 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate3 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate4 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate4 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate5 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate5 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate6 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate6 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate7 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate7 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate8 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate8 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate9 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate9 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate10 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate10 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate11 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate11 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate12 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate12 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate13 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate13 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate14 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate14 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate15 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate15 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate16 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate16 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate17 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate17 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate18 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate18 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate19 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate19 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate20 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate20 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate21 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate21 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate22 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate22 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate23 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate23 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate24 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate24 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate25 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate25 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate26 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate26 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate27 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate27 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate28 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate28 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate29 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate29 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate30 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate30 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate31 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate31 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate32 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate32 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate33 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate33 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate34 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate34 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate35 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate35 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate36 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate36 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate37 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate37 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate38 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate38 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate39 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate39 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate40 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate40 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate41 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate41 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate42 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate42 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate43 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate43 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate44 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate44 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate45 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate45 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate46 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate46 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate47 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate47 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate48 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate48 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate49 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate49 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate50 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate50 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate51 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate51 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate52 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate52 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate53 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate53 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate54 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate54 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate55 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate55 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate56 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate56 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate57 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate57 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate58 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate58 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate59 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate59 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate60 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate60 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate61 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate61 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate62 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate62 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate63 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate63 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate64 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate64 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate65 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate65 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate66 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate66 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate67 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate67 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate68 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate68 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate69 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate69 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate70 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate70 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate71 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate71 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate72 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate72 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate73 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate73 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate74 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate74 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate75 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate75 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate76 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate76 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate77 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate77 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate78 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate78 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate79 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate79 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate80 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate80 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate81 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate81 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate82 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate82 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate83 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate83 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate84 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate84 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate85 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate85 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate86 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate86 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate87 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate87 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate88 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate88 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate89 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate89 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate90 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate90 { }
#[must_use]
pub struct EIfElseEmptyTrueTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTrueTemplate91 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTrueTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTrueTemplate91 { }
impl<Partial, After> Template<EIfElseEmptyTrueTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyTrueTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyTrueTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTrueTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyTrueTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn e_if_else_empty_true()
    ->
        (Template<EIfElseEmptyTrueTemplate10, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<EIfElseEmptyTrueTemplate10, (),
            ()> {
            r#type: EIfElseEmptyTrueTemplate10,
            partial: (),
            after: (),
        }, gen {})
}
const _e_if_else_empty_true_FORCE_RECOMPILE: &'static str =
    "{{#if author}}{{else}}false{{/if}}";
#[must_use]
pub struct EIfElseEmptyTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate0 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate0 { }
#[must_use]
pub struct EIfElseEmptyTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate1 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate1 { }
#[must_use]
pub struct EIfElseEmptyTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate2 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate2 { }
#[must_use]
pub struct EIfElseEmptyTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate3 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate3 { }
#[must_use]
pub struct EIfElseEmptyTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate4 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate4 { }
#[must_use]
pub struct EIfElseEmptyTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate5 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate5 { }
#[must_use]
pub struct EIfElseEmptyTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate6 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate6 { }
#[must_use]
pub struct EIfElseEmptyTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate7 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate7 { }
#[must_use]
pub struct EIfElseEmptyTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate8 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate8 { }
#[must_use]
pub struct EIfElseEmptyTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate9 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate9 { }
#[must_use]
pub struct EIfElseEmptyTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate10 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate10 { }
#[must_use]
pub struct EIfElseEmptyTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate11 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate11 { }
#[must_use]
pub struct EIfElseEmptyTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate12 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate12 { }
#[must_use]
pub struct EIfElseEmptyTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate13 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate13 { }
#[must_use]
pub struct EIfElseEmptyTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate14 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate14 { }
#[must_use]
pub struct EIfElseEmptyTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate15 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate15 { }
#[must_use]
pub struct EIfElseEmptyTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate16 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate16 { }
#[must_use]
pub struct EIfElseEmptyTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate17 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate17 { }
#[must_use]
pub struct EIfElseEmptyTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate18 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate18 { }
#[must_use]
pub struct EIfElseEmptyTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate19 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate19 { }
#[must_use]
pub struct EIfElseEmptyTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate20 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate20 { }
#[must_use]
pub struct EIfElseEmptyTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate21 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate21 { }
#[must_use]
pub struct EIfElseEmptyTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate22 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate22 { }
#[must_use]
pub struct EIfElseEmptyTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate23 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate23 { }
#[must_use]
pub struct EIfElseEmptyTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate24 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate24 { }
#[must_use]
pub struct EIfElseEmptyTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate25 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate25 { }
#[must_use]
pub struct EIfElseEmptyTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate26 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate26 { }
#[must_use]
pub struct EIfElseEmptyTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate27 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate27 { }
#[must_use]
pub struct EIfElseEmptyTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate28 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate28 { }
#[must_use]
pub struct EIfElseEmptyTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate29 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate29 { }
#[must_use]
pub struct EIfElseEmptyTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate30 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate30 { }
#[must_use]
pub struct EIfElseEmptyTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate31 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate31 { }
#[must_use]
pub struct EIfElseEmptyTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate32 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate32 { }
#[must_use]
pub struct EIfElseEmptyTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate33 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate33 { }
#[must_use]
pub struct EIfElseEmptyTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate34 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate34 { }
#[must_use]
pub struct EIfElseEmptyTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate35 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate35 { }
#[must_use]
pub struct EIfElseEmptyTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate36 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate36 { }
#[must_use]
pub struct EIfElseEmptyTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate37 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate37 { }
#[must_use]
pub struct EIfElseEmptyTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate38 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate38 { }
#[must_use]
pub struct EIfElseEmptyTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate39 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate39 { }
#[must_use]
pub struct EIfElseEmptyTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate40 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate40 { }
#[must_use]
pub struct EIfElseEmptyTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate41 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate41 { }
#[must_use]
pub struct EIfElseEmptyTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate42 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate42 { }
#[must_use]
pub struct EIfElseEmptyTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate43 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate43 { }
#[must_use]
pub struct EIfElseEmptyTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate44 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate44 { }
#[must_use]
pub struct EIfElseEmptyTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate45 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate45 { }
#[must_use]
pub struct EIfElseEmptyTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate46 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate46 { }
#[must_use]
pub struct EIfElseEmptyTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate47 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate47 { }
#[must_use]
pub struct EIfElseEmptyTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate48 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate48 { }
#[must_use]
pub struct EIfElseEmptyTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate49 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate49 { }
#[must_use]
pub struct EIfElseEmptyTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate50 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate50 { }
#[must_use]
pub struct EIfElseEmptyTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate51 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate51 { }
#[must_use]
pub struct EIfElseEmptyTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate52 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate52 { }
#[must_use]
pub struct EIfElseEmptyTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate53 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate53 { }
#[must_use]
pub struct EIfElseEmptyTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate54 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate54 { }
#[must_use]
pub struct EIfElseEmptyTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate55 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate55 { }
#[must_use]
pub struct EIfElseEmptyTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate56 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate56 { }
#[must_use]
pub struct EIfElseEmptyTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate57 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate57 { }
#[must_use]
pub struct EIfElseEmptyTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate58 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate58 { }
#[must_use]
pub struct EIfElseEmptyTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate59 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate59 { }
#[must_use]
pub struct EIfElseEmptyTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate60 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate60 { }
#[must_use]
pub struct EIfElseEmptyTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate61 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate61 { }
#[must_use]
pub struct EIfElseEmptyTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate62 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate62 { }
#[must_use]
pub struct EIfElseEmptyTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate63 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate63 { }
#[must_use]
pub struct EIfElseEmptyTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate64 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate64 { }
#[must_use]
pub struct EIfElseEmptyTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate65 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate65 { }
#[must_use]
pub struct EIfElseEmptyTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate66 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate66 { }
#[must_use]
pub struct EIfElseEmptyTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate67 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate67 { }
#[must_use]
pub struct EIfElseEmptyTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate68 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate68 { }
#[must_use]
pub struct EIfElseEmptyTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate69 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate69 { }
#[must_use]
pub struct EIfElseEmptyTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate70 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate70 { }
#[must_use]
pub struct EIfElseEmptyTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate71 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate71 { }
#[must_use]
pub struct EIfElseEmptyTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate72 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate72 { }
#[must_use]
pub struct EIfElseEmptyTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate73 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate73 { }
#[must_use]
pub struct EIfElseEmptyTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate74 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate74 { }
#[must_use]
pub struct EIfElseEmptyTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate75 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate75 { }
#[must_use]
pub struct EIfElseEmptyTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate76 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate76 { }
#[must_use]
pub struct EIfElseEmptyTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate77 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate77 { }
#[must_use]
pub struct EIfElseEmptyTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate78 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate78 { }
#[must_use]
pub struct EIfElseEmptyTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate79 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate79 { }
#[must_use]
pub struct EIfElseEmptyTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate80 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate80 { }
#[must_use]
pub struct EIfElseEmptyTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate81 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate81 { }
#[must_use]
pub struct EIfElseEmptyTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate82 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate82 { }
#[must_use]
pub struct EIfElseEmptyTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate83 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate83 { }
#[must_use]
pub struct EIfElseEmptyTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate84 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate84 { }
#[must_use]
pub struct EIfElseEmptyTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate85 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate85 { }
#[must_use]
pub struct EIfElseEmptyTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate86 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate86 { }
#[must_use]
pub struct EIfElseEmptyTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate87 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate87 { }
#[must_use]
pub struct EIfElseEmptyTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate88 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate88 { }
#[must_use]
pub struct EIfElseEmptyTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate89 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate89 { }
#[must_use]
pub struct EIfElseEmptyTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate90 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate90 { }
#[must_use]
pub struct EIfElseEmptyTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseEmptyTemplate91 {
    #[inline]
    fn clone(&self) -> EIfElseEmptyTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseEmptyTemplate91 { }
impl<Partial, After> Template<EIfElseEmptyTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<EIfElseEmptyTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseEmptyTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn e_if_else_empty()
    ->
        (Template<EIfElseEmptyTemplate11, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<EIfElseEmptyTemplate11, (),
            ()> { r#type: EIfElseEmptyTemplate11, partial: (), after: () },
        gen {})
}
const _e_if_else_empty_FORCE_RECOMPILE: &'static str =
    "{{#if author}}{{else}}{{/if}}";
#[must_use]
pub struct EIfElseWithVariablesTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate0 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate0 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate1 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate1 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate2 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate2 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate3 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate3 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate4 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate4 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate5 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate5 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate6 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate6 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate7 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate7 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate8 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate8 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate9 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate9 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate10 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate10 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate11 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate11 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate12 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate12 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate13 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate13 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate14 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate14 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate15 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate15 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate16 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate16 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate17 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate17 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate18 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate18 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate19 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate19 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate20 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate20 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate21 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate21 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate22 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate22 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate23 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate23 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate24 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate24 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate25 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate25 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate26 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate26 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate27 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate27 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate28 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate28 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate29 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate29 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate30 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate30 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate31 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate31 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate32 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate32 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate33 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate33 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate34 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate34 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate35 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate35 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate36 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate36 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate37 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate37 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate38 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate38 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate39 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate39 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate40 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate40 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate41 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate41 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate42 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate42 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate43 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate43 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate44 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate44 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate45 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate45 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate46 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate46 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate47 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate47 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate48 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate48 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate49 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate49 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate50 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate50 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate51 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate51 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate52 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate52 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate53 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate53 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate54 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate54 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate55 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate55 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate56 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate56 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate57 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate57 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate58 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate58 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate59 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate59 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate60 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate60 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate61 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate61 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate62 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate62 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate63 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate63 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate64 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate64 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate65 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate65 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate66 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate66 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate67 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate67 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate68 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate68 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate69 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate69 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate70 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate70 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate71 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate71 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate72 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate72 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate73 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate73 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate74 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate74 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate75 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate75 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate76 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate76 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate77 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate77 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate78 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate78 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate79 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate79 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate80 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate80 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate81 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate81 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate82 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate82 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate83 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate83 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate84 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate84 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate85 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate85 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate86 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate86 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate87 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate87 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate88 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate88 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate89 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate89 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate90 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate90 { }
#[must_use]
pub struct EIfElseWithVariablesTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseWithVariablesTemplate91 {
    #[inline]
    fn clone(&self) -> EIfElseWithVariablesTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseWithVariablesTemplate91 { }
impl<Partial, After> Template<EIfElseWithVariablesTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate35, Partial, After>
    {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate12, Partial, After>
    {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate15, Partial, After>
    {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate16, Partial, After>
    {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate48, Partial, After>
    {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate17, Partial, After>
    {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate50, Partial, After>
    {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate18, Partial, After>
    {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseWithVariablesTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseWithVariablesTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate57, Partial, After>
    {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate20, Partial, After>
    {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate60, Partial, After>
    {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate59, Partial, After>
    {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate21, Partial, After>
    {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate63, Partial, After>
    {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate22, Partial, After>
    {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate68, Partial, After>
    {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate67, Partial, After>
    {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate71, Partial, After>
    {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate23, Partial, After>
    {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate74, Partial, After>
    {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate24, Partial, After>
    {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate77, Partial, After>
    {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate76, Partial, After>
    {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate80, Partial, After>
    {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate79, Partial, After>
    {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate25, Partial, After>
    {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate84, Partial, After>
    {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate83, Partial, After>
    {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate26, Partial, After>
    {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate89, Partial, After>
    {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<EIfElseWithVariablesTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseWithVariablesTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn e_if_else_with_variables()
    ->
        (Template<EIfElseWithVariablesTemplate12, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<EIfElseWithVariablesTemplate12, (),
            ()> {
            r#type: EIfElseWithVariablesTemplate12,
            partial: (),
            after: (),
        }, gen {})
}
const _e_if_else_with_variables_FORCE_RECOMPILE: &'static str =
    "<span>{{#if author}}{{t}}{{else}}{{f}}{{/if}}</span>";
#[must_use]
pub struct EIfElseTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate0 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate0 { }
#[must_use]
pub struct EIfElseTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate1 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate1 { }
#[must_use]
pub struct EIfElseTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate2 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate2 { }
#[must_use]
pub struct EIfElseTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate3 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate3 { }
#[must_use]
pub struct EIfElseTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate4 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate4 { }
#[must_use]
pub struct EIfElseTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate5 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate5 { }
#[must_use]
pub struct EIfElseTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate6 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate6 { }
#[must_use]
pub struct EIfElseTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate7 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate7 { }
#[must_use]
pub struct EIfElseTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate8 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate8 { }
#[must_use]
pub struct EIfElseTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate9 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate9 { }
#[must_use]
pub struct EIfElseTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate10 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate10 { }
#[must_use]
pub struct EIfElseTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate11 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate11 { }
#[must_use]
pub struct EIfElseTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate12 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate12 { }
#[must_use]
pub struct EIfElseTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate13 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate13 { }
#[must_use]
pub struct EIfElseTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate14 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate14 { }
#[must_use]
pub struct EIfElseTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate15 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate15 { }
#[must_use]
pub struct EIfElseTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate16 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate16 { }
#[must_use]
pub struct EIfElseTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate17 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate17 { }
#[must_use]
pub struct EIfElseTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate18 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate18 { }
#[must_use]
pub struct EIfElseTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate19 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate19 { }
#[must_use]
pub struct EIfElseTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate20 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate20 { }
#[must_use]
pub struct EIfElseTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate21 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate21 { }
#[must_use]
pub struct EIfElseTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate22 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate22 { }
#[must_use]
pub struct EIfElseTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate23 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate23 { }
#[must_use]
pub struct EIfElseTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate24 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate24 { }
#[must_use]
pub struct EIfElseTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate25 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate25 { }
#[must_use]
pub struct EIfElseTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate26 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate26 { }
#[must_use]
pub struct EIfElseTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate27 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate27 { }
#[must_use]
pub struct EIfElseTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate28 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate28 { }
#[must_use]
pub struct EIfElseTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate29 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate29 { }
#[must_use]
pub struct EIfElseTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate30 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate30 { }
#[must_use]
pub struct EIfElseTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate31 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate31 { }
#[must_use]
pub struct EIfElseTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate32 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate32 { }
#[must_use]
pub struct EIfElseTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate33 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate33 { }
#[must_use]
pub struct EIfElseTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate34 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate34 { }
#[must_use]
pub struct EIfElseTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate35 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate35 { }
#[must_use]
pub struct EIfElseTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate36 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate36 { }
#[must_use]
pub struct EIfElseTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate37 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate37 { }
#[must_use]
pub struct EIfElseTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate38 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate38 { }
#[must_use]
pub struct EIfElseTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate39 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate39 { }
#[must_use]
pub struct EIfElseTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate40 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate40 { }
#[must_use]
pub struct EIfElseTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate41 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate41 { }
#[must_use]
pub struct EIfElseTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate42 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate42 { }
#[must_use]
pub struct EIfElseTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate43 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate43 { }
#[must_use]
pub struct EIfElseTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate44 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate44 { }
#[must_use]
pub struct EIfElseTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate45 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate45 { }
#[must_use]
pub struct EIfElseTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate46 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate46 { }
#[must_use]
pub struct EIfElseTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate47 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate47 { }
#[must_use]
pub struct EIfElseTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate48 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate48 { }
#[must_use]
pub struct EIfElseTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate49 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate49 { }
#[must_use]
pub struct EIfElseTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate50 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate50 { }
#[must_use]
pub struct EIfElseTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate51 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate51 { }
#[must_use]
pub struct EIfElseTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate52 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate52 { }
#[must_use]
pub struct EIfElseTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate53 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate53 { }
#[must_use]
pub struct EIfElseTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate54 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate54 { }
#[must_use]
pub struct EIfElseTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate55 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate55 { }
#[must_use]
pub struct EIfElseTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate56 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate56 { }
#[must_use]
pub struct EIfElseTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate57 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate57 { }
#[must_use]
pub struct EIfElseTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate58 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate58 { }
#[must_use]
pub struct EIfElseTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate59 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate59 { }
#[must_use]
pub struct EIfElseTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate60 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate60 { }
#[must_use]
pub struct EIfElseTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate61 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate61 { }
#[must_use]
pub struct EIfElseTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate62 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate62 { }
#[must_use]
pub struct EIfElseTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate63 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate63 { }
#[must_use]
pub struct EIfElseTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate64 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate64 { }
#[must_use]
pub struct EIfElseTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate65 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate65 { }
#[must_use]
pub struct EIfElseTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate66 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate66 { }
#[must_use]
pub struct EIfElseTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate67 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate67 { }
#[must_use]
pub struct EIfElseTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate68 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate68 { }
#[must_use]
pub struct EIfElseTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate69 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate69 { }
#[must_use]
pub struct EIfElseTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate70 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate70 { }
#[must_use]
pub struct EIfElseTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate71 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate71 { }
#[must_use]
pub struct EIfElseTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate72 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate72 { }
#[must_use]
pub struct EIfElseTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate73 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate73 { }
#[must_use]
pub struct EIfElseTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate74 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate74 { }
#[must_use]
pub struct EIfElseTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate75 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate75 { }
#[must_use]
pub struct EIfElseTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate76 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate76 { }
#[must_use]
pub struct EIfElseTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate77 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate77 { }
#[must_use]
pub struct EIfElseTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate78 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate78 { }
#[must_use]
pub struct EIfElseTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate79 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate79 { }
#[must_use]
pub struct EIfElseTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate80 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate80 { }
#[must_use]
pub struct EIfElseTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate81 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate81 { }
#[must_use]
pub struct EIfElseTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate82 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate82 { }
#[must_use]
pub struct EIfElseTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate83 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate83 { }
#[must_use]
pub struct EIfElseTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate84 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate84 { }
#[must_use]
pub struct EIfElseTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate85 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate85 { }
#[must_use]
pub struct EIfElseTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate86 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate86 { }
#[must_use]
pub struct EIfElseTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate87 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate87 { }
#[must_use]
pub struct EIfElseTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate88 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate88 { }
#[must_use]
pub struct EIfElseTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate89 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate89 { }
#[must_use]
pub struct EIfElseTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate90 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate90 { }
#[must_use]
pub struct EIfElseTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for EIfElseTemplate91 {
    #[inline]
    fn clone(&self) -> EIfElseTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for EIfElseTemplate91 { }
impl<Partial, After> Template<EIfElseTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<EIfElseTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<EIfElseTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<EIfElseTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<EIfElseTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn e_if_else()
    ->
        (Template<EIfElseTemplate13, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<EIfElseTemplate13, (),
            ()> { r#type: EIfElseTemplate13, partial: (), after: () }, gen {})
}
const _e_if_else_FORCE_RECOMPILE: &'static str =
    "{{#if author}}true{{else}}false{{/if}}";
#[must_use]
pub struct FEachEmptyTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate0 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate0 { }
#[must_use]
pub struct FEachEmptyTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate1 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate1 { }
#[must_use]
pub struct FEachEmptyTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate2 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate2 { }
#[must_use]
pub struct FEachEmptyTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate3 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate3 { }
#[must_use]
pub struct FEachEmptyTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate4 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate4 { }
#[must_use]
pub struct FEachEmptyTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate5 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate5 { }
#[must_use]
pub struct FEachEmptyTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate6 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate6 { }
#[must_use]
pub struct FEachEmptyTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate7 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate7 { }
#[must_use]
pub struct FEachEmptyTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate8 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate8 { }
#[must_use]
pub struct FEachEmptyTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate9 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate9 { }
#[must_use]
pub struct FEachEmptyTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate10 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate10 { }
#[must_use]
pub struct FEachEmptyTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate11 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate11 { }
#[must_use]
pub struct FEachEmptyTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate12 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate12 { }
#[must_use]
pub struct FEachEmptyTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate13 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate13 { }
#[must_use]
pub struct FEachEmptyTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate14 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate14 { }
#[must_use]
pub struct FEachEmptyTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate15 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate15 { }
#[must_use]
pub struct FEachEmptyTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate16 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate16 { }
#[must_use]
pub struct FEachEmptyTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate17 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate17 { }
#[must_use]
pub struct FEachEmptyTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate18 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate18 { }
#[must_use]
pub struct FEachEmptyTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate19 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate19 { }
#[must_use]
pub struct FEachEmptyTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate20 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate20 { }
#[must_use]
pub struct FEachEmptyTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate21 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate21 { }
#[must_use]
pub struct FEachEmptyTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate22 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate22 { }
#[must_use]
pub struct FEachEmptyTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate23 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate23 { }
#[must_use]
pub struct FEachEmptyTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate24 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate24 { }
#[must_use]
pub struct FEachEmptyTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate25 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate25 { }
#[must_use]
pub struct FEachEmptyTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate26 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate26 { }
#[must_use]
pub struct FEachEmptyTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate27 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate27 { }
#[must_use]
pub struct FEachEmptyTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate28 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate28 { }
#[must_use]
pub struct FEachEmptyTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate29 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate29 { }
#[must_use]
pub struct FEachEmptyTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate30 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate30 { }
#[must_use]
pub struct FEachEmptyTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate31 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate31 { }
#[must_use]
pub struct FEachEmptyTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate32 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate32 { }
#[must_use]
pub struct FEachEmptyTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate33 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate33 { }
#[must_use]
pub struct FEachEmptyTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate34 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate34 { }
#[must_use]
pub struct FEachEmptyTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate35 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate35 { }
#[must_use]
pub struct FEachEmptyTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate36 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate36 { }
#[must_use]
pub struct FEachEmptyTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate37 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate37 { }
#[must_use]
pub struct FEachEmptyTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate38 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate38 { }
#[must_use]
pub struct FEachEmptyTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate39 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate39 { }
#[must_use]
pub struct FEachEmptyTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate40 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate40 { }
#[must_use]
pub struct FEachEmptyTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate41 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate41 { }
#[must_use]
pub struct FEachEmptyTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate42 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate42 { }
#[must_use]
pub struct FEachEmptyTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate43 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate43 { }
#[must_use]
pub struct FEachEmptyTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate44 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate44 { }
#[must_use]
pub struct FEachEmptyTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate45 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate45 { }
#[must_use]
pub struct FEachEmptyTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate46 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate46 { }
#[must_use]
pub struct FEachEmptyTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate47 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate47 { }
#[must_use]
pub struct FEachEmptyTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate48 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate48 { }
#[must_use]
pub struct FEachEmptyTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate49 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate49 { }
#[must_use]
pub struct FEachEmptyTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate50 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate50 { }
#[must_use]
pub struct FEachEmptyTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate51 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate51 { }
#[must_use]
pub struct FEachEmptyTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate52 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate52 { }
#[must_use]
pub struct FEachEmptyTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate53 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate53 { }
#[must_use]
pub struct FEachEmptyTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate54 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate54 { }
#[must_use]
pub struct FEachEmptyTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate55 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate55 { }
#[must_use]
pub struct FEachEmptyTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate56 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate56 { }
#[must_use]
pub struct FEachEmptyTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate57 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate57 { }
#[must_use]
pub struct FEachEmptyTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate58 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate58 { }
#[must_use]
pub struct FEachEmptyTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate59 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate59 { }
#[must_use]
pub struct FEachEmptyTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate60 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate60 { }
#[must_use]
pub struct FEachEmptyTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate61 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate61 { }
#[must_use]
pub struct FEachEmptyTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate62 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate62 { }
#[must_use]
pub struct FEachEmptyTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate63 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate63 { }
#[must_use]
pub struct FEachEmptyTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate64 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate64 { }
#[must_use]
pub struct FEachEmptyTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate65 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate65 { }
#[must_use]
pub struct FEachEmptyTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate66 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate66 { }
#[must_use]
pub struct FEachEmptyTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate67 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate67 { }
#[must_use]
pub struct FEachEmptyTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate68 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate68 { }
#[must_use]
pub struct FEachEmptyTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate69 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate69 { }
#[must_use]
pub struct FEachEmptyTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate70 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate70 { }
#[must_use]
pub struct FEachEmptyTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate71 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate71 { }
#[must_use]
pub struct FEachEmptyTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate72 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate72 { }
#[must_use]
pub struct FEachEmptyTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate73 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate73 { }
#[must_use]
pub struct FEachEmptyTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate74 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate74 { }
#[must_use]
pub struct FEachEmptyTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate75 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate75 { }
#[must_use]
pub struct FEachEmptyTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate76 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate76 { }
#[must_use]
pub struct FEachEmptyTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate77 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate77 { }
#[must_use]
pub struct FEachEmptyTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate78 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate78 { }
#[must_use]
pub struct FEachEmptyTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate79 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate79 { }
#[must_use]
pub struct FEachEmptyTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate80 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate80 { }
#[must_use]
pub struct FEachEmptyTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate81 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate81 { }
#[must_use]
pub struct FEachEmptyTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate82 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate82 { }
#[must_use]
pub struct FEachEmptyTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate83 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate83 { }
#[must_use]
pub struct FEachEmptyTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate84 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate84 { }
#[must_use]
pub struct FEachEmptyTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate85 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate85 { }
#[must_use]
pub struct FEachEmptyTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate86 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate86 { }
#[must_use]
pub struct FEachEmptyTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate87 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate87 { }
#[must_use]
pub struct FEachEmptyTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate88 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate88 { }
#[must_use]
pub struct FEachEmptyTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate89 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate89 { }
#[must_use]
pub struct FEachEmptyTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate90 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate90 { }
#[must_use]
pub struct FEachEmptyTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for FEachEmptyTemplate91 {
    #[inline]
    fn clone(&self) -> FEachEmptyTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachEmptyTemplate91 { }
impl<Partial, After> Template<FEachEmptyTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<FEachEmptyTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<FEachEmptyTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<FEachEmptyTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<FEachEmptyTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn f_each_empty()
    ->
        (Template<FEachEmptyTemplate14, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<FEachEmptyTemplate14, (),
            ()> { r#type: FEachEmptyTemplate14, partial: (), after: () },
        gen {})
}
const _f_each_empty_FORCE_RECOMPILE: &'static str =
    "{{#each articles}}{{/each}}";
#[must_use]
pub struct FEachOneVariableTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate0 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate0 { }
#[must_use]
pub struct FEachOneVariableTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate1 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate1 { }
#[must_use]
pub struct FEachOneVariableTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate2 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate2 { }
#[must_use]
pub struct FEachOneVariableTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate3 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate3 { }
#[must_use]
pub struct FEachOneVariableTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate4 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate4 { }
#[must_use]
pub struct FEachOneVariableTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate5 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate5 { }
#[must_use]
pub struct FEachOneVariableTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate6 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate6 { }
#[must_use]
pub struct FEachOneVariableTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate7 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate7 { }
#[must_use]
pub struct FEachOneVariableTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate8 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate8 { }
#[must_use]
pub struct FEachOneVariableTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate9 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate9 { }
#[must_use]
pub struct FEachOneVariableTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate10 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate10 { }
#[must_use]
pub struct FEachOneVariableTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate11 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate11 { }
#[must_use]
pub struct FEachOneVariableTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate12 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate12 { }
#[must_use]
pub struct FEachOneVariableTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate13 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate13 { }
#[must_use]
pub struct FEachOneVariableTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate14 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate14 { }
#[must_use]
pub struct FEachOneVariableTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate15 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate15 { }
#[must_use]
pub struct FEachOneVariableTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate16 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate16 { }
#[must_use]
pub struct FEachOneVariableTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate17 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate17 { }
#[must_use]
pub struct FEachOneVariableTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate18 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate18 { }
#[must_use]
pub struct FEachOneVariableTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate19 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate19 { }
#[must_use]
pub struct FEachOneVariableTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate20 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate20 { }
#[must_use]
pub struct FEachOneVariableTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate21 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate21 { }
#[must_use]
pub struct FEachOneVariableTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate22 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate22 { }
#[must_use]
pub struct FEachOneVariableTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate23 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate23 { }
#[must_use]
pub struct FEachOneVariableTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate24 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate24 { }
#[must_use]
pub struct FEachOneVariableTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate25 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate25 { }
#[must_use]
pub struct FEachOneVariableTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate26 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate26 { }
#[must_use]
pub struct FEachOneVariableTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate27 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate27 { }
#[must_use]
pub struct FEachOneVariableTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate28 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate28 { }
#[must_use]
pub struct FEachOneVariableTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate29 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate29 { }
#[must_use]
pub struct FEachOneVariableTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate30 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate30 { }
#[must_use]
pub struct FEachOneVariableTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate31 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate31 { }
#[must_use]
pub struct FEachOneVariableTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate32 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate32 { }
#[must_use]
pub struct FEachOneVariableTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate33 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate33 { }
#[must_use]
pub struct FEachOneVariableTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate34 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate34 { }
#[must_use]
pub struct FEachOneVariableTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate35 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate35 { }
#[must_use]
pub struct FEachOneVariableTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate36 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate36 { }
#[must_use]
pub struct FEachOneVariableTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate37 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate37 { }
#[must_use]
pub struct FEachOneVariableTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate38 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate38 { }
#[must_use]
pub struct FEachOneVariableTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate39 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate39 { }
#[must_use]
pub struct FEachOneVariableTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate40 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate40 { }
#[must_use]
pub struct FEachOneVariableTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate41 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate41 { }
#[must_use]
pub struct FEachOneVariableTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate42 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate42 { }
#[must_use]
pub struct FEachOneVariableTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate43 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate43 { }
#[must_use]
pub struct FEachOneVariableTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate44 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate44 { }
#[must_use]
pub struct FEachOneVariableTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate45 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate45 { }
#[must_use]
pub struct FEachOneVariableTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate46 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate46 { }
#[must_use]
pub struct FEachOneVariableTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate47 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate47 { }
#[must_use]
pub struct FEachOneVariableTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate48 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate48 { }
#[must_use]
pub struct FEachOneVariableTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate49 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate49 { }
#[must_use]
pub struct FEachOneVariableTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate50 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate50 { }
#[must_use]
pub struct FEachOneVariableTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate51 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate51 { }
#[must_use]
pub struct FEachOneVariableTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate52 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate52 { }
#[must_use]
pub struct FEachOneVariableTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate53 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate53 { }
#[must_use]
pub struct FEachOneVariableTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate54 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate54 { }
#[must_use]
pub struct FEachOneVariableTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate55 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate55 { }
#[must_use]
pub struct FEachOneVariableTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate56 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate56 { }
#[must_use]
pub struct FEachOneVariableTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate57 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate57 { }
#[must_use]
pub struct FEachOneVariableTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate58 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate58 { }
#[must_use]
pub struct FEachOneVariableTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate59 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate59 { }
#[must_use]
pub struct FEachOneVariableTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate60 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate60 { }
#[must_use]
pub struct FEachOneVariableTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate61 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate61 { }
#[must_use]
pub struct FEachOneVariableTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate62 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate62 { }
#[must_use]
pub struct FEachOneVariableTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate63 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate63 { }
#[must_use]
pub struct FEachOneVariableTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate64 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate64 { }
#[must_use]
pub struct FEachOneVariableTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate65 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate65 { }
#[must_use]
pub struct FEachOneVariableTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate66 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate66 { }
#[must_use]
pub struct FEachOneVariableTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate67 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate67 { }
#[must_use]
pub struct FEachOneVariableTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate68 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate68 { }
#[must_use]
pub struct FEachOneVariableTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate69 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate69 { }
#[must_use]
pub struct FEachOneVariableTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate70 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate70 { }
#[must_use]
pub struct FEachOneVariableTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate71 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate71 { }
#[must_use]
pub struct FEachOneVariableTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate72 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate72 { }
#[must_use]
pub struct FEachOneVariableTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate73 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate73 { }
#[must_use]
pub struct FEachOneVariableTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate74 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate74 { }
#[must_use]
pub struct FEachOneVariableTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate75 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate75 { }
#[must_use]
pub struct FEachOneVariableTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate76 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate76 { }
#[must_use]
pub struct FEachOneVariableTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate77 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate77 { }
#[must_use]
pub struct FEachOneVariableTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate78 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate78 { }
#[must_use]
pub struct FEachOneVariableTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate79 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate79 { }
#[must_use]
pub struct FEachOneVariableTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate80 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate80 { }
#[must_use]
pub struct FEachOneVariableTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate81 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate81 { }
#[must_use]
pub struct FEachOneVariableTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate82 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate82 { }
#[must_use]
pub struct FEachOneVariableTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate83 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate83 { }
#[must_use]
pub struct FEachOneVariableTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate84 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate84 { }
#[must_use]
pub struct FEachOneVariableTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate85 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate85 { }
#[must_use]
pub struct FEachOneVariableTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate86 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate86 { }
#[must_use]
pub struct FEachOneVariableTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate87 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate87 { }
#[must_use]
pub struct FEachOneVariableTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate88 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate88 { }
#[must_use]
pub struct FEachOneVariableTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate89 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate89 { }
#[must_use]
pub struct FEachOneVariableTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate90 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate90 { }
#[must_use]
pub struct FEachOneVariableTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for FEachOneVariableTemplate91 {
    #[inline]
    fn clone(&self) -> FEachOneVariableTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachOneVariableTemplate91 { }
impl<Partial, After> Template<FEachOneVariableTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<FEachOneVariableTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<FEachOneVariableTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<FEachOneVariableTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<FEachOneVariableTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn f_each_one_variable()
    ->
        (Template<FEachOneVariableTemplate15, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<FEachOneVariableTemplate15, (),
            ()> {
            r#type: FEachOneVariableTemplate15,
            partial: (),
            after: (),
        }, gen {})
}
const _f_each_one_variable_FORCE_RECOMPILE: &'static str =
    "<span>{{#each articles}}{{title}}{{/each}}</span>";
#[must_use]
pub struct FEachTwoVariablesTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate0 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate0 { }
#[must_use]
pub struct FEachTwoVariablesTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate1 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate1 { }
#[must_use]
pub struct FEachTwoVariablesTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate2 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate2 { }
#[must_use]
pub struct FEachTwoVariablesTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate3 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate3 { }
#[must_use]
pub struct FEachTwoVariablesTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate4 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate4 { }
#[must_use]
pub struct FEachTwoVariablesTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate5 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate5 { }
#[must_use]
pub struct FEachTwoVariablesTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate6 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate6 { }
#[must_use]
pub struct FEachTwoVariablesTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate7 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate7 { }
#[must_use]
pub struct FEachTwoVariablesTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate8 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate8 { }
#[must_use]
pub struct FEachTwoVariablesTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate9 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate9 { }
#[must_use]
pub struct FEachTwoVariablesTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate10 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate10 { }
#[must_use]
pub struct FEachTwoVariablesTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate11 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate11 { }
#[must_use]
pub struct FEachTwoVariablesTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate12 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate12 { }
#[must_use]
pub struct FEachTwoVariablesTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate13 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate13 { }
#[must_use]
pub struct FEachTwoVariablesTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate14 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate14 { }
#[must_use]
pub struct FEachTwoVariablesTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate15 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate15 { }
#[must_use]
pub struct FEachTwoVariablesTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate16 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate16 { }
#[must_use]
pub struct FEachTwoVariablesTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate17 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate17 { }
#[must_use]
pub struct FEachTwoVariablesTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate18 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate18 { }
#[must_use]
pub struct FEachTwoVariablesTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate19 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate19 { }
#[must_use]
pub struct FEachTwoVariablesTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate20 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate20 { }
#[must_use]
pub struct FEachTwoVariablesTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate21 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate21 { }
#[must_use]
pub struct FEachTwoVariablesTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate22 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate22 { }
#[must_use]
pub struct FEachTwoVariablesTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate23 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate23 { }
#[must_use]
pub struct FEachTwoVariablesTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate24 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate24 { }
#[must_use]
pub struct FEachTwoVariablesTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate25 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate25 { }
#[must_use]
pub struct FEachTwoVariablesTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate26 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate26 { }
#[must_use]
pub struct FEachTwoVariablesTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate27 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate27 { }
#[must_use]
pub struct FEachTwoVariablesTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate28 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate28 { }
#[must_use]
pub struct FEachTwoVariablesTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate29 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate29 { }
#[must_use]
pub struct FEachTwoVariablesTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate30 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate30 { }
#[must_use]
pub struct FEachTwoVariablesTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate31 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate31 { }
#[must_use]
pub struct FEachTwoVariablesTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate32 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate32 { }
#[must_use]
pub struct FEachTwoVariablesTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate33 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate33 { }
#[must_use]
pub struct FEachTwoVariablesTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate34 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate34 { }
#[must_use]
pub struct FEachTwoVariablesTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate35 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate35 { }
#[must_use]
pub struct FEachTwoVariablesTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate36 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate36 { }
#[must_use]
pub struct FEachTwoVariablesTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate37 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate37 { }
#[must_use]
pub struct FEachTwoVariablesTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate38 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate38 { }
#[must_use]
pub struct FEachTwoVariablesTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate39 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate39 { }
#[must_use]
pub struct FEachTwoVariablesTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate40 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate40 { }
#[must_use]
pub struct FEachTwoVariablesTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate41 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate41 { }
#[must_use]
pub struct FEachTwoVariablesTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate42 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate42 { }
#[must_use]
pub struct FEachTwoVariablesTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate43 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate43 { }
#[must_use]
pub struct FEachTwoVariablesTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate44 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate44 { }
#[must_use]
pub struct FEachTwoVariablesTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate45 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate45 { }
#[must_use]
pub struct FEachTwoVariablesTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate46 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate46 { }
#[must_use]
pub struct FEachTwoVariablesTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate47 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate47 { }
#[must_use]
pub struct FEachTwoVariablesTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate48 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate48 { }
#[must_use]
pub struct FEachTwoVariablesTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate49 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate49 { }
#[must_use]
pub struct FEachTwoVariablesTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate50 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate50 { }
#[must_use]
pub struct FEachTwoVariablesTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate51 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate51 { }
#[must_use]
pub struct FEachTwoVariablesTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate52 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate52 { }
#[must_use]
pub struct FEachTwoVariablesTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate53 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate53 { }
#[must_use]
pub struct FEachTwoVariablesTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate54 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate54 { }
#[must_use]
pub struct FEachTwoVariablesTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate55 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate55 { }
#[must_use]
pub struct FEachTwoVariablesTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate56 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate56 { }
#[must_use]
pub struct FEachTwoVariablesTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate57 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate57 { }
#[must_use]
pub struct FEachTwoVariablesTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate58 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate58 { }
#[must_use]
pub struct FEachTwoVariablesTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate59 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate59 { }
#[must_use]
pub struct FEachTwoVariablesTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate60 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate60 { }
#[must_use]
pub struct FEachTwoVariablesTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate61 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate61 { }
#[must_use]
pub struct FEachTwoVariablesTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate62 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate62 { }
#[must_use]
pub struct FEachTwoVariablesTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate63 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate63 { }
#[must_use]
pub struct FEachTwoVariablesTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate64 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate64 { }
#[must_use]
pub struct FEachTwoVariablesTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate65 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate65 { }
#[must_use]
pub struct FEachTwoVariablesTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate66 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate66 { }
#[must_use]
pub struct FEachTwoVariablesTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate67 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate67 { }
#[must_use]
pub struct FEachTwoVariablesTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate68 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate68 { }
#[must_use]
pub struct FEachTwoVariablesTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate69 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate69 { }
#[must_use]
pub struct FEachTwoVariablesTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate70 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate70 { }
#[must_use]
pub struct FEachTwoVariablesTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate71 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate71 { }
#[must_use]
pub struct FEachTwoVariablesTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate72 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate72 { }
#[must_use]
pub struct FEachTwoVariablesTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate73 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate73 { }
#[must_use]
pub struct FEachTwoVariablesTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate74 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate74 { }
#[must_use]
pub struct FEachTwoVariablesTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate75 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate75 { }
#[must_use]
pub struct FEachTwoVariablesTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate76 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate76 { }
#[must_use]
pub struct FEachTwoVariablesTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate77 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate77 { }
#[must_use]
pub struct FEachTwoVariablesTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate78 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate78 { }
#[must_use]
pub struct FEachTwoVariablesTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate79 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate79 { }
#[must_use]
pub struct FEachTwoVariablesTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate80 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate80 { }
#[must_use]
pub struct FEachTwoVariablesTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate81 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate81 { }
#[must_use]
pub struct FEachTwoVariablesTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate82 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate82 { }
#[must_use]
pub struct FEachTwoVariablesTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate83 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate83 { }
#[must_use]
pub struct FEachTwoVariablesTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate84 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate84 { }
#[must_use]
pub struct FEachTwoVariablesTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate85 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate85 { }
#[must_use]
pub struct FEachTwoVariablesTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate86 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate86 { }
#[must_use]
pub struct FEachTwoVariablesTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate87 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate87 { }
#[must_use]
pub struct FEachTwoVariablesTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate88 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate88 { }
#[must_use]
pub struct FEachTwoVariablesTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate89 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate89 { }
#[must_use]
pub struct FEachTwoVariablesTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate90 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate90 { }
#[must_use]
pub struct FEachTwoVariablesTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesTemplate91 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesTemplate91 { }
impl<Partial, After> Template<FEachTwoVariablesTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<FEachTwoVariablesTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<FEachTwoVariablesTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<FEachTwoVariablesTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn f_each_two_variables()
    ->
        (Template<FEachTwoVariablesTemplate16, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<FEachTwoVariablesTemplate16, (),
            ()> {
            r#type: FEachTwoVariablesTemplate16,
            partial: (),
            after: (),
        }, gen {})
}
const _f_each_two_variables_FORCE_RECOMPILE: &'static str =
    "<span>{{#each articles}}{{title}}{{content}}{{/each}}</span>";
#[must_use]
pub struct GEmptyTemplateMultipleTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate0 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate0 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate1 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate1 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate2 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate2 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate3 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate3 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate4 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate4 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate5 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate5 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate6 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate6 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate7 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate7 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate8 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate8 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate9 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate9 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate10 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate10 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate11 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate11 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate12 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate12 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate13 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate13 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate14 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate14 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate15 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate15 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate16 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate16 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate17 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate17 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate18 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate18 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate19 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate19 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate20 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate20 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate21 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate21 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate22 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate22 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate23 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate23 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate24 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate24 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate25 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate25 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate26 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate26 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate27 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate27 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate28 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate28 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate29 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate29 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate30 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate30 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate31 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate31 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate32 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate32 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate33 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate33 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate34 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate34 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate35 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate35 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate36 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate36 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate37 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate37 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate38 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate38 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate39 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate39 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate40 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate40 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate41 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate41 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate42 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate42 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate43 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate43 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate44 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate44 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate45 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate45 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate46 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate46 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate47 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate47 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate48 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate48 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate49 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate49 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate50 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate50 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate51 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate51 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate52 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate52 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate53 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate53 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate54 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate54 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate55 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate55 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate56 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate56 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate57 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate57 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate58 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate58 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate59 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate59 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate60 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate60 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate61 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate61 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate62 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate62 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate63 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate63 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate64 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate64 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate65 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate65 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate66 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate66 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate67 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate67 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate68 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate68 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate69 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate69 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate70 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate70 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate71 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate71 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate72 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate72 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate73 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate73 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate74 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate74 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate75 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate75 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate76 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate76 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate77 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate77 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate78 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate78 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate79 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate79 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate80 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate80 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate81 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate81 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate82 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate82 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate83 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate83 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate84 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate84 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate85 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate85 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate86 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate86 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate87 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate87 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate88 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate88 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate89 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate89 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate90 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate90 { }
#[must_use]
pub struct GEmptyTemplateMultipleTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateMultipleTemplate91 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateMultipleTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateMultipleTemplate91 { }
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate1, Partial, After>
    {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate2, Partial, After>
    {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate3, Partial, After>
    {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate4, Partial, After>
    {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate5, Partial, After>
    {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate6, Partial, After>
    {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate7, Partial, After>
    {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate8, Partial, After>
    {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate9, Partial, After>
    {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateMultipleTemplate9, Partial, After>
    {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GEmptyTemplateMultipleTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GEmptyTemplateMultipleTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GEmptyTemplateMultipleTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GEmptyTemplateMultipleTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_empty_template_multiple()
    ->
        (Template<GEmptyTemplateMultipleTemplate17, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GEmptyTemplateMultipleTemplate17, (),
            ()> {
            r#type: GEmptyTemplateMultipleTemplate17,
            partial: (),
            after: (),
        }, gen {})
}
const _g_empty_template_multiple_FORCE_RECOMPILE: &'static str =
    "{{#>a_empty}}{{/a_empty}}{{#>a_empty}}{{/a_empty}}";
#[must_use]
pub struct GEmptyTemplateTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate0 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate0 { }
#[must_use]
pub struct GEmptyTemplateTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate1 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate1 { }
#[must_use]
pub struct GEmptyTemplateTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate2 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate2 { }
#[must_use]
pub struct GEmptyTemplateTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate3 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate3 { }
#[must_use]
pub struct GEmptyTemplateTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate4 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate4 { }
#[must_use]
pub struct GEmptyTemplateTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate5 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate5 { }
#[must_use]
pub struct GEmptyTemplateTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate6 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate6 { }
#[must_use]
pub struct GEmptyTemplateTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate7 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate7 { }
#[must_use]
pub struct GEmptyTemplateTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate8 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate8 { }
#[must_use]
pub struct GEmptyTemplateTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate9 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate9 { }
#[must_use]
pub struct GEmptyTemplateTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate10 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate10 { }
#[must_use]
pub struct GEmptyTemplateTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate11 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate11 { }
#[must_use]
pub struct GEmptyTemplateTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate12 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate12 { }
#[must_use]
pub struct GEmptyTemplateTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate13 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate13 { }
#[must_use]
pub struct GEmptyTemplateTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate14 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate14 { }
#[must_use]
pub struct GEmptyTemplateTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate15 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate15 { }
#[must_use]
pub struct GEmptyTemplateTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate16 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate16 { }
#[must_use]
pub struct GEmptyTemplateTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate17 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate17 { }
#[must_use]
pub struct GEmptyTemplateTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate18 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate18 { }
#[must_use]
pub struct GEmptyTemplateTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate19 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate19 { }
#[must_use]
pub struct GEmptyTemplateTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate20 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate20 { }
#[must_use]
pub struct GEmptyTemplateTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate21 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate21 { }
#[must_use]
pub struct GEmptyTemplateTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate22 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate22 { }
#[must_use]
pub struct GEmptyTemplateTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate23 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate23 { }
#[must_use]
pub struct GEmptyTemplateTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate24 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate24 { }
#[must_use]
pub struct GEmptyTemplateTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate25 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate25 { }
#[must_use]
pub struct GEmptyTemplateTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate26 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate26 { }
#[must_use]
pub struct GEmptyTemplateTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate27 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate27 { }
#[must_use]
pub struct GEmptyTemplateTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate28 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate28 { }
#[must_use]
pub struct GEmptyTemplateTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate29 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate29 { }
#[must_use]
pub struct GEmptyTemplateTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate30 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate30 { }
#[must_use]
pub struct GEmptyTemplateTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate31 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate31 { }
#[must_use]
pub struct GEmptyTemplateTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate32 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate32 { }
#[must_use]
pub struct GEmptyTemplateTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate33 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate33 { }
#[must_use]
pub struct GEmptyTemplateTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate34 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate34 { }
#[must_use]
pub struct GEmptyTemplateTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate35 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate35 { }
#[must_use]
pub struct GEmptyTemplateTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate36 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate36 { }
#[must_use]
pub struct GEmptyTemplateTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate37 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate37 { }
#[must_use]
pub struct GEmptyTemplateTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate38 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate38 { }
#[must_use]
pub struct GEmptyTemplateTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate39 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate39 { }
#[must_use]
pub struct GEmptyTemplateTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate40 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate40 { }
#[must_use]
pub struct GEmptyTemplateTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate41 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate41 { }
#[must_use]
pub struct GEmptyTemplateTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate42 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate42 { }
#[must_use]
pub struct GEmptyTemplateTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate43 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate43 { }
#[must_use]
pub struct GEmptyTemplateTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate44 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate44 { }
#[must_use]
pub struct GEmptyTemplateTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate45 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate45 { }
#[must_use]
pub struct GEmptyTemplateTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate46 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate46 { }
#[must_use]
pub struct GEmptyTemplateTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate47 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate47 { }
#[must_use]
pub struct GEmptyTemplateTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate48 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate48 { }
#[must_use]
pub struct GEmptyTemplateTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate49 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate49 { }
#[must_use]
pub struct GEmptyTemplateTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate50 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate50 { }
#[must_use]
pub struct GEmptyTemplateTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate51 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate51 { }
#[must_use]
pub struct GEmptyTemplateTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate52 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate52 { }
#[must_use]
pub struct GEmptyTemplateTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate53 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate53 { }
#[must_use]
pub struct GEmptyTemplateTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate54 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate54 { }
#[must_use]
pub struct GEmptyTemplateTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate55 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate55 { }
#[must_use]
pub struct GEmptyTemplateTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate56 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate56 { }
#[must_use]
pub struct GEmptyTemplateTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate57 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate57 { }
#[must_use]
pub struct GEmptyTemplateTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate58 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate58 { }
#[must_use]
pub struct GEmptyTemplateTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate59 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate59 { }
#[must_use]
pub struct GEmptyTemplateTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate60 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate60 { }
#[must_use]
pub struct GEmptyTemplateTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate61 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate61 { }
#[must_use]
pub struct GEmptyTemplateTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate62 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate62 { }
#[must_use]
pub struct GEmptyTemplateTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate63 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate63 { }
#[must_use]
pub struct GEmptyTemplateTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate64 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate64 { }
#[must_use]
pub struct GEmptyTemplateTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate65 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate65 { }
#[must_use]
pub struct GEmptyTemplateTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate66 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate66 { }
#[must_use]
pub struct GEmptyTemplateTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate67 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate67 { }
#[must_use]
pub struct GEmptyTemplateTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate68 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate68 { }
#[must_use]
pub struct GEmptyTemplateTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate69 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate69 { }
#[must_use]
pub struct GEmptyTemplateTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate70 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate70 { }
#[must_use]
pub struct GEmptyTemplateTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate71 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate71 { }
#[must_use]
pub struct GEmptyTemplateTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate72 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate72 { }
#[must_use]
pub struct GEmptyTemplateTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate73 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate73 { }
#[must_use]
pub struct GEmptyTemplateTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate74 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate74 { }
#[must_use]
pub struct GEmptyTemplateTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate75 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate75 { }
#[must_use]
pub struct GEmptyTemplateTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate76 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate76 { }
#[must_use]
pub struct GEmptyTemplateTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate77 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate77 { }
#[must_use]
pub struct GEmptyTemplateTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate78 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate78 { }
#[must_use]
pub struct GEmptyTemplateTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate79 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate79 { }
#[must_use]
pub struct GEmptyTemplateTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate80 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate80 { }
#[must_use]
pub struct GEmptyTemplateTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate81 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate81 { }
#[must_use]
pub struct GEmptyTemplateTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate82 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate82 { }
#[must_use]
pub struct GEmptyTemplateTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate83 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate83 { }
#[must_use]
pub struct GEmptyTemplateTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate84 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate84 { }
#[must_use]
pub struct GEmptyTemplateTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate85 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate85 { }
#[must_use]
pub struct GEmptyTemplateTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate86 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate86 { }
#[must_use]
pub struct GEmptyTemplateTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate87 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate87 { }
#[must_use]
pub struct GEmptyTemplateTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate88 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate88 { }
#[must_use]
pub struct GEmptyTemplateTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate89 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate89 { }
#[must_use]
pub struct GEmptyTemplateTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate90 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate90 { }
#[must_use]
pub struct GEmptyTemplateTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for GEmptyTemplateTemplate91 {
    #[inline]
    fn clone(&self) -> GEmptyTemplateTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GEmptyTemplateTemplate91 { }
impl<Partial, After> Template<GEmptyTemplateTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GEmptyTemplateTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GEmptyTemplateTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<GEmptyTemplateTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GEmptyTemplateTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_empty_template()
    ->
        (Template<GEmptyTemplateTemplate18, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GEmptyTemplateTemplate18, (),
            ()> { r#type: GEmptyTemplateTemplate18, partial: (), after: () },
        gen {})
}
const _g_empty_template_FORCE_RECOMPILE: &'static str =
    "{{#>a_empty}}{{/a_empty}}";
#[must_use]
pub struct GPartialBlockPartialTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate0 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate0 { }
#[must_use]
pub struct GPartialBlockPartialTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate1 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate1 { }
#[must_use]
pub struct GPartialBlockPartialTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate2 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate2 { }
#[must_use]
pub struct GPartialBlockPartialTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate3 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate3 { }
#[must_use]
pub struct GPartialBlockPartialTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate4 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate4 { }
#[must_use]
pub struct GPartialBlockPartialTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate5 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate5 { }
#[must_use]
pub struct GPartialBlockPartialTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate6 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate6 { }
#[must_use]
pub struct GPartialBlockPartialTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate7 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate7 { }
#[must_use]
pub struct GPartialBlockPartialTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate8 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate8 { }
#[must_use]
pub struct GPartialBlockPartialTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate9 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate9 { }
#[must_use]
pub struct GPartialBlockPartialTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate10 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate10 { }
#[must_use]
pub struct GPartialBlockPartialTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate11 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate11 { }
#[must_use]
pub struct GPartialBlockPartialTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate12 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate12 { }
#[must_use]
pub struct GPartialBlockPartialTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate13 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate13 { }
#[must_use]
pub struct GPartialBlockPartialTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate14 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate14 { }
#[must_use]
pub struct GPartialBlockPartialTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate15 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate15 { }
#[must_use]
pub struct GPartialBlockPartialTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate16 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate16 { }
#[must_use]
pub struct GPartialBlockPartialTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate17 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate17 { }
#[must_use]
pub struct GPartialBlockPartialTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate18 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate18 { }
#[must_use]
pub struct GPartialBlockPartialTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate19 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate19 { }
#[must_use]
pub struct GPartialBlockPartialTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate20 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate20 { }
#[must_use]
pub struct GPartialBlockPartialTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate21 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate21 { }
#[must_use]
pub struct GPartialBlockPartialTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate22 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate22 { }
#[must_use]
pub struct GPartialBlockPartialTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate23 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate23 { }
#[must_use]
pub struct GPartialBlockPartialTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate24 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate24 { }
#[must_use]
pub struct GPartialBlockPartialTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate25 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate25 { }
#[must_use]
pub struct GPartialBlockPartialTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate26 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate26 { }
#[must_use]
pub struct GPartialBlockPartialTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate27 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate27 { }
#[must_use]
pub struct GPartialBlockPartialTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate28 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate28 { }
#[must_use]
pub struct GPartialBlockPartialTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate29 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate29 { }
#[must_use]
pub struct GPartialBlockPartialTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate30 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate30 { }
#[must_use]
pub struct GPartialBlockPartialTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate31 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate31 { }
#[must_use]
pub struct GPartialBlockPartialTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate32 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate32 { }
#[must_use]
pub struct GPartialBlockPartialTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate33 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate33 { }
#[must_use]
pub struct GPartialBlockPartialTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate34 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate34 { }
#[must_use]
pub struct GPartialBlockPartialTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate35 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate35 { }
#[must_use]
pub struct GPartialBlockPartialTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate36 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate36 { }
#[must_use]
pub struct GPartialBlockPartialTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate37 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate37 { }
#[must_use]
pub struct GPartialBlockPartialTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate38 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate38 { }
#[must_use]
pub struct GPartialBlockPartialTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate39 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate39 { }
#[must_use]
pub struct GPartialBlockPartialTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate40 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate40 { }
#[must_use]
pub struct GPartialBlockPartialTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate41 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate41 { }
#[must_use]
pub struct GPartialBlockPartialTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate42 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate42 { }
#[must_use]
pub struct GPartialBlockPartialTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate43 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate43 { }
#[must_use]
pub struct GPartialBlockPartialTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate44 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate44 { }
#[must_use]
pub struct GPartialBlockPartialTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate45 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate45 { }
#[must_use]
pub struct GPartialBlockPartialTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate46 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate46 { }
#[must_use]
pub struct GPartialBlockPartialTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate47 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate47 { }
#[must_use]
pub struct GPartialBlockPartialTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate48 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate48 { }
#[must_use]
pub struct GPartialBlockPartialTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate49 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate49 { }
#[must_use]
pub struct GPartialBlockPartialTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate50 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate50 { }
#[must_use]
pub struct GPartialBlockPartialTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate51 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate51 { }
#[must_use]
pub struct GPartialBlockPartialTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate52 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate52 { }
#[must_use]
pub struct GPartialBlockPartialTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate53 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate53 { }
#[must_use]
pub struct GPartialBlockPartialTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate54 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate54 { }
#[must_use]
pub struct GPartialBlockPartialTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate55 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate55 { }
#[must_use]
pub struct GPartialBlockPartialTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate56 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate56 { }
#[must_use]
pub struct GPartialBlockPartialTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate57 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate57 { }
#[must_use]
pub struct GPartialBlockPartialTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate58 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate58 { }
#[must_use]
pub struct GPartialBlockPartialTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate59 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate59 { }
#[must_use]
pub struct GPartialBlockPartialTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate60 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate60 { }
#[must_use]
pub struct GPartialBlockPartialTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate61 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate61 { }
#[must_use]
pub struct GPartialBlockPartialTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate62 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate62 { }
#[must_use]
pub struct GPartialBlockPartialTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate63 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate63 { }
#[must_use]
pub struct GPartialBlockPartialTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate64 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate64 { }
#[must_use]
pub struct GPartialBlockPartialTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate65 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate65 { }
#[must_use]
pub struct GPartialBlockPartialTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate66 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate66 { }
#[must_use]
pub struct GPartialBlockPartialTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate67 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate67 { }
#[must_use]
pub struct GPartialBlockPartialTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate68 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate68 { }
#[must_use]
pub struct GPartialBlockPartialTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate69 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate69 { }
#[must_use]
pub struct GPartialBlockPartialTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate70 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate70 { }
#[must_use]
pub struct GPartialBlockPartialTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate71 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate71 { }
#[must_use]
pub struct GPartialBlockPartialTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate72 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate72 { }
#[must_use]
pub struct GPartialBlockPartialTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate73 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate73 { }
#[must_use]
pub struct GPartialBlockPartialTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate74 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate74 { }
#[must_use]
pub struct GPartialBlockPartialTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate75 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate75 { }
#[must_use]
pub struct GPartialBlockPartialTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate76 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate76 { }
#[must_use]
pub struct GPartialBlockPartialTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate77 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate77 { }
#[must_use]
pub struct GPartialBlockPartialTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate78 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate78 { }
#[must_use]
pub struct GPartialBlockPartialTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate79 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate79 { }
#[must_use]
pub struct GPartialBlockPartialTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate80 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate80 { }
#[must_use]
pub struct GPartialBlockPartialTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate81 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate81 { }
#[must_use]
pub struct GPartialBlockPartialTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate82 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate82 { }
#[must_use]
pub struct GPartialBlockPartialTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate83 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate83 { }
#[must_use]
pub struct GPartialBlockPartialTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate84 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate84 { }
#[must_use]
pub struct GPartialBlockPartialTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate85 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate85 { }
#[must_use]
pub struct GPartialBlockPartialTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate86 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate86 { }
#[must_use]
pub struct GPartialBlockPartialTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate87 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate87 { }
#[must_use]
pub struct GPartialBlockPartialTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate88 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate88 { }
#[must_use]
pub struct GPartialBlockPartialTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate89 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate89 { }
#[must_use]
pub struct GPartialBlockPartialTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate90 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate90 { }
#[must_use]
pub struct GPartialBlockPartialTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockPartialTemplate91 {
    #[inline]
    fn clone(&self) -> GPartialBlockPartialTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockPartialTemplate91 { }
impl<Partial, After> Template<GPartialBlockPartialTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate35, Partial, After>
    {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate12, Partial, After>
    {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate15, Partial, After>
    {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate16, Partial, After>
    {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate48, Partial, After>
    {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate17, Partial, After>
    {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate50, Partial, After>
    {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate18, Partial, After>
    {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GPartialBlockPartialTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GPartialBlockPartialTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate57, Partial, After>
    {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate20, Partial, After>
    {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate60, Partial, After>
    {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate59, Partial, After>
    {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate21, Partial, After>
    {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate63, Partial, After>
    {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate22, Partial, After>
    {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate68, Partial, After>
    {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate67, Partial, After>
    {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate71, Partial, After>
    {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate23, Partial, After>
    {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate74, Partial, After>
    {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate24, Partial, After>
    {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate77, Partial, After>
    {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate76, Partial, After>
    {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate80, Partial, After>
    {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate79, Partial, After>
    {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate25, Partial, After>
    {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate84, Partial, After>
    {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate83, Partial, After>
    {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate26, Partial, After>
    {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate89, Partial, After>
    {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<GPartialBlockPartialTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GPartialBlockPartialTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_partial_block_partial()
    ->
        (Template<GPartialBlockPartialTemplate19, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GPartialBlockPartialTemplate19, (),
            ()> {
            r#type: GPartialBlockPartialTemplate19,
            partial: (),
            after: (),
        }, gen {})
}
const _g_partial_block_partial_FORCE_RECOMPILE: &'static str =
    "<span>{{before}}<p>{{>@partial-block}}</p><div>{{>@partial-block}}</div>{{after}}</span>";
#[must_use]
pub struct GPartialBlockTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate0 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate0 { }
#[must_use]
pub struct GPartialBlockTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate1 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate1 { }
#[must_use]
pub struct GPartialBlockTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate2 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate2 { }
#[must_use]
pub struct GPartialBlockTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate3 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate3 { }
#[must_use]
pub struct GPartialBlockTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate4 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate4 { }
#[must_use]
pub struct GPartialBlockTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate5 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate5 { }
#[must_use]
pub struct GPartialBlockTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate6 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate6 { }
#[must_use]
pub struct GPartialBlockTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate7 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate7 { }
#[must_use]
pub struct GPartialBlockTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate8 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate8 { }
#[must_use]
pub struct GPartialBlockTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate9 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate9 { }
#[must_use]
pub struct GPartialBlockTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate10 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate10 { }
#[must_use]
pub struct GPartialBlockTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate11 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate11 { }
#[must_use]
pub struct GPartialBlockTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate12 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate12 { }
#[must_use]
pub struct GPartialBlockTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate13 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate13 { }
#[must_use]
pub struct GPartialBlockTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate14 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate14 { }
#[must_use]
pub struct GPartialBlockTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate15 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate15 { }
#[must_use]
pub struct GPartialBlockTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate16 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate16 { }
#[must_use]
pub struct GPartialBlockTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate17 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate17 { }
#[must_use]
pub struct GPartialBlockTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate18 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate18 { }
#[must_use]
pub struct GPartialBlockTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate19 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate19 { }
#[must_use]
pub struct GPartialBlockTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate20 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate20 { }
#[must_use]
pub struct GPartialBlockTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate21 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate21 { }
#[must_use]
pub struct GPartialBlockTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate22 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate22 { }
#[must_use]
pub struct GPartialBlockTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate23 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate23 { }
#[must_use]
pub struct GPartialBlockTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate24 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate24 { }
#[must_use]
pub struct GPartialBlockTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate25 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate25 { }
#[must_use]
pub struct GPartialBlockTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate26 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate26 { }
#[must_use]
pub struct GPartialBlockTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate27 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate27 { }
#[must_use]
pub struct GPartialBlockTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate28 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate28 { }
#[must_use]
pub struct GPartialBlockTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate29 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate29 { }
#[must_use]
pub struct GPartialBlockTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate30 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate30 { }
#[must_use]
pub struct GPartialBlockTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate31 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate31 { }
#[must_use]
pub struct GPartialBlockTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate32 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate32 { }
#[must_use]
pub struct GPartialBlockTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate33 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate33 { }
#[must_use]
pub struct GPartialBlockTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate34 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate34 { }
#[must_use]
pub struct GPartialBlockTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate35 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate35 { }
#[must_use]
pub struct GPartialBlockTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate36 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate36 { }
#[must_use]
pub struct GPartialBlockTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate37 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate37 { }
#[must_use]
pub struct GPartialBlockTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate38 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate38 { }
#[must_use]
pub struct GPartialBlockTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate39 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate39 { }
#[must_use]
pub struct GPartialBlockTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate40 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate40 { }
#[must_use]
pub struct GPartialBlockTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate41 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate41 { }
#[must_use]
pub struct GPartialBlockTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate42 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate42 { }
#[must_use]
pub struct GPartialBlockTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate43 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate43 { }
#[must_use]
pub struct GPartialBlockTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate44 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate44 { }
#[must_use]
pub struct GPartialBlockTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate45 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate45 { }
#[must_use]
pub struct GPartialBlockTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate46 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate46 { }
#[must_use]
pub struct GPartialBlockTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate47 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate47 { }
#[must_use]
pub struct GPartialBlockTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate48 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate48 { }
#[must_use]
pub struct GPartialBlockTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate49 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate49 { }
#[must_use]
pub struct GPartialBlockTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate50 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate50 { }
#[must_use]
pub struct GPartialBlockTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate51 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate51 { }
#[must_use]
pub struct GPartialBlockTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate52 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate52 { }
#[must_use]
pub struct GPartialBlockTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate53 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate53 { }
#[must_use]
pub struct GPartialBlockTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate54 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate54 { }
#[must_use]
pub struct GPartialBlockTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate55 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate55 { }
#[must_use]
pub struct GPartialBlockTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate56 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate56 { }
#[must_use]
pub struct GPartialBlockTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate57 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate57 { }
#[must_use]
pub struct GPartialBlockTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate58 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate58 { }
#[must_use]
pub struct GPartialBlockTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate59 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate59 { }
#[must_use]
pub struct GPartialBlockTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate60 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate60 { }
#[must_use]
pub struct GPartialBlockTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate61 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate61 { }
#[must_use]
pub struct GPartialBlockTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate62 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate62 { }
#[must_use]
pub struct GPartialBlockTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate63 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate63 { }
#[must_use]
pub struct GPartialBlockTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate64 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate64 { }
#[must_use]
pub struct GPartialBlockTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate65 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate65 { }
#[must_use]
pub struct GPartialBlockTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate66 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate66 { }
#[must_use]
pub struct GPartialBlockTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate67 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate67 { }
#[must_use]
pub struct GPartialBlockTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate68 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate68 { }
#[must_use]
pub struct GPartialBlockTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate69 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate69 { }
#[must_use]
pub struct GPartialBlockTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate70 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate70 { }
#[must_use]
pub struct GPartialBlockTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate71 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate71 { }
#[must_use]
pub struct GPartialBlockTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate72 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate72 { }
#[must_use]
pub struct GPartialBlockTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate73 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate73 { }
#[must_use]
pub struct GPartialBlockTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate74 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate74 { }
#[must_use]
pub struct GPartialBlockTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate75 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate75 { }
#[must_use]
pub struct GPartialBlockTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate76 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate76 { }
#[must_use]
pub struct GPartialBlockTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate77 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate77 { }
#[must_use]
pub struct GPartialBlockTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate78 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate78 { }
#[must_use]
pub struct GPartialBlockTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate79 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate79 { }
#[must_use]
pub struct GPartialBlockTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate80 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate80 { }
#[must_use]
pub struct GPartialBlockTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate81 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate81 { }
#[must_use]
pub struct GPartialBlockTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate82 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate82 { }
#[must_use]
pub struct GPartialBlockTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate83 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate83 { }
#[must_use]
pub struct GPartialBlockTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate84 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate84 { }
#[must_use]
pub struct GPartialBlockTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate85 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate85 { }
#[must_use]
pub struct GPartialBlockTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate86 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate86 { }
#[must_use]
pub struct GPartialBlockTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate87 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate87 { }
#[must_use]
pub struct GPartialBlockTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate88 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate88 { }
#[must_use]
pub struct GPartialBlockTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate89 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate89 { }
#[must_use]
pub struct GPartialBlockTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate90 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate90 { }
#[must_use]
pub struct GPartialBlockTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for GPartialBlockTemplate91 {
    #[inline]
    fn clone(&self) -> GPartialBlockTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GPartialBlockTemplate91 { }
impl<Partial, After> Template<GPartialBlockTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GPartialBlockTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GPartialBlockTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<GPartialBlockTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GPartialBlockTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_partial_block()
    ->
        (Template<GPartialBlockTemplate20, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GPartialBlockTemplate20, (),
            ()> { r#type: GPartialBlockTemplate20, partial: (), after: () },
        gen {})
}
const _g_partial_block_FORCE_RECOMPILE: &'static str =
    "<span>hello{{#>g_partial_block_partial}}childrenstart{{test}}childrenend{{/g_partial_block_partial}}world</span>";
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate0 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate0 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate1 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate1 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate2 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate2 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate3 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate3 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate4 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate4 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate5 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate5 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate6 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate6 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate7 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate7 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate8 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate8 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate9 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate9 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate10 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate10 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate11 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate11 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate12 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate12 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate13 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate13 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate14 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate14 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate15 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate15 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate16 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate16 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate17 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate17 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate18 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate18 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate19 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate19 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate20 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate20 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate21 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate21 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate22 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate22 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate23 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate23 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate24 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate24 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate25 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate25 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate26 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate26 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate27 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate27 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate28 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate28 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate29 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate29 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate30 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate30 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate31 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate31 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate32 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate32 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate33 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate33 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate34 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate34 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate35 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate35 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate36 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate36 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate37 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate37 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate38 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate38 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate39 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate39 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate40 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate40 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate41 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate41 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate42 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate42 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate43 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate43 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate44 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate44 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate45 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate45 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate46 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate46 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate47 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate47 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate48 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate48 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate49 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate49 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate50 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate50 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate51 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate51 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate52 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate52 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate53 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate53 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate54 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate54 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate55 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate55 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate56 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate56 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate57 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate57 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate58 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate58 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate59 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate59 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate60 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate60 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate61 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate61 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate62 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate62 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate63 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate63 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate64 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate64 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate65 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate65 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate66 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate66 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate67 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate67 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate68 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate68 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate69 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate69 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate70 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate70 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate71 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate71 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate72 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate72 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate73 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate73 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate74 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate74 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate75 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate75 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate76 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate76 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate77 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate77 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate78 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate78 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate79 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate79 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate80 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate80 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate81 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate81 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate82 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate82 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate83 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate83 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate84 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate84 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate85 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate85 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate86 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate86 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate87 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate87 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate88 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate88 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate89 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate89 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate90 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate90 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockMultipleTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockMultipleTemplate91 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockMultipleTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockMultipleTemplate91 { }
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockMultipleTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_template_only_partial_block_multiple()
    ->
        (Template<GTemplateOnlyPartialBlockMultipleTemplate21, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GTemplateOnlyPartialBlockMultipleTemplate21, (),
            ()> {
            r#type: GTemplateOnlyPartialBlockMultipleTemplate21,
            partial: (),
            after: (),
        }, gen {})
}
const _g_template_only_partial_block_multiple_FORCE_RECOMPILE: &'static str =
    "{{#>g_only_partial_block}}{{/g_only_partial_block}}{{#>g_only_partial_block}}{{/g_only_partial_block}}";
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate0 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate0 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate0 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate1 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate1 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate1 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate2 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate2 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate2 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate3 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate3 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate3 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate4 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate4 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate4 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate5 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate5 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate5 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate6 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate6 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate6 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate7 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate7 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate7 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate8 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate8 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate8 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate9 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate9 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate9 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate10 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate10 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate10 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate11 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate11 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate11 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate12 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate12 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate12 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate13 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate13 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate13 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate14 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate14 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate14 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate15 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate15 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate15 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate16 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate16 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate16 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate17 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate17 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate17 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate18 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate18 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate18 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate19 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate19 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate19 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate20 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate20 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate20 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate21 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate21 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate21 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate22 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate22 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate22 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate23 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate23 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate23 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate24 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate24 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate24 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate25 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate25 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate25 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate26 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate26 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate26 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate27 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate27 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate27 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate28 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate28 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate28 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate29 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate29 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate29 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate30 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate30 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate30 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate31 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate31 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate31 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate32 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate32 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate32 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate33 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate33 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate33 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate34 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate34 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate34 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate35 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate35 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate35 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate36 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate36 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate36 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate37 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate37 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate37 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate38 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate38 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate38 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate39 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate39 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate39 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate40 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate40 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate40 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate41 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate41 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate41 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate42 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate42 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate42 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate43 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate43 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate43 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate44 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate44 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate44 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate45 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate45 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate45 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate46 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate46 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate46 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate47 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate47 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate47 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate48 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate48 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate48 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate49 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate49 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate49 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate50 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate50 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate50 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate51 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate51 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate51 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate52 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate52 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate52 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate53 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate53 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate53 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate54 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate54 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate54 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate55 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate55 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate55 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate56 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate56 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate56 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate57 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate57 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate57 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate58 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate58 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate58 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate59 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate59 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate59 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate60 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate60 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate60 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate61 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate61 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate61 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate62 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate62 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate62 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate63 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate63 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate63 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate64 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate64 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate64 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate65 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate65 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate65 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate66 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate66 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate66 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate67 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate67 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate67 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate68 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate68 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate68 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate69 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate69 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate69 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate70 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate70 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate70 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate71 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate71 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate71 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate72 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate72 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate72 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate73 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate73 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate73 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate74 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate74 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate74 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate75 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate75 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate75 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate76 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate76 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate76 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate77 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate77 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate77 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate78 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate78 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate78 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate79 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate79 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate79 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate80 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate80 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate80 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate81 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate81 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate81 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate82 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate82 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate82 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate83 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate83 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate83 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate84 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate84 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate84 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate85 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate85 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate85 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate86 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate86 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate86 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate87 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate87 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate87 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate88 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate88 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate88 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate89 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate89 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate89 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate90 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate90 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate90 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextMultipleTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate91 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextMultipleTemplate91 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithTextMultipleTemplate91 {
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate1, Partial,
    After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate2, Partial,
    After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate3, Partial,
    After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate4, Partial,
    After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate5, Partial,
    After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate6, Partial,
    After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate7, Partial,
    After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate35, Partial,
    After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate8, Partial,
    After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate9, Partial,
    After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate9, Partial,
    After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate10, Partial,
    After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate10, Partial,
    After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate11, Partial,
    After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate11, Partial,
    After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate12, Partial,
    After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate41, Partial,
    After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate41, Partial,
    After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate13, Partial,
    After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate13, Partial,
    After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate14, Partial,
    After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate14, Partial,
    After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate15, Partial,
    After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate45, Partial,
    After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate45, Partial,
    After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate16, Partial,
    After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate47, Partial,
    After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate48, Partial,
    After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate47, Partial,
    After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate17, Partial,
    After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate50, Partial,
    After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate18, Partial,
    After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate57, Partial,
    After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate20, Partial,
    After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate60, Partial,
    After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate59, Partial,
    After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate21, Partial,
    After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate63, Partial,
    After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate22, Partial,
    After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, Partial,
    After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, Partial,
    After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, Partial,
    After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate23, Partial,
    After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate74, Partial,
    After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate24, Partial,
    After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate77, Partial,
    After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate76, Partial,
    After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate80, Partial,
    After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate79, Partial,
    After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate25, Partial,
    After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate84, Partial,
    After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate83, Partial,
    After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate26, Partial,
    After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate27, Partial,
    After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate89, Partial,
    After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate27, Partial,
    After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_template_only_partial_block_with_text_multiple()
    ->
        (Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate22, (),
        ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate22, (),
            ()> {
            r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate22,
            partial: (),
            after: (),
        }, gen {})
}
const _g_template_only_partial_block_with_text_multiple_FORCE_RECOMPILE:
    &'static str =
    "{{#>g_only_partial_block}}test{{/g_only_partial_block}}{{#>g_only_partial_block}}test{{/g_only_partial_block}}";
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate0 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate0 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate1 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate1 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate2 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate2 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate3 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate3 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate4 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate4 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate5 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate5 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate6 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate6 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate7 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate7 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate8 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate8 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate9 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate9 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate10 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate10 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate11 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate11 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate12 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate12 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate13 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate13 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate14 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate14 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate15 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate15 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate16 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate16 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate17 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate17 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate18 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate18 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate19 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate19 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate20 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate20 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate21 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate21 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate22 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate22 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate23 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate23 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate24 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate24 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate25 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate25 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate26 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate26 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate27 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate27 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate28 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate28 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate29 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate29 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate30 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate30 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate31 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate31 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate32 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate32 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate33 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate33 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate34 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate34 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate35 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate35 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate36 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate36 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate37 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate37 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate38 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate38 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate39 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate39 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate40 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate40 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate41 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate41 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate42 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate42 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate43 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate43 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate44 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate44 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate45 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate45 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate46 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate46 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate47 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate47 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate48 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate48 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate49 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate49 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate50 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate50 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate51 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate51 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate52 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate52 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate53 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate53 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate54 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate54 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate55 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate55 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate56 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate56 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate57 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate57 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate58 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate58 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate59 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate59 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate60 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate60 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate61 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate61 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate62 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate62 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate63 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate63 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate64 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate64 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate65 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate65 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate66 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate66 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate67 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate67 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate68 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate68 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate69 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate69 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate70 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate70 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate71 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate71 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate72 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate72 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate73 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate73 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate74 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate74 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate75 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate75 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate76 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate76 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate77 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate77 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate78 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate78 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate79 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate79 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate80 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate80 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate81 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate81 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate82 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate82 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate83 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate83 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate84 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate84 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate85 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate85 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate86 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate86 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate87 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate87 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate88 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate88 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate89 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate89 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate90 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate90 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockWithTextTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithTextTemplate91 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithTextTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithTextTemplate91 { }
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithTextTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_template_only_partial_block_with_text()
    ->
        (Template<GTemplateOnlyPartialBlockWithTextTemplate23, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GTemplateOnlyPartialBlockWithTextTemplate23, (),
            ()> {
            r#type: GTemplateOnlyPartialBlockWithTextTemplate23,
            partial: (),
            after: (),
        }, gen {})
}
const _g_template_only_partial_block_with_text_FORCE_RECOMPILE: &'static str =
    "{{#>g_only_partial_block}}test{{/g_only_partial_block}}";
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate0 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate0 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate0 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate1 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate1 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate1 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate2 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate2 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate2 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate3 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate3 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate3 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate4 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate4 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate4 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate5 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate5 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate5 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate6 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate6 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate6 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate7 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate7 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate7 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate8 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate8 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate8 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate9 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate9 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate9 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate10 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate10 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate10 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate11 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate11 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate11 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate12 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate12 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate12 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate13 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate13 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate13 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate14 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate14 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate14 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate15 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate15 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate15 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate16 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate16 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate16 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate17 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate17 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate17 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate18 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate18 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate18 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate19 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate19 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate19 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate20 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate20 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate20 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate21 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate21 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate21 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate22 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate22 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate22 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate23 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate23 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate23 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate24 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate24 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate24 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate25 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate25 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate25 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate26 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate26 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate26 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate27 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate27 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate27 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate28 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate28 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate28 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate29 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate29 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate29 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate30 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate30 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate30 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate31 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate31 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate31 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate32 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate32 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate32 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate33 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate33 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate33 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate34 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate34 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate34 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate35 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate35 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate35 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate36 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate36 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate36 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate37 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate37 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate37 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate38 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate38 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate38 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate39 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate39 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate39 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate40 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate40 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate40 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate41 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate41 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate41 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate42 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate42 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate42 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate43 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate43 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate43 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate44 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate44 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate44 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate45 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate45 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate45 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate46 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate46 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate46 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate47 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate47 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate47 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate48 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate48 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate48 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate49 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate49 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate49 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate50 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate50 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate50 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate51 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate51 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate51 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate52 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate52 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate52 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate53 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate53 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate53 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate54 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate54 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate54 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate55 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate55 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate55 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate56 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate56 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate56 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate57 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate57 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate57 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate58 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate58 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate58 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate59 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate59 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate59 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate60 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate60 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate60 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate61 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate61 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate61 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate62 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate62 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate62 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate63 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate63 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate63 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate64 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate64 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate64 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate65 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate65 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate65 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate66 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate66 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate66 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate67 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate67 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate67 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate68 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate68 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate68 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate69 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate69 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate69 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate70 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate70 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate70 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate71 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate71 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate71 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate72 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate72 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate72 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate73 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate73 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate73 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate74 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate74 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate74 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate75 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate75 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate75 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate76 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate76 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate76 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate77 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate77 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate77 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate78 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate78 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate78 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate79 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate79 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate79 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate80 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate80 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate80 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate81 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate81 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate81 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate82 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate82 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate82 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate83 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate83 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate83 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate84 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate84 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate84 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate85 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate85 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate85 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate86 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate86 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate86 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate87 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate87 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate87 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate88 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate88 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate88 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate89 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate89 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate89 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate90 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate90 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate90 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableMultipleTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate91 {
    #[inline]
    fn clone(&self)
        -> GTemplateOnlyPartialBlockWithVariableMultipleTemplate91 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for
    GTemplateOnlyPartialBlockWithVariableMultipleTemplate91 {
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate1, Partial,
    After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate2, Partial,
    After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate3, Partial,
    After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate4, Partial,
    After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate5, Partial,
    After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate6, Partial,
    After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate7, Partial,
    After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate35, Partial,
    After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate8, Partial,
    After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate9, Partial,
    After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate9, Partial,
    After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate10, Partial,
    After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate10, Partial,
    After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate11, Partial,
    After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate11, Partial,
    After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate12, Partial,
    After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate41, Partial,
    After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate41, Partial,
    After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate13, Partial,
    After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate13, Partial,
    After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate14, Partial,
    After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate14, Partial,
    After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate15, Partial,
    After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate45, Partial,
    After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate45, Partial,
    After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate16, Partial,
    After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate47, Partial,
    After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate48, Partial,
    After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate47, Partial,
    After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate17, Partial,
    After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate50, Partial,
    After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate18, Partial,
    After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate57, Partial,
    After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate20, Partial,
    After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate60, Partial,
    After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate59, Partial,
    After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate21, Partial,
    After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate63, Partial,
    After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate22, Partial,
    After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate68, Partial,
    After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate67, Partial,
    After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate71, Partial,
    After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate23, Partial,
    After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate74, Partial,
    After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate24, Partial,
    After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77, Partial,
    After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76, Partial,
    After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80, Partial,
    After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79, Partial,
    After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate25, Partial,
    After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate84, Partial,
    After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate83, Partial,
    After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate26, Partial,
    After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate27, Partial,
    After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate89, Partial,
    After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate27, Partial,
    After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_template_only_partial_block_with_variable_multiple()
    ->
        (Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate24, (),
        ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate24, (),
            ()> {
            r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate24,
            partial: (),
            after: (),
        }, gen {})
}
const _g_template_only_partial_block_with_variable_multiple_FORCE_RECOMPILE:
    &'static str =
    "<span>{{#>g_only_partial_block}}{{test}}{{/g_only_partial_block}}{{#>g_only_partial_block}}{{test}}{{/g_only_partial_block}}</span>";
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate0 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate0 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate0 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate1 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate1 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate1 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate2 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate2 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate2 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate3 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate3 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate3 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate4 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate4 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate4 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate5 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate5 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate5 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate6 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate6 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate6 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate7 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate7 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate7 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate8 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate8 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate8 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate9 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate9 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate9 {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate10
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate10 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate10
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate11
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate11 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate11
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate12
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate12 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate12
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate13
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate13 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate13
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate14
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate14 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate14
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate15
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate15 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate15
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate16
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate16 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate16
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate17
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate17 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate17
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate18
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate18 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate18
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate19
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate19 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate19
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate20
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate20 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate20
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate21
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate21 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate21
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate22
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate22 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate22
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate23
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate23 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate23
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate24
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate24 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate24
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate25
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate25 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate25
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate26
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate26 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate26
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate27
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate27 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate27
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate28
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate28 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate28
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate29
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate29 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate29
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate30
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate30 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate30
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate31
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate31 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate31
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate32
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate32 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate32
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate33
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate33 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate33
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate34
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate34 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate34
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate35
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate35 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate35
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate36
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate36 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate36
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate37
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate37 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate37
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate38
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate38 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate38
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate39
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate39 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate39
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate40
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate40 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate40
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate41
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate41 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate41
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate42
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate42 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate42
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate43
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate43 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate43
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate44
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate44 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate44
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate45
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate45 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate45
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate46
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate46 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate46
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate47
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate47 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate47
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate48
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate48 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate48
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate49
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate49 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate49
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate50
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate50 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate50
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate51
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate51 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate51
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate52
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate52 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate52
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate53
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate53 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate53
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate54
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate54 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate54
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate55
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate55 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate55
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate56
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate56 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate56
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate57
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate57 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate57
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate58
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate58 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate58
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate59
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate59 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate59
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate60
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate60 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate60
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate61
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate61 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate61
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate62
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate62 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate62
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate63
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate63 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate63
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate64
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate64 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate64
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate65
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate65 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate65
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate66
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate66 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate66
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate67
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate67 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate67
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate68
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate68 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate68
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate69
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate69 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate69
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate70
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate70 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate70
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate71
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate71 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate71
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate72
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate72 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate72
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate73
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate73 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate73
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate74
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate74 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate74
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate75
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate75 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate75
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate76
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate76 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate76
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate77
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate77 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate77
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate78
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate78 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate78
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate79
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate79 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate79
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate80
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate80 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate80
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate81
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate81 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate81
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate82
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate82 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate82
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate83
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate83 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate83
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate84
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate84 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate84
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate85
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate85 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate85
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate86
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate86 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate86
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate87
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate87 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate87
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate88
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate88 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate88
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate89
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate89 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate89
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate90
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate90 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate90
    {
}
#[must_use]
pub struct GTemplateOnlyPartialBlockWithVariableTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockWithVariableTemplate91
    {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockWithVariableTemplate91 {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockWithVariableTemplate91
    {
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate35, Partial, After>
    {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate12, Partial, After>
    {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate15, Partial, After>
    {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate16, Partial, After>
    {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate48, Partial, After>
    {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate17, Partial, After>
    {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate50, Partial, After>
    {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate18, Partial, After>
    {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate57, Partial, After>
    {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate20, Partial, After>
    {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate60, Partial, After>
    {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate59, Partial, After>
    {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate21, Partial, After>
    {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate63, Partial, After>
    {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate22, Partial, After>
    {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate68, Partial, After>
    {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate67, Partial, After>
    {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate71, Partial, After>
    {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate23, Partial, After>
    {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate74, Partial, After>
    {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate24, Partial, After>
    {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate77, Partial, After>
    {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate76, Partial, After>
    {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate80, Partial, After>
    {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate79, Partial, After>
    {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate25, Partial, After>
    {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate84, Partial, After>
    {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate83, Partial, After>
    {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate26, Partial, After>
    {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate89, Partial, After>
    {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockWithVariableTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_template_only_partial_block_with_variable()
    ->
        (Template<GTemplateOnlyPartialBlockWithVariableTemplate25, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GTemplateOnlyPartialBlockWithVariableTemplate25, (),
            ()> {
            r#type: GTemplateOnlyPartialBlockWithVariableTemplate25,
            partial: (),
            after: (),
        }, gen {})
}
const _g_template_only_partial_block_with_variable_FORCE_RECOMPILE:
    &'static str =
    "<span>{{#>g_only_partial_block}}{{test}}{{/g_only_partial_block}}</span>";
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate0 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate0 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate1 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate1 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate2 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate2 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate3 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate3 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate4 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate4 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate5 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate5 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate6 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate6 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate7 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate7 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate8 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate8 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate9 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate9 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate10 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate10 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate11 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate11 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate12 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate12 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate13 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate13 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate14 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate14 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate15 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate15 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate16 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate16 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate17 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate17 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate18 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate18 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate19 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate19 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate20 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate20 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate21 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate21 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate22 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate22 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate23 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate23 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate24 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate24 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate25 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate25 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate26 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate26 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate27 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate27 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate28 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate28 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate29 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate29 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate30 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate30 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate31 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate31 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate32 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate32 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate33 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate33 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate34 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate34 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate35 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate35 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate36 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate36 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate37 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate37 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate38 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate38 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate39 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate39 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate40 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate40 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate41 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate41 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate42 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate42 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate43 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate43 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate44 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate44 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate45 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate45 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate46 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate46 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate47 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate47 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate48 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate48 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate49 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate49 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate50 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate50 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate51 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate51 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate52 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate52 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate53 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate53 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate54 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate54 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate55 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate55 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate56 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate56 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate57 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate57 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate58 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate58 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate59 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate59 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate60 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate60 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate61 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate61 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate62 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate62 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate63 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate63 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate64 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate64 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate65 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate65 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate66 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate66 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate67 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate67 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate68 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate68 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate69 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate69 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate70 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate70 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate71 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate71 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate72 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate72 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate73 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate73 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate74 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate74 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate75 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate75 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate76 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate76 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate77 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate77 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate78 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate78 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate79 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate79 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate80 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate80 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate81 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate81 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate82 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate82 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate83 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate83 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate84 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate84 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate85 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate85 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate86 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate86 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate87 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate87 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate88 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate88 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate89 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate89 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate90 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate90 { }
#[must_use]
pub struct GTemplateOnlyPartialBlockTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for GTemplateOnlyPartialBlockTemplate91 {
    #[inline]
    fn clone(&self) -> GTemplateOnlyPartialBlockTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GTemplateOnlyPartialBlockTemplate91 { }
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After>
    Template<GTemplateOnlyPartialBlockTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GTemplateOnlyPartialBlockTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_template_only_partial_block()
    ->
        (Template<GTemplateOnlyPartialBlockTemplate26, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GTemplateOnlyPartialBlockTemplate26, (),
            ()> {
            r#type: GTemplateOnlyPartialBlockTemplate26,
            partial: (),
            after: (),
        }, gen {})
}
const _g_template_only_partial_block_FORCE_RECOMPILE: &'static str =
    "{{#>g_only_partial_block}}{{/g_only_partial_block}}";
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate0 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate0 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate1 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate1 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate2 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate2 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate3 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate3 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate4 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate4 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate5 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate5 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate6 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate6 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate7 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate7 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate8 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate8 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate9 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate9 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate10 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate10 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate11 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate11 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate12 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate12 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate13 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate13 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate14 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate14 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate15 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate15 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate16 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate16 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate17 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate17 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate18 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate18 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate19 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate19 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate20 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate20 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate21 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate21 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate22 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate22 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate23 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate23 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate24 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate24 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate25 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate25 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate26 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate26 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate27 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate27 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate28 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate28 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate29 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate29 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate30 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate30 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate31 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate31 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate32 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate32 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate33 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate33 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate34 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate34 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate35 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate35 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate36 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate36 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate37 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate37 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate38 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate38 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate39 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate39 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate40 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate40 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate41 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate41 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate42 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate42 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate43 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate43 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate44 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate44 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate45 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate45 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate46 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate46 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate47 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate47 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate48 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate48 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate49 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate49 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate50 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate50 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate51 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate51 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate52 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate52 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate53 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate53 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate54 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate54 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate55 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate55 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate56 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate56 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate57 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate57 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate58 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate58 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate59 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate59 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate60 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate60 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate61 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate61 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate62 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate62 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate63 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate63 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate64 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate64 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate65 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate65 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate66 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate66 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate67 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate67 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate68 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate68 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate69 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate69 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate70 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate70 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate71 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate71 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate72 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate72 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate73 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate73 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate74 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate74 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate75 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate75 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate76 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate76 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate77 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate77 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate78 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate78 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate79 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate79 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate80 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate80 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate81 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate81 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate82 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate82 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate83 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate83 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate84 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate84 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate85 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate85 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate86 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate86 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate87 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate87 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate88 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate88 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate89 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate89 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate90 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate90 { }
#[must_use]
pub struct FEachTwoVariablesHtmlTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for FEachTwoVariablesHtmlTemplate91 {
    #[inline]
    fn clone(&self) -> FEachTwoVariablesHtmlTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for FEachTwoVariablesHtmlTemplate91 { }
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate1, Partial, After>
    {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate2, Partial, After>
    {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate3, Partial, After>
    {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate4, Partial, After>
    {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate5, Partial, After>
    {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate6, Partial, After>
    {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate7, Partial, After>
    {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate35, Partial, After>
    {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate8, Partial, After>
    {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate9, Partial, After>
    {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate9, Partial, After>
    {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate10, Partial, After>
    {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate11, Partial, After>
    {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate12, Partial, After>
    {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate41, Partial, After>
    {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate13, Partial, After>
    {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate14, Partial, After>
    {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate15, Partial, After>
    {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate45, Partial, After>
    {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate16, Partial, After>
    {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate48, Partial, After>
    {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate47, Partial, After>
    {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate17, Partial, After>
    {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate50, Partial, After>
    {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate18, Partial, After>
    {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<FEachTwoVariablesHtmlTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<FEachTwoVariablesHtmlTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate57, Partial, After>
    {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate20, Partial, After>
    {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate60, Partial, After>
    {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate59, Partial, After>
    {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate21, Partial, After>
    {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate63, Partial, After>
    {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate22, Partial, After>
    {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate68, Partial, After>
    {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate67, Partial, After>
    {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate71, Partial, After>
    {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate23, Partial, After>
    {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate74, Partial, After>
    {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate24, Partial, After>
    {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate77, Partial, After>
    {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate76, Partial, After>
    {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate80, Partial, After>
    {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate79, Partial, After>
    {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate25, Partial, After>
    {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate84, Partial, After>
    {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate83, Partial, After>
    {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate26, Partial, After>
    {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate89, Partial, After>
    {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<FEachTwoVariablesHtmlTemplate27, Partial, After>
    {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<FEachTwoVariablesHtmlTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn f_each_two_variables_html()
    ->
        (Template<FEachTwoVariablesHtmlTemplate27, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<FEachTwoVariablesHtmlTemplate27, (),
            ()> {
            r#type: FEachTwoVariablesHtmlTemplate27,
            partial: (),
            after: (),
        }, gen {})
}
const _f_each_two_variables_html_FORCE_RECOMPILE: &'static str =
    "{{#each articles}}\n    <li>{{title}}</li>\n    <li>{{content}}</li>\n{{/each}}";
#[must_use]
pub struct GOnlyPartialBlockTemplate0;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate0 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate0 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate0 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate1;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate1 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate1 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate1 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate2;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate2 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate2 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate2 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate3;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate3 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate3 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate3 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate4;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate4 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate4 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate4 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate5;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate5 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate5 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate5 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate6;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate6 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate6 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate6 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate7;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate7 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate7 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate7 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate8;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate8 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate8 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate8 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate9;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate9 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate9 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate9 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate10;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate10 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate10 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate10 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate11;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate11 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate11 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate11 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate12;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate12 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate12 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate12 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate13;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate13 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate13 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate13 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate14;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate14 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate14 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate14 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate15;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate15 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate15 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate15 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate16;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate16 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate16 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate16 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate17;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate17 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate17 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate17 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate18;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate18 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate18 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate18 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate19;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate19 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate19 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate19 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate20;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate20 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate20 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate20 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate21;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate21 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate21 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate21 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate22;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate22 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate22 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate22 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate23;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate23 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate23 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate23 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate24;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate24 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate24 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate24 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate25;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate25 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate25 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate25 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate26;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate26 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate26 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate26 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate27;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate27 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate27 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate27 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate28;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate28 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate28 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate28 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate29;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate29 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate29 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate29 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate30;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate30 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate30 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate30 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate31;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate31 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate31 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate31 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate32;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate32 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate32 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate32 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate33;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate33 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate33 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate33 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate34;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate34 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate34 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate34 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate35;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate35 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate35 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate35 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate36;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate36 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate36 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate36 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate37;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate37 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate37 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate37 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate38;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate38 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate38 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate38 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate39;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate39 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate39 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate39 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate40;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate40 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate40 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate40 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate41;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate41 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate41 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate41 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate42;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate42 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate42 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate42 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate43;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate43 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate43 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate43 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate44;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate44 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate44 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate44 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate45;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate45 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate45 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate45 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate46;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate46 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate46 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate46 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate47;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate47 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate47 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate47 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate48;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate48 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate48 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate48 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate49;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate49 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate49 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate49 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate50;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate50 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate50 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate50 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate51;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate51 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate51 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate51 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate52;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate52 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate52 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate52 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate53;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate53 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate53 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate53 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate54;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate54 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate54 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate54 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate55;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate55 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate55 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate55 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate56;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate56 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate56 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate56 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate57;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate57 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate57 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate57 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate58;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate58 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate58 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate58 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate59;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate59 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate59 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate59 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate60;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate60 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate60 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate60 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate61;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate61 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate61 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate61 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate62;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate62 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate62 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate62 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate63;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate63 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate63 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate63 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate64;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate64 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate64 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate64 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate65;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate65 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate65 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate65 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate66;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate66 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate66 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate66 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate67;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate67 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate67 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate67 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate68;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate68 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate68 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate68 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate69;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate69 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate69 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate69 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate70;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate70 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate70 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate70 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate71;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate71 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate71 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate71 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate72;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate72 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate72 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate72 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate73;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate73 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate73 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate73 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate74;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate74 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate74 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate74 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate75;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate75 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate75 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate75 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate76;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate76 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate76 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate76 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate77;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate77 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate77 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate77 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate78;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate78 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate78 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate78 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate79;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate79 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate79 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate79 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate80;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate80 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate80 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate80 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate81;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate81 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate81 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate81 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate82;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate82 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate82 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate82 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate83;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate83 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate83 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate83 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate84;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate84 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate84 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate84 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate85;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate85 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate85 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate85 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate86;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate86 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate86 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate86 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate87;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate87 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate87 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate87 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate88;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate88 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate88 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate88 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate89;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate89 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate89 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate89 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate90;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate90 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate90 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate90 { }
#[must_use]
pub struct GOnlyPartialBlockTemplate91;
#[automatically_derived]
impl ::core::clone::Clone for GOnlyPartialBlockTemplate91 {
    #[inline]
    fn clone(&self) -> GOnlyPartialBlockTemplate91 { *self }
}
#[automatically_derived]
impl ::core::marker::Copy for GOnlyPartialBlockTemplate91 { }
impl<Partial, After> Template<GOnlyPartialBlockTemplate1, Partial, After> {
    #[doc =
    "Transition from `1: b_text other` to `29: b_text other` using `0: [] hello`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("hello"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate2, Partial, After> {
    #[doc =
    "Transition from `2: c_element_with_attribute other` to `30: c_element_with_attribute other` using `1: [] <a class=\"test\"></a>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"test\"></a>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate3, Partial, After> {
    #[doc =
    "Transition from `3: c_element_with_content other` to `31: c_element_with_content other` using `2: [] <h1>hi</h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1>hi</h1>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate4, Partial, After> {
    #[doc =
    "Transition from `4: c_empty_element other` to `32: c_empty_element other` using `3: [] <h1></h1>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<h1></h1>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate5, Partial, After> {
    #[doc =
    "Transition from `5: c_self_closing_boolean_attr other` to `33: c_self_closing_boolean_attr other` using `4: [] <!DOCTYPE html>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE html>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate6, Partial, After> {
    #[doc =
    "Transition from `6: c_self_closing other` to `34: c_self_closing other` using `5: [] <!DOCTYPE>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("<!DOCTYPE>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate7, Partial, After> {
    #[doc =
    "Transition from `7: d_element_with_attribute_and_variables other` to `35: d_element_with_attribute_and_variables other` using `6: [] <a class=\"{{test:attr}}\">`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<DElementWithAttributeAndVariablesTemplate35, Partial,
            After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<DElementWithAttributeAndVariablesTemplate35, Partial,
                After> {
                r#type: DElementWithAttributeAndVariablesTemplate35,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("<a class=\"");
                yield
                    zero_cost_templating::encode_double_quoted_attribute(test);
                yield ::alloc::borrow::Cow::from("\">");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate35, Partial, After> {
    #[doc =
    "Transition from `35: d_element_with_attribute_and_variables other` to `36: d_element_with_attribute_and_variables other` using `7: [] {{var:element}}</a>`"]
    pub fn var(self, var: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(var);
                yield ::alloc::borrow::Cow::from("</a>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate8, Partial, After> {
    #[doc =
    "Transition from `8: d_variable other` to `37: d_variable other` using `8: [] <p>{{test:element}}</p>`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("<p>");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("</p>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `9: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate9, Partial, After> {
    #[doc =
    "Transition from `9: e_if_else_empty_false other` to `38: e_if_else_empty_false other` using `10: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `11: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate10, Partial, After> {
    #[doc =
    "Transition from `10: e_if_else_empty_true other` to `39: e_if_else_empty_true other` using `12: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `13: [true] `"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate11, Partial, After> {
    #[doc =
    "Transition from `11: e_if_else_empty other` to `40: e_if_else_empty other` using `14: [false] `"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate12, Partial, After> {
    #[doc =
    "Transition from `12: e_if_else_with_variables other` to `41: e_if_else_with_variables other` using `15: [] <span>`"]
    pub fn next(self)
        ->
            (Template<EIfElseWithVariablesTemplate41, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<EIfElseWithVariablesTemplate41, Partial,
                After> {
                r#type: EIfElseWithVariablesTemplate41,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `16: [true] {{t:element}}</span>`"]
    pub fn t_true(self, t: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(t);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate41, Partial, After> {
    #[doc =
    "Transition from `41: e_if_else_with_variables other` to `42: e_if_else_with_variables other` using `17: [false] {{f:element}}</span>`"]
    pub fn f_false(self, f: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(f);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `18: [true] true`"]
    pub fn next_true(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("true"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate13, Partial, After> {
    #[doc =
    "Transition from `13: e_if_else other` to `43: e_if_else other` using `19: [false] false`"]
    pub fn next_false(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("false"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `14: f_each_empty other` using `20: [enter_loop] `"]
    pub fn next_enter_loop(self)
        ->
            (Template<FEachEmptyTemplate14, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachEmptyTemplate14, Partial,
                After> {
                r#type: FEachEmptyTemplate14,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate14, Partial, After> {
    #[doc =
    "Transition from `14: f_each_empty other` to `44: f_each_empty other` using `21: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate15, Partial, After> {
    #[doc =
    "Transition from `15: f_each_one_variable other` to `45: f_each_one_variable other` using `22: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `45: f_each_one_variable other` using `23: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachOneVariableTemplate45, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachOneVariableTemplate45, Partial,
                After> {
                r#type: FEachOneVariableTemplate45,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate45, Partial, After> {
    #[doc =
    "Transition from `45: f_each_one_variable other` to `46: f_each_one_variable other` using `24: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate16, Partial, After> {
    #[doc =
    "Transition from `16: f_each_two_variables other` to `47: f_each_two_variables other` using `25: [] <span>`"]
    pub fn next(self)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `48: f_each_two_variables other` using `26: [enter_loop] {{title:element}}`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate48, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate48, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate48,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate48, Partial, After> {
    #[doc =
    "Transition from `48: f_each_two_variables other` to `47: f_each_two_variables other` using `27: [] {{content:element}}`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesTemplate47, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesTemplate47, Partial,
                After> {
                r#type: FEachTwoVariablesTemplate47,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate47, Partial, After> {
    #[doc =
    "Transition from `47: f_each_two_variables other` to `49: f_each_two_variables other` using `28: [end_loop] </span>`"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate17, Partial, After> {
    #[doc =
    "Transition from `17: g_empty_template_multiple other` to `50: g_empty_template_multiple inner` using `29: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate50, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate50, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate50,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate50, Partial, After> {
    #[doc =
    "Transition from `50: g_empty_template_multiple inner` to `52: g_empty_template_multiple inner` using `32: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateMultipleTemplate52, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateMultipleTemplate52, (),
                ()> {
                r#type: GEmptyTemplateMultipleTemplate52,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate18, Partial, After> {
    #[doc =
    "Transition from `18: g_empty_template other` to `54: g_empty_template inner` using `35: [] `"]
    pub fn next(self)
        ->
            (Template<GEmptyTemplateTemplate54, (), ()>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GEmptyTemplateTemplate54, (),
                ()> {
                r#type: GEmptyTemplateTemplate54,
                partial: (),
                after: (),
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GOnlyPartialBlockTemplate19,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `19: g_partial_block_partial other` to `56: g_partial_block_partial partial` using `38: [] <span>{{before:element}}<p>`"]
    pub fn before(self, before: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate56,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate56,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate56,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate56,
                    partial: self.partial,
                    after: self.after,
                },
            },
            gen {
                yield ::alloc::borrow::Cow::from("<span>");
                yield zero_cost_templating::encode_element_text(before);
                yield ::alloc::borrow::Cow::from("<p>");
            })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GOnlyPartialBlockTemplate56,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `56: g_partial_block_partial partial` to `57: g_partial_block_partial partial` using `39: [] </p><div>`"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GPartialBlockPartialTemplate57,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GPartialBlockPartialTemplate57,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GPartialBlockPartialTemplate57,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GPartialBlockPartialTemplate57,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from("</p><div>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate57, Partial, After> {
    #[doc =
    "Transition from `57: g_partial_block_partial partial` to `58: g_partial_block_partial other` using `40: [] </div>{{after:element}}</span>`"]
    pub fn after(self, after: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("</div>");
                yield zero_cost_templating::encode_element_text(after);
                yield ::alloc::borrow::Cow::from("</span>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate20, Partial, After> {
    #[doc =
    "Transition from `20: g_partial_block other` to `59: g_partial_block inner` using `41: [] <span>hello`"]
    pub fn next(self)
        ->
            (Template<GPartialBlockPartialTemplate19,
            Template<GPartialBlockTemplate60, (),
            Template<GPartialBlockTemplate59, (), ()>>,
            Template<GPartialBlockTemplate59, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GPartialBlockPartialTemplate19,
                Template<GPartialBlockTemplate60, (),
                Template<GPartialBlockTemplate59, (), ()>>,
                Template<GPartialBlockTemplate59, (),
                ()>> {
                r#type: GPartialBlockPartialTemplate19,
                partial: Template::<GPartialBlockTemplate60, (),
                    Template<GPartialBlockTemplate59, (),
                    ()>> {
                    r#type: GPartialBlockTemplate60,
                    partial: (),
                    after: Template::<GPartialBlockTemplate59, (),
                        ()> {
                        r#type: GPartialBlockTemplate59,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GPartialBlockTemplate59, (),
                    ()> {
                    r#type: GPartialBlockTemplate59,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>hello"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate60, Partial, After> {
    #[doc =
    "Transition from `60: g_partial_block other` to `61: g_partial_block other` using `43: [] childrenstart{{test:element}}childrenend`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("childrenstart");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("childrenend");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate59, Partial, After> {
    #[doc =
    "Transition from `59: g_partial_block inner` to `62: g_partial_block other` using `45: [] world</span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen { yield ::alloc::borrow::Cow::from("world</span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate21, Partial, After> {
    #[doc =
    "Transition from `21: g_template_only_partial_block_multiple other` to `63: g_template_only_partial_block_multiple inner` using `46: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate63, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate63,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate63,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate63, Partial, After> {
    #[doc =
    "Transition from `63: g_template_only_partial_block_multiple inner` to `65: g_template_only_partial_block_multiple inner` using `49: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
            Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (), ()>,
                Template<GTemplateOnlyPartialBlockMultipleTemplate65, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockMultipleTemplate65,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockMultipleTemplate65,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate22, Partial, After> {
    #[doc =
    "Transition from `22: g_template_only_partial_block_with_text_multiple other` to `67: g_template_only_partial_block_with_text_multiple inner` using `52: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate68,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate67,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate68, Partial, After> {
    #[doc =
    "Transition from `68: g_template_only_partial_block_with_text_multiple other` to `69: g_template_only_partial_block_with_text_multiple other` using `54: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate67, Partial, After> {
    #[doc =
    "Transition from `67: g_template_only_partial_block_with_text_multiple inner` to `70: g_template_only_partial_block_with_text_multiple inner` using `56: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71, (),
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                (),
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate71,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextMultipleTemplate70,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate71, Partial, After> {
    #[doc =
    "Transition from `71: g_template_only_partial_block_with_text_multiple other` to `72: g_template_only_partial_block_with_text_multiple other` using `58: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate23, Partial, After> {
    #[doc =
    "Transition from `23: g_template_only_partial_block_with_text other` to `73: g_template_only_partial_block_with_text inner` using `60: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            Template<GTemplateOnlyPartialBlockWithTextTemplate73, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithTextTemplate74, (),
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithTextTemplate74,
                    (),
                    Template<GTemplateOnlyPartialBlockWithTextTemplate73, (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate74,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithTextTemplate73,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithTextTemplate73,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate74, Partial, After> {
    #[doc =
    "Transition from `74: g_template_only_partial_block_with_text other` to `75: g_template_only_partial_block_with_text other` using `62: [] test`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("test"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate24, Partial, After> {
    #[doc =
    "Transition from `24: g_template_only_partial_block_with_variable_multiple other` to `76: g_template_only_partial_block_with_variable_multiple inner` using `64: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate77,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate76,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate77, Partial, After> {
    #[doc =
    "Transition from `77: g_template_only_partial_block_with_variable_multiple other` to `78: g_template_only_partial_block_with_variable_multiple other` using `66: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate76, Partial, After> {
    #[doc =
    "Transition from `76: g_template_only_partial_block_with_variable_multiple inner` to `79: g_template_only_partial_block_with_variable_multiple inner` using `68: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
            (),
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
            (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                (),
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (), ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate80,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableMultipleTemplate79,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate80, Partial, After> {
    #[doc =
    "Transition from `80: g_template_only_partial_block_with_variable_multiple other` to `81: g_template_only_partial_block_with_variable_multiple other` using `70: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate79, Partial, After> {
    #[doc =
    "Transition from `79: g_template_only_partial_block_with_variable_multiple inner` to `82: g_template_only_partial_block_with_variable_multiple other` using `72: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate25, Partial, After> {
    #[doc =
    "Transition from `25: g_template_only_partial_block_with_variable other` to `83: g_template_only_partial_block_with_variable inner` using `73: [] <span>`"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
            ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate84, (),
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>>,
                Template<GTemplateOnlyPartialBlockWithVariableTemplate83, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockWithVariableTemplate84,
                    (),
                    Template<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()>> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate84,
                    partial: (),
                    after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                        (),
                        ()> {
                        r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                        partial: (),
                        after: (),
                    },
                },
                after: Template::<GTemplateOnlyPartialBlockWithVariableTemplate83,
                    (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockWithVariableTemplate83,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from("<span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate84, Partial, After> {
    #[doc =
    "Transition from `84: g_template_only_partial_block_with_variable other` to `85: g_template_only_partial_block_with_variable other` using `75: [] {{test:element}}`"]
    pub fn test(self, test: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after,
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(test);
                yield ::alloc::borrow::Cow::from("");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate83, Partial, After> {
    #[doc =
    "Transition from `83: g_template_only_partial_block_with_variable inner` to `86: g_template_only_partial_block_with_variable other` using `77: [] </span>`"]
    pub fn next(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from("</span>"); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate26, Partial, After> {
    #[doc =
    "Transition from `26: g_template_only_partial_block other` to `87: g_template_only_partial_block inner` using `78: [] `"]
    pub fn next(self)
        ->
            (Template<GOnlyPartialBlockTemplate28,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
            Template<GTemplateOnlyPartialBlockTemplate87, (), ()>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<GOnlyPartialBlockTemplate28,
                Template<GTemplateOnlyPartialBlockTemplate87, (), ()>,
                Template<GTemplateOnlyPartialBlockTemplate87, (),
                ()>> {
                r#type: GOnlyPartialBlockTemplate28,
                partial: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
                after: Template::<GTemplateOnlyPartialBlockTemplate87, (),
                    ()> {
                    r#type: GTemplateOnlyPartialBlockTemplate87,
                    partial: (),
                    after: (),
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `89: f_each_two_variables_html other` using `81: [enter_loop] \n    <li>{{title:element}}</li>\n    <li>`"]
    pub fn title_enter_loop(self,
        title: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate89, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate89, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate89,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("\n    <li>");
                yield zero_cost_templating::encode_element_text(title);
                yield ::alloc::borrow::Cow::from("</li>\n    <li>");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate89, Partial, After> {
    #[doc =
    "Transition from `89: f_each_two_variables_html other` to `27: f_each_two_variables_html other` using `82: [] {{content:element}}</li>\n`"]
    pub fn content(self,
        content: impl Into<::alloc::borrow::Cow<'static, str>>)
        ->
            (Template<FEachTwoVariablesHtmlTemplate27, Partial, After>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<FEachTwoVariablesHtmlTemplate27, Partial,
                After> {
                r#type: FEachTwoVariablesHtmlTemplate27,
                partial: self.partial,
                after: self.after,
            },
            gen {
                yield ::alloc::borrow::Cow::from("");
                yield zero_cost_templating::encode_element_text(content);
                yield ::alloc::borrow::Cow::from("</li>\n");
            })
    }
}
impl<Partial, After> Template<GOnlyPartialBlockTemplate27, Partial, After> {
    #[doc =
    "Transition from `27: f_each_two_variables_html other` to `90: f_each_two_variables_html other` using `83: [end_loop] `"]
    pub fn next_end_loop(self)
        ->
            (After,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (self.after, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
impl<PartialName: Copy, PartialPartial, PartialAfter, After>
    Template<GOnlyPartialBlockTemplate28,
    Template<PartialName, PartialPartial, PartialAfter>, After> {
    #[doc =
    "Transition from `28: g_only_partial_block other` to `91: g_only_partial_block partial` using `84: [] `"]
    pub fn next(self)
        ->
            (Template<PartialName, (),
            Template<GOnlyPartialBlockTemplate91,
            Template<PartialName, PartialPartial, PartialAfter>, After>>,
            impl ::std::iter::Iterator<Item =
            ::alloc::borrow::Cow<'static, str>>) {
        (Template::<PartialName, (),
                Template<GOnlyPartialBlockTemplate91,
                Template<PartialName, PartialPartial, PartialAfter>,
                After>> {
                r#type: self.partial.r#type,
                partial: (),
                after: Template::<GOnlyPartialBlockTemplate91,
                    Template<PartialName, PartialPartial, PartialAfter>,
                    After> {
                    r#type: GOnlyPartialBlockTemplate91,
                    partial: self.partial,
                    after: self.after,
                },
            }, gen { yield ::alloc::borrow::Cow::from(""); })
    }
}
#[allow(unused)]
#[doc = r" Start"]
pub fn g_only_partial_block()
    ->
        (Template<GOnlyPartialBlockTemplate28, (), ()>,
        impl ::std::iter::Iterator<Item =
        ::alloc::borrow::Cow<'static, str>>) {
    (Template::<GOnlyPartialBlockTemplate28, (),
            ()> {
            r#type: GOnlyPartialBlockTemplate28,
            partial: (),
            after: (),
        }, gen {})
}
const _g_only_partial_block_FORCE_RECOMPILE: &'static str =
    "{{>@partial-block}}";
pub gen fn test() -> Cow<'static, str> {
    let template =
        // 264
        {
            let expr = g_partial_block();
            let mut iter = expr.1;
            let ret = expr.0;
            while let Some(v) = ::std::iter::Iterator::next(&mut iter) {
                yield v;
            }
            ret
        };
    let template =
        {
            let expr = template.next();
            let mut iter = expr.1;
            let ret = expr.0;
            while let Some(v) = ::std::iter::Iterator::next(&mut iter) {
                yield v;
            }
            ret
        };
    let template =
        {
            let expr = template.before("before");
            let mut iter = expr.1;
            let ret = expr.0;
            while let Some(v) = ::std::iter::Iterator::next(&mut iter) {
                yield v;
            }
            ret
        };
    let template =
        {
            let expr = template.test("test");
            let mut iter = expr.1;
            let ret = expr.0;
            while let Some(v) = ::std::iter::Iterator::next(&mut iter) {
                yield v;
            }
            ret
        };
    let template =
        {
            let expr = template.next();
            let mut iter = expr.1;
            let ret = expr.0;
            while let Some(v) = ::std::iter::Iterator::next(&mut iter) {
                yield v;
            }
            ret
        };
    let template =
        {
            let expr = template.test("test");
            let mut iter = expr.1;
            let ret = expr.0;
            while let Some(v) = ::std::iter::Iterator::next(&mut iter) {
                yield v;
            }
            ret
        };
    let template =
        {
            let expr = template.after("after");
            let mut iter = expr.1;
            let ret = expr.0;
            while let Some(v) = ::std::iter::Iterator::next(&mut iter) {
                yield v;
            }
            ret
        };
    {
        let expr = template.next();
        let mut iter = expr.1;
        let ret = expr.0;
        while let Some(v) = ::std::iter::Iterator::next(&mut iter) {
            yield v;
        }
        ret
    };
}
pub fn main() {
    let body =
        async {
            let mut async_iterator = test();
            {
                ::std::io::_print(format_args!("size: {0}\n",
                        std::mem::size_of_val(&async_iterator)));
            };
            let mut output = String::new();
            while let Some(value) = async_iterator.next() {
                output.push_str(&value);
            }
            { ::std::io::_print(format_args!("{0}", output)); };
        };

    #[allow(clippy :: expect_used, clippy :: diverging_sub_expression)]
    {
        return tokio::runtime::Builder::new_multi_thread().enable_all().build().expect("Failed building the Runtime").block_on(body);
    }
}
